{"version":3,"sources":["final_project.ts","index.tsx"],"names":["send","actions","cancel","say","text","_context","type","value","math_operator_store","operate","a","b","operator","generate_number","Math","floor","random","parse_asr_numbers","input","numbers","0","1","2","3","4","5","6","7","8","9","i","length","replace","split","join","riddles_store","riddle","answers","hint","commands","maxspeech_count_local","dmMachine","initial","id","context","maxspeech_count","on","MAXSPEECH","RECOGNISED","target","cond","recResult","states","main","hist","history","clicky","CLICK","assign","begin","MAX_HTTP","NLU_REQ_DONE","snippet","event","prompt","entry","ENDSPEECH","ask","delay","nlu_process","invoke","src","fetch","Request","proxyurl","method","headers","body","then","data","json","onDone","onError","http_timer","re_prompt","completed_query","console","log","intent","name","too_long","maxspeech_counter","quick_math","solution","toString","points","wrong_math","includes","generate_math_question","operator_id","number_one","number_two","ask_math_question","wrong_answer","right_answer","try_again","riddles","riddle_id","wrong_riddle","ask_riddle","another_riddle","listen","chimp_test","sequence","push","one_try_given","say_sequence","correct_sequence","wrong_sequence","please_repeat","maxspeech","apologies","stop","help","inspect","url","iframe","machine","Machine","dm","asrtts","idle","LISTEN","SPEAK","ttsAgenda","recognising","exit","ASRRESULT","toLowerCase","progress","match","speaking","recLogResult","test","logIntent","nluData","ReactiveButton","props","state","matches","className","style","animation","App","useSpeechSynthesis","onEnd","speak","voices","useSpeechRecognition","onResult","result","listening","useMachine","devTools","recStart","asEffect","lang","interimResults","continuous","recStop","changeColour","document","background","ttsStart","effect","voice","ttsCancel","current","onClick","rootElement","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.332b969b.chunk.js","sourcesContent":["import { MachineConfig, actions, Action, assign } from \"xstate\";\nconst { send, cancel } = actions;\n\n\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string, bool_val?: boolean, initial_function: string } } = {\n\n\t\"quick math\": { quick_math: null },\n\t\"quick maths\": { quick_math: null },\n\t\"play quick math\": { quick_math: null },\n\t\"play quick maths\": { quick_math: null },\n\t\n\t\"riddles\": { riddles: null },\n\t\"riddle\": { riddles: null },\n\t\"tell me a riddle\": { riddles: null },\n\t\"play riddles\": { riddles: null },\n\t\n\t\"memory game\": { chimp_test: null },\n\t\"memory test\": { chimp_test: null },\n\t\"number test\": { chimp_test: null },\n\t\"number memory test\": { chimp_test: null },\n\t\"the memory game\": { chimp_test: null },\n\t\"the memory test\": { chimp_test: null },\n\t\"the number test\": { chimp_test: null },\n\t\"the number memory test\": { chimp_test: null },\n\t\"number sequence game\": { chimp_test: null },\n\t\"the number sequence game\": { chimp_test: null },\n\t\n\t\n}\n\n\nconst math_operator_store = {\n\toperate: function(a,b,operator){\n\t\tswitch(operator){\n\t\t\tcase 'plus': \n\t\t\t\treturn a+b\n\t\t\tcase 'subtract': \n\t\t\t\treturn a-b\n\t\t\tcase 'times': \n\t\t\t\treturn a*b\n\t\t\t//~ case 'divide':\n\t\t\t\t//~ return a/b\n\t\t\t}\n\t\t},\n\tgenerate_number: function(operator){\n\t\tswitch(operator){\n\t\t\tcase 'plus': \n\t\t\t\treturn Math.floor(Math.random() * 100)\n\t\t\tcase 'subtract': \n\t\t\t\treturn Math.floor(Math.random() * 100)\n\t\t\tcase 'times': \n\t\t\t\treturn Math.floor(Math.random() * 12)\n\t\t\t//~ case 'divide': //division can be a bit hard on the spot for a user\n\t\t\t\t//~ return a/b\n\t\t}\n\t},\n\tparse_asr_numbers: function(input){\n\t\tconst numbers = {\n\t\t\t0: 'zero',\n\t\t\t1: 'one',\n\t\t\t2: 'two',\n\t\t\t3: 'three',\n\t\t\t4: 'four',\n\t\t\t5: 'five',\n\t\t\t6: 'six',\n\t\t\t7: 'seven',\n\t\t\t8: 'eight',\n\t\t\t9: 'nine',\n\t\t}\n\t\tfor (var i = 0; i < numbers.length; i++) {\n\t\t\tinput = input.replace(numbers[i], i)\n\t\t}\n\t\tinput = input.replace('for', 4)\n\t\tinput = input.replace('to', 2)\n\t\tinput = input.replace('too', 2)\n\t\treturn input.split(/[\\s--,.+]/).join('') \n\t},\n\t0: {\n\t\toperator: \"plus\",\n\t},\n\t1: {\n\t\toperator: \"subtract\",\n\t},\n\t2: {\n\t\toperator: \"times\",\n\t},\n\t3: {\n\t\toperator: \"divide\",\n\t},\n}\n\nconst riddles_store = {\n\t0: {\n\t\triddle: \"What has to be broken before you can use it?\",\n\t\tanswers: [\n\t\t\t\"egg\",\n\t\t\t\"an egg\",\n\t\t],\n\t\thint: \"I like them scrambled. \"\n\t},\n\t1: {\n\t\triddle: \"What gets wet while drying?\",\n\t\tanswers: [\n\t\t\t\"towel\",\n\t\t\t\"a towel\",\n\t\t\t\"towels\",\n\t\t],\n\t\thint: \"You'll have to take one to the beach if you want to take a swim. \"\n\t},\n\t2: {\n\t\triddle: \"What can you give and still hold on to?\",\n\t\tanswers: [\n\t\t\t\"promise\",\n\t\t\t\"a promise\",\n\t\t\t\"promises\",\n\t\t\t\"your word\"\n\t\t],\n\t\thint: \"Relationships are more secure with these. \"\n\t},\n\t3: {\n\t\triddle: \"The more of this there is, the less you see. What is it?\",\n\t\tanswers: [\n\t\t\t\"darkness\",\n\t\t\t\"the dark\",\n\t\t],\n\t\thint: \"This descibes the absence rather than the presence of something. \"\n\t},\n\t4: {\n\t\triddle: \"This is as light as a feather, but you can't hold it too long. \",\n\t\tanswers: [\n\t\t\t\"your breath\",\n\t\t\t\"breath\",\n\t\t\t\"the breath\",\n\t\t\t\"a breath\"\n\t\t],\n\t\thint: \"Don't forget to do this or you'll die.\"\n\t},\n\t5: {\n\t\triddle: \"Before Mount Everest was discovered, what was the highest mountain on Earth?\",\n\t\tanswers: [\n\t\t\t\"everest\",\n\t\t\t\"mount everest\"\n\t\t],\n\t\thint: \"If nobody is there to observe it does that mean it is not true?\"\n\t},\n\t6: {\n\t\triddle: \"What runs around the whole yard without moving?\",\n\t\tanswers: [\n\t\t\t\"a fence\",\n\t\t\t\"fence\",\n\t\t\t\"fences\",\n\t\t],\n\t\thint: \"Some things described as running may be static. \"\n\t},\n\t7: {\n\t\triddle: \"What can you catch, but never throw?\",\n\t\tanswers: [\n\t\t\t\"a cold\",\n\t\t\t\"a virus\",\n\t\t\t\"a sickness\",\n\t\t\t\"a disease\",\n\t\t\t\"cold\",\n\t\t\t\"virus\",\n\t\t\t\"sickness\",\n\t\t\t\"disease\",\n\t\t\t\"colds\",\n\t\t\t\"viruses\",\n\t\t\t\"sicknesses\",\n\t\t\t\"diseases\",\n\t\t],\n\t\thint: \"Covid 19 has not been a great thing for the world. \"\n\t},\n\t\n}\n\nfunction promptAndAsk(prompt: string): MachineConfig<SDSContext, any, SDSEvent> {\n\t\n    return ({\n        initial: 'prompt',\n        states: {\n            prompt: {\n                entry: say(prompt),\n                on: { ENDSPEECH: 'ask' }\n            },\n            ask: {\n                entry: [\n\t\t\t\t\tsend('LISTEN'),\n\t\t\t\t\tsend( 'MAXSPEECH', { delay: 6000, id: 'maxspeech_cancel' } )\n\t\t\t\t]\n            },\n        }\n    })\n}\n\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\" //\"https://boiling-depths-26621.herokuapp.com/\" alternate url\nconst rasaurl = 'https://herokufinalproj.herokuapp.com/model/parse'\n\n\nconst commands = ['stop', 'help']\nvar maxspeech_count_local = 0\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'main',\n    id: 'init',\n    context: {\n\t\tmaxspeech_count: 0,\n\t},\n    on: {\n\t\tMAXSPEECH: '.maxspeech',\n\t\tRECOGNISED: \n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\ttarget: \".stop\",\n\t\t\t\t\tcond: (context) => context.recResult === 'stop' ,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttarget: \".help\",\n\t\t\t\t\tcond: (context) => context.recResult === 'help' ,\n\t\t\t\t}\n\t\t\t],\n\t},\n    states: {\n        main: {\n\t\t\tinitial: 'clicky',\n\t\t\tstates: {\n\t\t\t\thist: {\n\t\t\t\t\ttype: 'history',\n\t\t\t\t\thistory: 'shallow',\n\t\t\t\t },\n\t\t\t\tclicky: {\n\t\t\t\t\ton: {\n\t\t\t\t\t\tCLICK: {\n\t\t\t\t\t\t\ttarget: 'begin',\n\t\t\t\t\t\t\tactions: assign(context=>{maxspeech_count_local = 0; return { maxspeech_count: 0 } })\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tbegin:{\n\t\t\t\t\tinitial: \"prompt\",\n\t\t\t\t\tid: \"welcome\",\n\t\t\t\t\ton: {\n\t\t\t\t\t\tMAX_HTTP: {\n\t\t\t\t\t\t\ttarget: '#init',\n\t\t\t\t\t\t\tactions: say('The RASA server is taking too long to respond. Please wait and try again. ')\n\t\t\t\t\t\t},\n\t\t\t\t\t\tNLU_REQ_DONE: [\n\t\t\t\t\t\t\t{\n\t\t\t                    cond: (context) => context.snippet === \"chimp_test\",\n\t\t\t                    target: \"chimp_test\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttarget: \"quick_math\",\n\t\t\t\t\t\t\t\tcond: (context, event) => context.snippet === \"quick_math\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttarget: \"riddles\",\n\t\t\t\t\t\t\t\tcond: (context) => context.snippet === \"riddles\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttarget: \".re_prompt\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t],\n\t\t\t\t\t\tRECOGNISED: '.nlu_process',\n\t\t\t\t\t\tMAXSPEECH: '.too_long',\n\t\t\t\t\t},\n\t\t\t\t\tstates: {\n\t\t\t\t\t\tprompt: {\n\t\t\t\t\t\t\t...promptAndAsk(\"Hello! You have a selection of one of the following mini games. You can choose between quick maths, riddles or the number memory test. You can also tell me to stop or ask for help at any time. \")\n\t\t\t\t\t\t},\n\t\t\t\t\t\tnlu_process: {\n\t\t\t\t\t\t\tinitial: 'http_timer',\n\t\t\t\t\t\t\tinvoke: {\n\t\t\t\t\t\t\t\tid: \"rasaquery\",\n\t\t\t\t\t\t\t\tsrc: (context, event) => {\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\treturn fetch(new Request(proxyurl + rasaurl, {\n\t\t\t\t\t\t\t        method: 'POST',\n\t\t\t\t\t\t\t        headers: { 'Origin': 'http://localhost:3000/' }, // only required with proxy\n\t\t\t\t\t\t\t        body: `{\"text\": \"${context.recResult}\"}`\n\t\t\t\t\t\t\t\t\t}))\n\t\t\t\t\t\t\t        .then(data => data.json());\n\t\t\t\t\t\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tonDone: 'completed_query',\n\t\t\t\t\t\t\t\tonError: {\n\t\t\t\t\t\t\t\t\t\ttarget: '#init',\n\t\t\t\t\t\t\t\t\t\tactions: say(\"Sorry, there was an error. \")\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tstates: {\n\t\t\t\t\t\t\t\thttp_timer: {\n\t\t\t\t\t\t\t\t\tentry: send( 'MAX_HTTP', { delay: 12000, id: 'maxspeech_cancel' } )\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tre_prompt: {\n\t\t\t\t\t\t\tentry: say(\"Sorry, I didn't quite get that. Repeat yoself!\"),\n\t\t\t\t\t\t\ton: { ENDSPEECH: 'ask' }\n\t\t\t\t\t\t},\n\t\t\t\t\t\task: {\n\t\t\t                entry: [\n\t\t\t\t\t\t\t\tsend('LISTEN'),\n\t\t\t\t\t\t\t\tsend( 'MAXSPEECH', { delay: 7000, id: 'maxspeech_cancel' } )\n\t\t\t\t\t\t\t],\n\t\t\t            },\n\t\t\t\t\t\tcompleted_query: {\n\t\t\t\t\t\t\tentry: [\n\t\t\t\t\t\t\t\tassign((context, event)=>{\n\t\t\t\t\t\t\t\t\tconsole.log(event.data.intent.name)\n\t\t\t\t\t\t\t\t\treturn { snippet: ( event.data.intent.name || 'unconfident_resp' ) }\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\tsend(\"NLU_REQ_DONE\")\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttoo_long:{\n\t\t\t\t\t\t\tentry: say('Still there?'),\n\t\t\t\t\t\t\ton: { \n\t\t\t\t\t\t\t\tENDSPEECH: [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\ttarget: '#init',\n\t\t\t\t\t\t\t\t\t\tcond: (context) => context.maxspeech_counter > 2,\n\t\t\t\t\t\t\t\t\t\tactions: say(\"As you haven't responded; resetting...\")\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\ttarget: 'ask',\n\t\t\t\t\t\t\t\t\t\tactions: assign(context=>{ return { maxspeech_counter: (context.maxspeech_counter || 0)+1 } })\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t            }\n\t\t\t\t},\n\t\t\t\tquick_math: {\n\t\t            id: \"quick_math\",\n\t\t\t\t\tinitial: \"generate_math_question\",\n\t\t\t\t\ton: {\n\t\t\t\t\t\tMAXSPEECH: '.too_long',\n\t\t\t\t\t\tRECOGNISED: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttarget: '.right_answer',\n\t\t\t\t\t\t\t\tcond: (context) => context.recResult === context.solution.toString(),\n\t\t\t\t\t\t\t\tactions: assign((context)=>{ return { \n\t\t\t\t\t\t\t\t\tpoints: (context.points || 0)+1 ,\n\t\t\t\t\t\t\t\t\twrong_math : 0\n\t\t\t\t\t\t\t\t} })\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttarget: \".wrong_answer\",\n\t\t\t\t\t\t\t\tcond: (context) => !commands.includes(context.recResult)\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\tstates: {\n\t\t\t\t\t\tgenerate_math_question: {\n\t\t\t\t\t\t\tentry: say(\"Here is your maths question\"),\n\t\t\t\t\t\t\ton: {\n\t\t\t\t\t\t\t\tENDSPEECH: {\n\t\t\t\t\t\t\t\t\ttarget: \"ask_math_question\",\n\t\t\t\t\t\t\t\t\tactions: assign((context) => {\n\t\t\t\t\t\t\t\t\t\tvar operator_id = Math.floor(Math.random() * 3)\n\t\t\t\t\t\t\t\t\t\tvar operator = math_operator_store[operator_id].operator\n\t\t\t\t\t\t\t\t\t\treturn { \n\t\t\t\t\t\t\t\t\t\t\tnumber_one: math_operator_store.generate_number(operator),\n\t\t\t\t\t\t\t\t\t\t\tnumber_two: math_operator_store.generate_number(operator),\n\t\t\t\t\t\t\t\t\t\t\toperator_id: operator_id,\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\task_math_question: {\n\t\t\t\t\t\t\tentry: send((context) => ({\n\t\t                        type: \"SPEAK\",\n\t\t                        value: `What is ${context.number_one} ${math_operator_store[context.operator_id].operator} ${context.number_two}.`\n\t\t                    })),\n\t\t                    on: { ENDSPEECH: {\n\t\t\t\t\t\t\t\t\ttarget: \"ask\",\n\t\t\t\t\t\t\t\t\tactions: assign(context=> {\n\t\t\t\t\t\t\t\t\t\treturn { solution: math_operator_store.operate(context.number_one, context.number_two, math_operator_store[context.operator_id].operator) }\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\twrong_answer: {\n\t\t\t\t\t\t\tentry: say(\"Sorry, that's wrong!\"),\n\t\t\t\t\t\t\ton: { ENDSPEECH:  [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\ttarget: 'try_again',\n\t\t\t\t\t\t\t\t\t\tactions: assign(context=>{ return { wrong_math: (context.wrong_math || 0) +1 } }),\n\t\t\t\t\t\t\t\t\t\tcond: context=> (context.wrong_math || 0) < 2,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\ttarget: '#init',\n\t\t\t\t\t\t\t\t\t\tactions: say(\"... and you've gotten it wrong a couple of times now! Resetting...\"),\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tright_answer: {\n\t\t\t\t\t\t\tentry: send((context) => ({\n\t\t                        type: \"SPEAK\",\n\t\t                        value: `Nice, that's right. You have ${context.points} ${( (context.points === 1)? 'point' : 'points')}.`\n\t\t                    })),\n\t\t\t\t\t\t\ton: { \n\t\t\t\t\t\t\t\tENDSPEECH: {\n\t\t\t\t\t\t\t\t\ttarget: \"generate_math_question\",\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttoo_long:{\n\t\t\t\t\t\t\tentry: say('Still there?'),\n\t\t\t\t\t\t\ton: { \n\t\t\t\t\t\t\t\tENDSPEECH: [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\ttarget: '#init',\n\t\t\t\t\t\t\t\t\t\tcond: (context) => context.maxspeech_counter > 2,\n\t\t\t\t\t\t\t\t\t\tactions: [\n\t\t\t\t\t\t\t\t\t\t\tassign((context=>{ return { maxspeech_counter: 0 } })),\n\t\t\t\t\t\t\t\t\t\t\tsay(\"As you haven't responded; resetting...\")\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\ttarget: 'ask',\n\t\t\t\t\t\t\t\t\t\tactions: assign(context=>{ return { maxspeech_counter: (context.maxspeech_counter || 0)+1 } })\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttry_again:{\n\t\t\t\t\t\t\tentry: say(\"Try again.\"),\n\t\t\t\t\t\t\ton: {\n\t\t\t\t\t\t\t\tENDSPEECH: 'ask'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\task: {\n\t\t\t                entry: [\n\t\t\t\t\t\t\t\tsend('LISTEN'),\n\t\t\t\t\t\t\t\tsend( 'MAXSPEECH', { delay: 7000, id: 'maxspeech_cancel' } )\n\t\t\t\t\t\t\t],\n\t\t\t            },\n\t\t\t        }\n\t\t\t\t},\n\t\t\t\triddles: {\n\t\t            id: \"riddles\",\n\t\t\t\t\tinitial: \"prompt\",\n\t\t\t\t\ton: {\n\t\t\t\t\t\tMAXSPEECH: '.too_long',\n\t\t\t\t\t\tRECOGNISED: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcond: context => riddles_store[context.riddle_id].answers.includes(context.recResult),\n\t\t\t\t\t\t\t\tactions: [\n\t\t\t\t\t\t\t\t\tassign(context=>{ return { wrong_riddle: 0 } })\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\ttarget: '.another_riddle',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcond: context => ((context.recResult == 'hint') || (context.recResult == 'hint please')),\n\t\t\t                    target: '.hint'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{ \n\t\t\t\t\t\t\t\ttarget: \".wrong_answer\" ,\n\t\t\t\t\t\t\t\tcond: (context) => !commands.includes(context.recResult)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\tstates: {\n\t\t\t\t\t\tprompt: {\n\t\t\t\t\t\t\tentry: say(\"Guess the answer to the riddle. Don't be afraid to ask for a hint. Here is your riddle: \"),\n\t\t\t\t\t\t\ton: {\n\t\t\t\t\t\t\t\tENDSPEECH: {\n\t\t\t\t\t\t\t\t\ttarget: \"ask_riddle\",\n\t\t\t\t\t\t\t\t\tactions: assign((context) => {\n\t\t\t\t\t\t\t\t\t\treturn { riddle_id: Math.floor(Math.random() * 7) }\n\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\thint: {\n\t\t\t\t\t\t\tentry: send((context) => ({\n\t\t                        type: \"SPEAK\",\n\t\t                        value: `The hint is:\\n ${riddles_store[context.riddle_id].hint} Now tell me...`\n\t\t                    })),\n\t\t                    on: { ENDSPEECH: \"ask\" }\n\t\t\t\t\t\t},\n\t\t\t\t\t\task_riddle: {\n\t\t\t\t\t\t\tentry: send((context) => ({\n\t\t                        type: \"SPEAK\",\n\t\t                        value: `${riddles_store[context.riddle_id].riddle}`\n\t\t                    })),\n\t\t                    on: { ENDSPEECH: \"ask\" }\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttoo_long:{\n\t\t\t\t\t\t\tentry: say('Hello?'),\n\t\t\t\t\t\t\ton: { \n\t\t\t\t\t\t\t\tENDSPEECH: [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\ttarget: '#init',\n\t\t\t\t\t\t\t\t\t\tactions: say(\"As you haven't responded, resetting...\"),\n\t\t\t\t\t\t\t\t\t\tcond: context=> context.maxspeech_counter >1,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\ttarget: 'ask',\n\t\t\t\t\t\t\t\t\t\tactions: [\n\t\t\t\t\t\t\t\t\t\t\tassign(context=>{ return { maxspeech_counter: (context.maxspeech_counter || 0) +1 } }),\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\twrong_answer: {\n\t\t\t\t\t\t\tentry: say(\"Sorry, that's wrong!\"),\n\t\t\t\t\t\t\ton: { ENDSPEECH:  [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\ttarget: 'try_again',\n\t\t\t\t\t\t\t\t\t\tactions: assign(context=>{ return { wrong_riddle: (context.wrong_riddle || 0) +1 } }),\n\t\t\t\t\t\t\t\t\t\tcond: context=> (context.wrong_riddle || 0) < 2,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\ttarget: '#init',\n\t\t\t\t\t\t\t\t\t\tactions: say(\"You've gotten it wrong a couple of times now! Resetting...\"),\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttry_again:{\n\t\t\t\t\t\t\tentry: say(\"Try again.\"),\n\t\t\t\t\t\t\ton: {\n\t\t\t\t\t\t\t\tENDSPEECH: 'ask'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tanother_riddle: {\n\t\t\t\t\t\t\tinitial: 'ask',\n\t\t\t\t\t\t\ton: {\n\t\t\t\t\t\t\t\tENDSPEECH: '.ask',\n\t\t\t\t\t\t\t\tRECOGNISED: [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\ttarget: 'prompt',\n\t\t\t\t\t\t\t\t\t\tactions: assign((context) => {\n\t\t\t\t\t\t\t\t\t\t\treturn { riddle_id: Math.floor(Math.random() * 7) }\n\t\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\t\tcond: context=> (context.recResult || \"invalid\") == \"yes\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\ttarget: '#init',\n\t\t\t\t\t\t\t\t\t\tactions: say(\"Ok, resetting.\"),\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tstates: {\n\t\t\t\t\t\t\t\task: {\n\t\t\t\t\t\t\t\t\tentry: say(\"Well done, that is correct! Would you like another riddle?\"),\n\t\t\t\t\t\t\t\t\ton: {\n\t\t\t\t\t\t\t\t\t\tENDSPEECH: 'listen'\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tlisten: {\n\t\t\t\t\t\t\t\t\tentry: [\n\t\t\t\t\t\t\t\t\t\tsend('LISTEN'),\n\t\t\t\t\t\t\t\t\t\tsend( 'MAXSPEECH', { delay: 15000, id: 'maxspeech_cancel' } )\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\task: {\n\t\t\t                entry: [\n\t\t\t\t\t\t\t\tsend('LISTEN'),\n\t\t\t\t\t\t\t\tsend( 'MAXSPEECH', { delay: 15000, id: 'maxspeech_cancel' } )\n\t\t\t\t\t\t\t],\n\t\t\t            },\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tchimp_test: {\n\t\t            id: \"chimp_test\",\n\t\t\t\t\tinitial: \"prompt\",\n\t\t\t\t\ton: {\n\t\t\t\t\t\tRECOGNISED: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttarget: '.correct_sequence',\n\t\t\t\t\t\t\t\tactions: assign((context)=>{\n\t\t\t\t\t\t\t\t\tcontext.sequence.push(Math.floor(Math.random() * 9))\n\t\t\t\t\t\t\t\t\treturn { one_try_given: false }\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\tcond: context => math_operator_store.parse_asr_numbers(context.recResult) === context.sequence.join('')\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{ \n\t\t\t\t\t\t\t\ttarget: \".wrong_sequence\" ,\n\t\t\t\t\t\t\t\tcond: (context) => !commands.includes(context.recResult)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t],\n\t\t\t\t\t\tMAXSPEECH: '.too_long'\n\t\t\t\t\t},\n\t\t\t\t\tstates: {\n\t\t\t\t\t\tprompt: {\n\t\t\t\t\t\t\tentry: say(\"This is the number memory test. I will say an ever increasing sequence of numbers which you need to repeat back to me. If you can't recall a sequence you lose. Try to get the highest score!\"),\n\t\t\t\t\t\t\ton: {\n\t\t\t\t\t\t\t\tENDSPEECH: {\n\t\t\t\t\t\t\t\t\ttarget: 'say_sequence',\n\t\t\t\t\t\t\t\t\tactions: assign( (context)=> {\n\t\t\t\t\t\t\t\t\t\treturn { sequence: [Math.floor(Math.random() * 9),] }\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tsay_sequence: {\n\t\t\t\t\t\t\tentry: send((context) => ({\n\t\t                        type: \"SPEAK\",\n\t\t                        value: `The ${( (context.sequence.length === 1)? 'first' : 'next')} number is ${context.sequence[context.sequence.length-1]}. Repeat back the sequence`\n\t\t                    })),\n\t\t                    on: { ENDSPEECH: 'ask' }\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcorrect_sequence: {\n\t\t\t\t\t\t\tentry: send((context) => ({\n\t\t                        type: \"SPEAK\",\n\t\t                        value: `Good job! You have ${context.sequence.length-1} ${( ( (context.sequence.length-1) === 1)? 'point' : 'points')}.`\n\t\t                    })),\n\t\t\t\t\t\t\ton: { ENDSPEECH: \"say_sequence\" }\n\t\t\t\t\t\t},\n\t\t\t\t\t\twrong_sequence: {\n\t\t\t\t\t\t\tentry: say('That is incorrect. '),\n\t\t\t\t\t\t\ton: { \n\t\t\t\t\t\t\t\tENDSPEECH: [ \n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\ttarget: 'say_sequence',\n\t\t\t\t\t\t\t\t\t\tcond: context => {return !(context.one_try_given || false)},\n\t\t\t\t\t\t\t\t\t\tactions: [\n\t\t\t\t\t\t\t\t\t\t\tassign((context)=>{return { one_try_given: true } }),\n\t\t\t\t\t\t\t\t\t\t\tsay(\"I will give you one more chance to get that right or you lose.\")\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tactions: send((context) => ({\n\t\t\t\t\t                        type: \"SPEAK\",\n\t\t\t\t\t                        value: `You ended with ${context.sequence.length-1} points`\n\t\t\t\t\t                    })),\n\t\t\t\t\t\t\t\t\t\ttarget: '#init',\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\task: {\n\t\t\t                entry: [\n\t\t\t\t\t\t\t\tsend('LISTEN'),\n\t\t\t\t\t\t\t\tsend( 'MAXSPEECH', { delay: context=>(4000+1000*context.sequence.length), id: 'maxspeech_cancel' } ),\n\t\t\t\t\t\t\t],\n\t\t\t            },\n\t\t\t\t\t\ttoo_long:{\n\t\t\t\t\t\t\tentry: say('Hello?'),\n\t\t\t\t\t\t\ton: { \n\t\t\t\t\t\t\t\tENDSPEECH: [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\ttarget: '#init',\n\t\t\t\t\t\t\t\t\t\tactions: say(\"As you haven't responded, resetting...\"),\n\t\t\t\t\t\t\t\t\t\tcond: context=> context.maxspeech_counter >1,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\ttarget: 'ask',\n\t\t\t\t\t\t\t\t\t\tactions: [\n\t\t\t\t\t\t\t\t\t\t\tassign(context=>{ return { maxspeech_counter: (context.maxspeech_counter || 0) +1 } }),\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tplease_repeat: {\n\t\t            id: \"please_repeat\",\n\t\t\t\t\tinitial: \"prompt\",\n\t\t\t\t\tstates: {\n\t\t\t\t\t\tprompt: {\n\t\t\t\t\t\t\tentry: say(\"Sorry, I didn't get that. \")\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\ton: { ENDSPEECH: \"#init\" }\n\t\t\t\t},\n\t\t    },\n\t\t},\n\t\tmaxspeech: {\n\t\t\tinitial: 'apologies',\n\t\t\ton: {\n\t\t\t\tENDSPEECH: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttarget: '#init.main.hist',\n\t\t\t\t\t\tcond: (function() { return maxspeech_count_local < 2 } ),\n\t\t\t\t\t\tactions: [\n\t\t\t\t\t\t\t(function() { maxspeech_count_local ++ } ),\n\t\t\t\t\t\t\tassign(context=>{context})\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttarget: '#init',\n\t\t\t\t\t\tactions: [\n\t\t\t\t\t\t\t(function() { maxspeech_count_local = 0 } ),\n\t\t\t\t\t\t\tsay(\"and you haven't responded in a while. Resetting.\"),\n\t\t\t\t\t\t\tassign(context=>{context})\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t]\n\t\t\t},\n\t\t\tstates: {\n\t\t\t\tapologies: {\n\t\t\t\t\tentry: say(\"Sorry, I couldn't hear you. \")\n\t\t\t\t},\n\t\t\t}\n\t\t},\n\t\tstop: {\n\t\t\tentry: say(\"Ok, program stopped\"),\n\t\t\ton: {\n\t\t\t\tENDSPEECH: {\n\t\t\t\t\ttarget: '#init'\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\thelp: {\n\t\t\tentry: say(\"Here is a help message, but you made the game, so you shouldn't need one. Going back to the game...\"),\n\t\t\ton: {\n\t\t\t\tENDSPEECH: {\n\t\t\t\t\ttarget: 'main.hist'\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n})\n","import \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Machine, assign, actions, State } from \"xstate\";\nconst { send, cancel } = actions;\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { inspect } from \"@xstate/inspect\";\nimport { dmMachine } from \"./final_project\"; \nimport potato from './potatis.jpeg';\n\ninspect({\n    url: \"https://statecharts.io/inspect\",\n    iframe: false\n});\n\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\n\n\nconst machine = Machine<SDSContext, any, SDSEvent>({\n    id: 'root',\n    type: 'parallel',\n    states: {\n        dm: {\n            ...dmMachine\n        },\n        asrtts: {\n            initial: 'idle',\n            states: {\n                idle: {\n                    on: {\n                        LISTEN: 'recognising',\n                        SPEAK: {\n                            target: 'speaking',\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\n                        }\n                    }\n                },\n                recognising: {\n                    initial: 'progress',\n                    entry: 'recStart',\n                    exit: 'recStop',\n                    on: {\n                        ASRRESULT: {\n                            actions: ['recLogResult',\n                                assign((_context, event) => { return { recResult: event.value.toLowerCase() } })],\n                            target: '.match'\n                        },\n                        RECOGNISED: {\n\t\t\t\t\t\t\tactions: [\n\t\t\t\t\t\t\t\tcancel('maxspeech_cancel'),\n\t\t\t\t\t\t\t\t//assign((_context, event) => { return { maxspeech_count: 0 } })\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\ttarget: 'idle'\n\t\t\t\t\t\t},\n                        MAXSPEECH: [\n\t                        {\n\t\t\t\t\t\t\t\ttarget:'idle',\n\t                        },\n\t                    ]\n                    },\n                    states: {\n                        progress: {\n                        },\n                        match: {\n                            entry: send('RECOGNISED'),\n                        },\n                    }\n                },\n                speaking: {\n                    entry: 'ttsStart',\n                    on: {\n                        ENDSPEECH: 'idle',\n                    }\n                }\n            }\n        }\n    },\n},\n    {\n        actions: {\n            recLogResult: (context: SDSContext) => {\n                /* context.recResult = event.recResult; */\n                console.log('<< ASR: ' + context.recResult);\n            },\n            test: () => {\n                console.log('test')\n            },\n            logIntent: (context: SDSContext) => {\n                /* context.nluData = event.data */\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\n            }\n        },\n    });\n\n\n\ninterface Props extends React.HTMLAttributes<HTMLElement> {\n    state: State<SDSContext, any, any, any>;\n}\nconst ReactiveButton = (props: Props): JSX.Element => {\n    switch (true) {\n        case props.state.matches({ asrtts: 'recognising' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"glowing 20s linear\" }} {...props}>\n                    Listening...\n                </button>\n            );\n        case props.state.matches({ asrtts: 'speaking' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"bordering 1s infinite\" }} {...props}>\n                    Speaking...\n                </button>\n            );\n        default:\n            return (\n                <button type=\"button\" className=\"glow-on-hover\" {...props}>\n                    Click to start\n                </button >\n            );\n    }\n}\n\n/*\nvar SpeechGrammarList = SpeechGrammarList || webkitSpeechGrammarList\nvar letters = ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'];\nvar grammar = '#JSGF V1.0; grammar letters; public <letter> = ' + letters.join(' | ') + ' ;'\nvar speechRecognitionList = new SpeechGrammarList();\nspeechRecognitionList.addFromString(grammar, 1);\n*/\n\n\nfunction App() {\n    const { speak, cancel, speaking, voices } = useSpeechSynthesis({\n        onEnd: () => {\n            send('ENDSPEECH');\n        },\n    });\n    const { listen, listening, stop } = useSpeechRecognition({\n        onResult: (result: any) => {\n            send({ type: \"ASRRESULT\", value: result });\n            console.log(result)\n        },\n    });\n    const [current, send, service] = useMachine(machine, {\n        devTools: true,\n        actions: {\n            recStart: asEffect(() => {\n                console.log('LETS GOOOOOO');\n                listen({\n\t\t\t\t\tlang: 'en-AU',\n                    interimResults: false,\n                    continuous: true,\n                    //grammars: speechRecognitionList,\n                });\n            }),\n            recStop: asEffect(() => {\n                console.log('Recognition stopped.');\n                stop()\n            }),\n            changeColour: asEffect((context) => {\n                console.log('Repainting...');\n                document.body.style.background = context.recResult;\n            }),\n            ttsStart: asEffect((context, effect) => {\n                console.log('Speaking...');\n                speak({ \n\t\t\t\t\ttext: context.ttsAgenda,\n\t\t\t\t\tvoice: voices[0]\n\t\t\t\t})\n            }),\n            ttsCancel: asEffect((context, effect) => {\n                console.log('TTS STOP...');\n                cancel()\n            })\n            /* speak: asEffect((context) => {\n\t     * console.log('Speaking...');\n             *     speak({text: context.ttsAgenda })\n             * } */\n        }\n    });\n\n\n    return (\n        <div className=\"App\">\n\t\t\t<h1 className=\"scoring\">\n\t\t\t{current.context.ttsAgenda || 'Welcome'}\n\t\t\t</h1>\n            <ReactiveButton state={current} onClick={() => send('CLICK')} />\n        </div>\n    )\n};\n\n\n\t\t\t//<img src={potato} alt=\"potato\" height={300} width={200} />\n\n\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n    <App />,\n    rootElement);\n"],"sourceRoot":""}