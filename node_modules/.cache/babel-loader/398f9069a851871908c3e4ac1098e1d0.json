{"ast":null,"code":"\"use strict\"; // Copyright 2013 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar _regeneratorRuntime = require(\"/Users/jacobcoles/Desktop/LT2216/final_project/final_project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/jacobcoles/Desktop/LT2216/final_project/final_project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Compute = void 0;\n\nconst arrify = require(\"arrify\");\n\nconst gcpMetadata = require(\"gcp-metadata\");\n\nconst oauth2client_1 = require(\"./oauth2client\");\n\nclass Compute extends oauth2client_1.OAuth2Client {\n  /**\n   * Google Compute Engine service account credentials.\n   *\n   * Retrieve access token from the metadata server.\n   * See: https://developers.google.com/compute/docs/authentication\n   */\n  constructor(options = {}) {\n    super(options); // Start with an expired refresh token, which will automatically be\n    // refreshed before the first API call is made.\n\n    this.credentials = {\n      expiry_date: 1,\n      refresh_token: 'compute-placeholder'\n    };\n    this.serviceAccountEmail = options.serviceAccountEmail || 'default';\n    this.scopes = arrify(options.scopes);\n  }\n  /**\n   * Refreshes the access token.\n   * @param refreshToken Unused parameter\n   */\n\n\n  refreshTokenNoCache( // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  refreshToken) {\n    var _this = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var tokenPath, data, instanceOptions, tokens;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            tokenPath = \"service-accounts/\".concat(_this.serviceAccountEmail, \"/token\");\n            _context.prev = 1;\n            instanceOptions = {\n              property: tokenPath\n            };\n\n            if (_this.scopes.length > 0) {\n              instanceOptions.params = {\n                scopes: _this.scopes.join(',')\n              };\n            }\n\n            _context.next = 6;\n            return gcpMetadata.instance(instanceOptions);\n\n          case 6:\n            data = _context.sent;\n            _context.next = 14;\n            break;\n\n          case 9:\n            _context.prev = 9;\n            _context.t0 = _context[\"catch\"](1);\n            _context.t0.message = \"Could not refresh access token: \".concat(_context.t0.message);\n\n            _this.wrapError(_context.t0);\n\n            throw _context.t0;\n\n          case 14:\n            tokens = data;\n\n            if (data && data.expires_in) {\n              tokens.expiry_date = new Date().getTime() + data.expires_in * 1000;\n              delete tokens.expires_in;\n            }\n\n            _this.emit('tokens', tokens);\n\n            return _context.abrupt(\"return\", {\n              tokens,\n              res: null\n            });\n\n          case 18:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee, null, [[1, 9]]);\n    }))();\n  }\n  /**\n   * Fetches an ID token.\n   * @param targetAudience the audience for the fetched ID token.\n   */\n\n\n  fetchIdToken(targetAudience) {\n    var _this2 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var idTokenPath, idToken, instanceOptions;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            idTokenPath = \"service-accounts/\".concat(_this2.serviceAccountEmail, \"/identity\") + \"?format=full&audience=\".concat(targetAudience);\n            _context2.prev = 1;\n            instanceOptions = {\n              property: idTokenPath\n            };\n            _context2.next = 5;\n            return gcpMetadata.instance(instanceOptions);\n\n          case 5:\n            idToken = _context2.sent;\n            _context2.next = 12;\n            break;\n\n          case 8:\n            _context2.prev = 8;\n            _context2.t0 = _context2[\"catch\"](1);\n            _context2.t0.message = \"Could not fetch ID token: \".concat(_context2.t0.message);\n            throw _context2.t0;\n\n          case 12:\n            return _context2.abrupt(\"return\", idToken);\n\n          case 13:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2, null, [[1, 8]]);\n    }))();\n  }\n\n  wrapError(e) {\n    const res = e.response;\n\n    if (res && res.status) {\n      e.code = res.status.toString();\n\n      if (res.status === 403) {\n        e.message = 'A Forbidden error was returned while attempting to retrieve an access ' + 'token for the Compute Engine built-in service account. This may be because the Compute ' + 'Engine instance does not have the correct permission scopes specified: ' + e.message;\n      } else if (res.status === 404) {\n        e.message = 'A Not Found error was returned while attempting to retrieve an access' + 'token for the Compute Engine built-in service account. This may be because the Compute ' + 'Engine instance does not have any permission scopes specified: ' + e.message;\n      }\n    }\n  }\n\n}\n\nexports.Compute = Compute;","map":{"version":3,"sources":["/Users/jacobcoles/Desktop/LT2216/final_project/final_project/node_modules/google-auth-library/build/src/auth/computeclient.js"],"names":["Object","defineProperty","exports","value","Compute","arrify","require","gcpMetadata","oauth2client_1","OAuth2Client","constructor","options","credentials","expiry_date","refresh_token","serviceAccountEmail","scopes","refreshTokenNoCache","refreshToken","tokenPath","instanceOptions","property","length","params","join","instance","data","message","wrapError","tokens","expires_in","Date","getTime","emit","res","fetchIdToken","targetAudience","idTokenPath","idToken","e","response","status","code","toString"],"mappings":"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","sourcesContent":["\"use strict\";\n// Copyright 2013 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Compute = void 0;\nconst arrify = require(\"arrify\");\nconst gcpMetadata = require(\"gcp-metadata\");\nconst oauth2client_1 = require(\"./oauth2client\");\nclass Compute extends oauth2client_1.OAuth2Client {\n    /**\n     * Google Compute Engine service account credentials.\n     *\n     * Retrieve access token from the metadata server.\n     * See: https://developers.google.com/compute/docs/authentication\n     */\n    constructor(options = {}) {\n        super(options);\n        // Start with an expired refresh token, which will automatically be\n        // refreshed before the first API call is made.\n        this.credentials = { expiry_date: 1, refresh_token: 'compute-placeholder' };\n        this.serviceAccountEmail = options.serviceAccountEmail || 'default';\n        this.scopes = arrify(options.scopes);\n    }\n    /**\n     * Refreshes the access token.\n     * @param refreshToken Unused parameter\n     */\n    async refreshTokenNoCache(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    refreshToken) {\n        const tokenPath = `service-accounts/${this.serviceAccountEmail}/token`;\n        let data;\n        try {\n            const instanceOptions = {\n                property: tokenPath,\n            };\n            if (this.scopes.length > 0) {\n                instanceOptions.params = {\n                    scopes: this.scopes.join(','),\n                };\n            }\n            data = await gcpMetadata.instance(instanceOptions);\n        }\n        catch (e) {\n            e.message = `Could not refresh access token: ${e.message}`;\n            this.wrapError(e);\n            throw e;\n        }\n        const tokens = data;\n        if (data && data.expires_in) {\n            tokens.expiry_date = new Date().getTime() + data.expires_in * 1000;\n            delete tokens.expires_in;\n        }\n        this.emit('tokens', tokens);\n        return { tokens, res: null };\n    }\n    /**\n     * Fetches an ID token.\n     * @param targetAudience the audience for the fetched ID token.\n     */\n    async fetchIdToken(targetAudience) {\n        const idTokenPath = `service-accounts/${this.serviceAccountEmail}/identity` +\n            `?format=full&audience=${targetAudience}`;\n        let idToken;\n        try {\n            const instanceOptions = {\n                property: idTokenPath,\n            };\n            idToken = await gcpMetadata.instance(instanceOptions);\n        }\n        catch (e) {\n            e.message = `Could not fetch ID token: ${e.message}`;\n            throw e;\n        }\n        return idToken;\n    }\n    wrapError(e) {\n        const res = e.response;\n        if (res && res.status) {\n            e.code = res.status.toString();\n            if (res.status === 403) {\n                e.message =\n                    'A Forbidden error was returned while attempting to retrieve an access ' +\n                        'token for the Compute Engine built-in service account. This may be because the Compute ' +\n                        'Engine instance does not have the correct permission scopes specified: ' +\n                        e.message;\n            }\n            else if (res.status === 404) {\n                e.message =\n                    'A Not Found error was returned while attempting to retrieve an access' +\n                        'token for the Compute Engine built-in service account. This may be because the Compute ' +\n                        'Engine instance does not have any permission scopes specified: ' +\n                        e.message;\n            }\n        }\n    }\n}\nexports.Compute = Compute;\n//# sourceMappingURL=computeclient.js.map"]},"metadata":{},"sourceType":"script"}