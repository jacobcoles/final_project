{"ast":null,"code":"import _objectSpread from \"/Users/jacobcoles/Desktop/LT2216/Lab2and4/react-xstate-colourchanger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { send, assign } from \"xstate\"; // SRGS parser and example (logs the results to console on page load)\n\nimport { loadGrammar } from './runparser';\nimport { parse } from './chartparser';\nimport { grammar } from './grammars/quotesGrammar'; //'./grammars/pizzaGrammar'\n\nconst gram = loadGrammar(grammar);\nconst input = \"please turn on the lights\";\nconst prs = parse(input.split(/\\s+/), gram);\nconst result = prs.resultsForRule(gram.$root)[0];\nconsole.log(result);\nconst sayColour = send(context => ({\n  type: \"SPEAK\",\n  value: \"Repainting to \".concat(context.recResult)\n}));\n\nfunction say(text) {\n  return send(_context => ({\n    type: \"SPEAK\",\n    value: text\n  }));\n}\n\nfunction parse_text(input_text) {\n  const gram = loadGrammar(grammar);\n  const prs = parse(input_text.toLowerCase().split(/\\s+/), gram);\n  const result = prs.resultsForRule(gram.$root)[0];\n  return result;\n}\n\nfunction promptAndAsk(prompt) {\n  return {\n    initial: 'prompt',\n    states: {\n      prompt: {\n        entry: say(prompt),\n        on: {\n          ENDSPEECH: 'ask'\n        }\n      },\n      ask: {\n        entry: send('LISTEN')\n      }\n    }\n  };\n}\n\nexport const dmMachine = {\n  initial: 'init',\n  id: 'init',\n  states: {\n    init: {\n      on: {\n        CLICK: 'begin'\n      }\n    },\n    begin: {\n      id: 'begin',\n      initial: 'welcome',\n      on: {\n        CLICK: 'init'\n      },\n      states: {\n        welcome: _objectSpread({\n          id: 'welcome',\n          on: {\n            RECOGNISED: [{\n              target: 'stop',\n              cond: context => context.recResult === 'stop'\n            }, {\n              target: '.validateResp',\n              actions: assign(context => {\n                let queryResp = parse_text(context.recResult);\n                return {\n                  queryResp\n                };\n              })\n            }]\n          },\n          states: {\n            validateResp: {\n              entry: say('idk im tired')\n            }\n          }\n        }, promptAndAsk(\"Ask me a query\")),\n        stop: {\n          entry: say(\"Ok\"),\n          always: '#init'\n        },\n        invalidQuery: {\n          entry: say(\"Sorry mate, you wrong bitch\"),\n          always: '#init.begin.welcome'\n        },\n        repaint: {\n          initial: 'prompt',\n          states: {\n            prompt: {\n              entry: sayColour,\n              on: {\n                ENDSPEECH: 'repaint'\n              }\n            },\n            repaint: {\n              entry: 'changeColour',\n              always: '#init.begin.welcome'\n            }\n          }\n        }\n      }\n    }\n  }\n};","map":{"version":3,"sources":["/Users/jacobcoles/Desktop/LT2216/Lab2and4/react-xstate-colourchanger/src/dmSmartHome.ts"],"names":["send","assign","loadGrammar","parse","grammar","gram","input","prs","split","result","resultsForRule","$root","console","log","sayColour","context","type","value","recResult","say","text","_context","parse_text","input_text","toLowerCase","promptAndAsk","prompt","initial","states","entry","on","ENDSPEECH","ask","dmMachine","id","init","CLICK","begin","welcome","RECOGNISED","target","cond","actions","queryResp","validateResp","stop","always","invalidQuery","repaint"],"mappings":"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","sourcesContent":["import { MachineConfig, send, Action, assign } from \"xstate\";\n\n// SRGS parser and example (logs the results to console on page load)\nimport { loadGrammar } from './runparser'\nimport { parse } from './chartparser'\nimport { grammar } from './grammars/quotesGrammar' //'./grammars/pizzaGrammar'\n\nconst gram = loadGrammar(grammar)\nconst input = \"please turn on the lights\"\nconst prs = parse(input.split(/\\s+/), gram)\nconst result = prs.resultsForRule(gram.$root)[0]\n\nconsole.log(result)\n\nconst sayColour: Action<SDSContext, SDSEvent> = send((context: SDSContext) => ({\n    type: \"SPEAK\", value: `Repainting to ${context.recResult}`\n}))\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction parse_text(input_text: string): Action<SDSContext, SDSEvent> {\n\tconst gram = loadGrammar(grammar)\n\tconst prs = parse(input_text.toLowerCase().split(/\\s+/), gram)\n\tconst result = prs.resultsForRule(gram.$root)[0]\n\treturn result\n}\n\nfunction promptAndAsk(prompt: string): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n        initial: 'prompt',\n        states: {\n            prompt: {\n                entry: say(prompt),\n                on: { ENDSPEECH: 'ask' }\n            },\n            ask: {\n                entry: send('LISTEN'),\n            },\n        }\n    })\n}\n\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'init',\n\tid: 'init',\n    states: {\n        init: {\n            on: {\n                CLICK: 'begin'\n            }\n        },\n        begin: {\n\t\t\tid: 'begin',\n\t\t\tinitial: 'welcome',\n\t\t\ton: {\n                CLICK: 'init'\n            },\n\t\t\tstates: {\n\t\t        welcome: {\n\t\t\t\t\tid: 'welcome',\n\t\t            on: {\n\t\t                RECOGNISED: [\n\t\t                    {\ttarget: 'stop', cond: (context) => context.recResult === 'stop' },\n\t\t                    { \n\t\t\t\t\t\t\t\ttarget: '.validateResp',\n\t\t\t\t\t\t\t\tactions: assign((context) => {\n\t\t\t\t\t\t\t\t\tlet queryResp = parse_text(context.recResult)\n\t\t\t\t\t\t\t\t\treturn { queryResp }\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t},\n\t\t                ]\n\t\t            },\n\t\t            states: {\n\t\t\t\t\t\tvalidateResp: {\n\t\t\t\t\t\t\tentry: say('idk im tired')\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t            ...promptAndAsk(\"Ask me a query\")\n\t\t        },\n\t\t        stop: {\n\t\t            entry: say(\"Ok\"),\n\t\t            always: '#init'\n\t\t        },\n\t\t        invalidQuery: {\n\t\t\t\t\tentry: say(\"Sorry mate, you wrong bitch\"),\n\t\t\t\t\talways: '#init.begin.welcome'\n\t\t\t\t},\n\t\t        repaint: {\n\t\t            initial: 'prompt',\n\t\t            states: {\n\t\t                prompt: {\n\t\t                    entry: sayColour,\n\t\t                    on: { ENDSPEECH: 'repaint' }\n\t\t                },\n\t\t                repaint: {\n\t\t                    entry: 'changeColour',\n\t\t                    always: '#init.begin.welcome'\n\t\t                }\n\t\t            }\n\t\t        }\n\t\t    }\n\t    }\n    }\n})\n"]},"metadata":{},"sourceType":"module"}