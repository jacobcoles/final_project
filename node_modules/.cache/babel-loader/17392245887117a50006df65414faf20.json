{"ast":null,"code":"import _slicedToArray from \"/Users/jacobcoles/Desktop/LT2216/final_project/final_project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"/Users/jacobcoles/Desktop/LT2216/final_project/final_project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n\nvar _jsxFileName = \"/Users/jacobcoles/Desktop/LT2216/final_project/final_project/src/index.tsx\",\n    _s = $RefreshSig$();\n\nimport \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Machine, assign, actions } from \"xstate\";\nconst send = actions.send,\n      cancel = actions.cancel;\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { inspect } from \"@xstate/inspect\";\nimport { dmMachine } from \"./final_project\";\ninspect({\n  url: \"https://statecharts.io/inspect\",\n  iframe: false\n});\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst machine = Machine({\n  id: 'root',\n  type: 'parallel',\n  states: {\n    dm: _objectSpread({}, dmMachine),\n    asrtts: {\n      initial: 'idle',\n      states: {\n        idle: {\n          on: {\n            LISTEN: 'recognising',\n            SPEAK: {\n              target: 'speaking',\n              actions: assign((_context, event) => {\n                return {\n                  ttsAgenda: event.value\n                };\n              })\n            }\n          }\n        },\n        recognising: {\n          initial: 'progress',\n          entry: 'recStart',\n          exit: 'recStop',\n          on: {\n            ASRRESULT: {\n              actions: ['recLogResult', assign((_context, event) => {\n                return {\n                  recResult: event.value.toLowerCase()\n                };\n              })],\n              target: '.match'\n            },\n            RECOGNISED: {\n              actions: [cancel('maxspeech_cancel') //assign((_context, event) => { return { maxspeech_count: 0 } })\n              ],\n              target: 'idle'\n            },\n            MAXSPEECH: [//{\n            //\tcond: context=> context.maxspeech_count < 2,\n            //\ttarget:'idle',\n            //\tactions: assign((_context, event) => { return { maxspeech_count: _context.maxspeech_count +1 } }),\n            //},\n            {\n              target: 'idle' //actions: assign((_context, event) => { return { maxspeech_count: 0 } }),\n\n            }]\n          },\n          states: {\n            progress: {},\n            match: {\n              entry: send('RECOGNISED')\n            }\n          }\n        },\n        speaking: {\n          entry: 'ttsStart',\n          on: {\n            ENDSPEECH: 'idle'\n          }\n        }\n      }\n    }\n  }\n}, {\n  actions: {\n    recLogResult: context => {\n      /* context.recResult = event.recResult; */\n      console.log('<< ASR: ' + context.recResult);\n    },\n    test: () => {\n      console.log('test');\n    },\n    logIntent: context => {\n      /* context.nluData = event.data */\n      console.log('<< NLU intent: ' + context.nluData.intent.name);\n    }\n  }\n});\n\nconst ReactiveButton = props => {\n  switch (true) {\n    case props.state.matches({\n      asrtts: 'recognising'\n    }):\n      return /*#__PURE__*/_jsxDEV(\"button\", _objectSpread(_objectSpread({\n        type: \"button\",\n        className: \"glow-on-hover\",\n        style: {\n          animation: \"glowing 20s linear\"\n        }\n      }, props), {}, {\n        children: \"Listening...\"\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }, this);\n\n    case props.state.matches({\n      asrtts: 'speaking'\n    }):\n      return /*#__PURE__*/_jsxDEV(\"button\", _objectSpread(_objectSpread({\n        type: \"button\",\n        className: \"glow-on-hover\",\n        style: {\n          animation: \"bordering 1s infinite\"\n        }\n      }, props), {}, {\n        children: \"Speaking...\"\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this);\n\n    default:\n      return /*#__PURE__*/_jsxDEV(\"button\", _objectSpread(_objectSpread({\n        type: \"button\",\n        className: \"glow-on-hover\"\n      }, props), {}, {\n        children: \"Click to start\"\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }, this);\n  }\n};\n\n_c = ReactiveButton;\nvar letters = ['A', 'B'];\nvar grammar = '#JSGF V1.0; grammar letters; public <color> = ' + colors.join(' | ') + ' ;';\nvar recognition = new SpeechRecognition();\nvar speechRecognitionList = new SpeechGrammarList();\nspeechRecognitionList.addFromString(grammar, 1);\n\nfunction App() {\n  _s();\n\n  const _useSpeechSynthesis = useSpeechSynthesis({\n    onEnd: () => {\n      send('ENDSPEECH');\n    }\n  }),\n        speak = _useSpeechSynthesis.speak,\n        cancel = _useSpeechSynthesis.cancel,\n        speaking = _useSpeechSynthesis.speaking,\n        voices = _useSpeechSynthesis.voices;\n\n  const _useSpeechRecognition = useSpeechRecognition({\n    onResult: result => {\n      send({\n        type: \"ASRRESULT\",\n        value: result\n      });\n    }\n  }),\n        listen = _useSpeechRecognition.listen,\n        listening = _useSpeechRecognition.listening,\n        stop = _useSpeechRecognition.stop;\n\n  const _useMachine = useMachine(machine, {\n    devTools: true,\n    actions: {\n      recStart: asEffect(() => {\n        console.log('LETS GOOOOOO');\n        listen({\n          lang: 'en-AU',\n          interimResults: false,\n          continuous: true,\n          grammars: speechRecognitionList\n        });\n      }),\n      recStop: asEffect(() => {\n        console.log('Recognition stopped.');\n        stop();\n      }),\n      changeColour: asEffect(context => {\n        console.log('Repainting...');\n        document.body.style.background = context.recResult;\n      }),\n      ttsStart: asEffect((context, effect) => {\n        console.log('Speaking...');\n        speak({\n          text: context.ttsAgenda,\n          voice: voices[0]\n        });\n      }),\n      ttsCancel: asEffect((context, effect) => {\n        console.log('TTS STOP...');\n        cancel();\n      })\n      /* speak: asEffect((context) => {\n      * console.log('Speaking...');\n       *     speak({text: context.ttsAgenda })\n       * } */\n\n    }\n  }),\n        _useMachine2 = _slicedToArray(_useMachine, 3),\n        current = _useMachine2[0],\n        send = _useMachine2[1],\n        service = _useMachine2[2];\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(ReactiveButton, {\n      state: current,\n      onClick: () => send('CLICK')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 189,\n    columnNumber: 9\n  }, this);\n}\n\n_s(App, \"89sEhUJEBvjb3/lj6V2w6e7mGZ0=\", false, function () {\n  return [useSpeechSynthesis, useSpeechRecognition, useMachine];\n});\n\n_c2 = App;\n; //RASA\n\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://rasajacobcoles.herokuapp.com/model/parse';\n\nconst nluRequest = text => fetch(new Request(proxyurl + rasaurl, {\n  method: 'POST',\n  headers: {\n    'Origin': 'http://maraev.me'\n  },\n  // only required with proxy\n  body: \"{\\\"text\\\": \\\"\".concat(text, \"\\\"}\")\n})).then(data => data.json());\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 211,\n  columnNumber: 5\n}, this), rootElement);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ReactiveButton\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["/Users/jacobcoles/Desktop/LT2216/final_project/final_project/src/index.tsx"],"names":["React","ReactDOM","Machine","assign","actions","send","cancel","useMachine","asEffect","inspect","dmMachine","url","iframe","useSpeechSynthesis","useSpeechRecognition","machine","id","type","states","dm","asrtts","initial","idle","on","LISTEN","SPEAK","target","_context","event","ttsAgenda","value","recognising","entry","exit","ASRRESULT","recResult","toLowerCase","RECOGNISED","MAXSPEECH","progress","match","speaking","ENDSPEECH","recLogResult","context","console","log","test","logIntent","nluData","intent","name","ReactiveButton","props","state","matches","animation","letters","grammar","colors","join","recognition","SpeechRecognition","speechRecognitionList","SpeechGrammarList","addFromString","App","onEnd","speak","voices","onResult","result","listen","listening","stop","devTools","recStart","lang","interimResults","continuous","grammars","recStop","changeColour","document","body","style","background","ttsStart","effect","text","voice","ttsCancel","current","service","proxyurl","rasaurl","nluRequest","fetch","Request","method","headers","then","data","json","rootElement","getElementById","render"],"mappings":"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","sourcesContent":["import \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Machine, assign, actions, State } from \"xstate\";\nconst { send, cancel } = actions;\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { inspect } from \"@xstate/inspect\";\nimport { dmMachine } from \"./final_project\"; \n\n\ninspect({\n    url: \"https://statecharts.io/inspect\",\n    iframe: false\n});\n\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\n\n\nconst machine = Machine<SDSContext, any, SDSEvent>({\n    id: 'root',\n    type: 'parallel',\n    states: {\n        dm: {\n            ...dmMachine\n        },\n        asrtts: {\n            initial: 'idle',\n            states: {\n                idle: {\n                    on: {\n                        LISTEN: 'recognising',\n                        SPEAK: {\n                            target: 'speaking',\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\n                        }\n                    }\n                },\n                recognising: {\n                    initial: 'progress',\n                    entry: 'recStart',\n                    exit: 'recStop',\n                    on: {\n                        ASRRESULT: {\n                            actions: ['recLogResult',\n                                assign((_context, event) => { return { recResult: event.value.toLowerCase() } })],\n                            target: '.match'\n                        },\n                        RECOGNISED: {\n\t\t\t\t\t\t\tactions: [\n\t\t\t\t\t\t\t\tcancel('maxspeech_cancel'),\n\t\t\t\t\t\t\t\t//assign((_context, event) => { return { maxspeech_count: 0 } })\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\ttarget: 'idle'\n\t\t\t\t\t\t},\n                        MAXSPEECH: [\n\t                        //{\n\t\t\t\t\t\t\t//\tcond: context=> context.maxspeech_count < 2,\n\t\t\t\t\t\t\t//\ttarget:'idle',\n\t\t\t\t\t\t\t//\tactions: assign((_context, event) => { return { maxspeech_count: _context.maxspeech_count +1 } }),\n\t                        //},\n\t                        {\n\t\t\t\t\t\t\t\ttarget:'idle',\n\t\t\t\t\t\t\t\t//actions: assign((_context, event) => { return { maxspeech_count: 0 } }),\n\t                        },\n\t                    ]\n                    },\n                    states: {\n                        progress: {\n                        },\n                        match: {\n                            entry: send('RECOGNISED'),\n                        },\n                    }\n                },\n                speaking: {\n                    entry: 'ttsStart',\n                    on: {\n                        ENDSPEECH: 'idle',\n                    }\n                }\n            }\n        }\n    },\n},\n    {\n        actions: {\n            recLogResult: (context: SDSContext) => {\n                /* context.recResult = event.recResult; */\n                console.log('<< ASR: ' + context.recResult);\n            },\n            test: () => {\n                console.log('test')\n            },\n            logIntent: (context: SDSContext) => {\n                /* context.nluData = event.data */\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\n            }\n        },\n    });\n\n\n\ninterface Props extends React.HTMLAttributes<HTMLElement> {\n    state: State<SDSContext, any, any, any>;\n}\nconst ReactiveButton = (props: Props): JSX.Element => {\n    switch (true) {\n        case props.state.matches({ asrtts: 'recognising' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"glowing 20s linear\" }} {...props}>\n                    Listening...\n                </button>\n            );\n        case props.state.matches({ asrtts: 'speaking' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"bordering 1s infinite\" }} {...props}>\n                    Speaking...\n                </button>\n            );\n        default:\n            return (\n                <button type=\"button\" className=\"glow-on-hover\" {...props}>\n                    Click to start\n                </button >\n            );\n    }\n}\n\n\nvar letters = ['A','B'];\nvar grammar = '#JSGF V1.0; grammar letters; public <color> = ' + colors.join(' | ') + ' ;'\nvar recognition = new SpeechRecognition();\nvar speechRecognitionList = new SpeechGrammarList();\nspeechRecognitionList.addFromString(grammar, 1);\n\nfunction App() {\n    const { speak, cancel, speaking, voices } = useSpeechSynthesis({\n        onEnd: () => {\n            send('ENDSPEECH');\n        },\n    });\n    const { listen, listening, stop } = useSpeechRecognition({\n        onResult: (result: any) => {\n            send({ type: \"ASRRESULT\", value: result });\n        },\n    });\n    const [current, send, service] = useMachine(machine, {\n        devTools: true,\n        actions: {\n            recStart: asEffect(() => {\n                console.log('LETS GOOOOOO');\n                listen({\n\t\t\t\t\tlang: 'en-AU',\n                    interimResults: false,\n                    continuous: true,\n                    grammars: speechRecognitionList\n                });\n            }),\n            recStop: asEffect(() => {\n                console.log('Recognition stopped.');\n                stop()\n            }),\n            changeColour: asEffect((context) => {\n                console.log('Repainting...');\n                document.body.style.background = context.recResult;\n            }),\n            ttsStart: asEffect((context, effect) => {\n                console.log('Speaking...');\n                speak({ \n\t\t\t\t\ttext: context.ttsAgenda,\n\t\t\t\t\tvoice: voices[0]\n\t\t\t\t})\n            }),\n            ttsCancel: asEffect((context, effect) => {\n                console.log('TTS STOP...');\n                cancel()\n            })\n            /* speak: asEffect((context) => {\n\t     * console.log('Speaking...');\n             *     speak({text: context.ttsAgenda })\n             * } */\n        }\n    });\n\n\n    return (\n        <div className=\"App\">\n            <ReactiveButton state={current} onClick={() => send('CLICK')} />\n        </div>\n    )\n};\n\n\n\n//RASA\n\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://rasajacobcoles.herokuapp.com/model/parse'\nconst nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: 'POST',\n        headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n    <App />,\n    rootElement);\n"]},"metadata":{},"sourceType":"module"}