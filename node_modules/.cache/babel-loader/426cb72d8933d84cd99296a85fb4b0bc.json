{"ast":null,"code":"import { send, assign } from \"xstate\";\n\nfunction say(text) {\n  return send(_context => ({\n    type: \"SPEAK\",\n    value: text\n  }));\n}\n\nfunction listen() {\n  return send('LISTEN');\n}\n\nconst grammar = {\n  \"John\": {\n    person: \"John Appleseed\"\n  },\n  \"Sarah\": {\n    person: \"Sarah Swiggity\"\n  },\n  \"daddy\": {\n    person: \"The big lad\"\n  },\n  \"on monday\": {\n    day: \"Friday\"\n  },\n  \"on tuesday\": {\n    day: \"Thursday\"\n  },\n  \"on wednesday\": {\n    day: \"Friday\"\n  },\n  \"on thursday\": {\n    day: \"Thursday\"\n  },\n  \"on friday\": {\n    day: \"Friday\"\n  },\n  \"on saturday\": {\n    day: \"Thursday\"\n  },\n  \"on sunday\": {\n    day: \"Friday\"\n  },\n  \"at 8\": {\n    time: \"8:00\"\n  },\n  \"at 9\": {\n    time: \"9:00\"\n  },\n  \"at 10\": {\n    time: \"10:00\"\n  },\n  \"at 11\": {\n    time: \"11:00\"\n  },\n  \"at 12\": {\n    time: \"12:00\"\n  },\n  \"at 13\": {\n    time: \"13:00\"\n  },\n  \"at 14\": {\n    time: \"14:00\"\n  },\n  \"at 15\": {\n    time: \"15:00\"\n  },\n  \"at 16\": {\n    time: \"16:00\"\n  },\n  \"yes\": {\n    bool_val: true\n  },\n  \"yeah\": {\n    bool_val: true\n  },\n  \"ok\": {\n    bool_val: true\n  },\n  \"sure\": {\n    bool_val: true\n  },\n  \"ja\": {\n    bool_val: true\n  },\n  \"no\": {\n    bool_val: false\n  },\n  \"nope\": {\n    bool_val: false\n  },\n  \"nein\": {\n    bool_val: false\n  },\n  \"nej\": {\n    bool_val: false\n  },\n  \"appointment\": {\n    initial_function: \"appt\"\n  },\n  \"an appointment\": {\n    initial_function: \"appt\"\n  },\n  \"set up an appointment\": {\n    initial_function: \"appt\"\n  },\n  \"make an appointment\": {\n    initial_function: \"appt\"\n  },\n  \"to do\": {\n    initial_function: \"todo\"\n  },\n  \"set up a to do\": {\n    initial_function: \"todo\"\n  },\n  \"make to do\": {\n    initial_function: \"todo\"\n  },\n  \"make a to do\": {\n    initial_function: \"todo\"\n  },\n  \"timer\": {\n    initial_function: \"timer\"\n  },\n  \"make a timer\": {\n    initial_function: \"timer\"\n  },\n  \"set a timer\": {\n    initial_function: \"timer\"\n  },\n  \"set timer\": {\n    initial_function: \"timer\"\n  }\n};\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://rasajacobcoles.herokuapp.com/model/parse';\n\nconst nluRequest = myQuery => fetch(new Request(proxyurl + rasaurl, {\n  method: 'POST',\n  headers: {\n    'Origin': 'http://localhost:3000/'\n  },\n  // only required with proxy\n  body: \"{\\\"text\\\": \\\"\".concat(myQuery, \"\\\"}\")\n})).then(data => data.json());\n\nexport const dmMachine = {\n  initial: 'init',\n  states: {\n    init: {\n      on: {\n        CLICK: 'welcome'\n      }\n    },\n    welcome: {\n      initial: \"prompt\",\n      id: \"welcome\",\n      on: {\n        RECOGNISED: {\n          target: \"query\",\n          actions: assign(context => {\n            return {\n              query: context.recResult\n            };\n          })\n        }\n      },\n      states: {\n        prompt: {\n          entry: say(\"Would you like to book an appointment, set a timer or add a to do item?\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        }\n      }\n    },\n    query: {\n      invoke: {\n        id: \"rasaquery\",\n        src: (context, event) => nluRequest(context.query),\n        onDone: [{\n          target: \".prompt\",\n          cond: (context, event) => {\n            return (event.data.intent.confidence || 0) > 0.7;\n          }\n        }, {\n          target: \"select_task\",\n          actions: [assign((context, event) => {\n            return {\n              snippet: event.data.intent.name\n            };\n          }), (context, event) => console.log(event.data)]\n        }],\n        onError: {\n          target: 'init',\n          actions: [(context, event) => console.log(event.data), say(\"Sorry, there was an error. \")]\n        }\n      },\n      states: {\n        prompt: {\n          entry: say(\"Sorry, I didn't get that\"),\n          on: {\n            ENDSPEECH: \"#welcome\"\n          }\n        }\n      }\n    },\n    select_task: {\n      always: [{\n        cond: context => context.snippet === \"Appointment\",\n        target: \"who\"\n      }, {\n        cond: context => context.snippet === \"TODO\",\n        target: \"todo\"\n      }, {\n        cond: context => context.snippet === \"Timer\",\n        target: \"timer\"\n      }, {\n        target: \"init\"\n      }]\n    },\n    todo: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"init\"\n      },\n      states: {\n        prompt: {\n          entry: say(\"You are in the to do thing.\")\n        }\n      }\n    },\n    timer: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"init\"\n      },\n      states: {\n        prompt: {\n          entry: say(\"You are in the timer thing.\")\n        }\n      }\n    },\n    who: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"person\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              person: grammar[context.recResult].person\n            };\n          }),\n          target: \"day\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: say(\"Who are you meeting with?\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry I don't know them\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    day: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"day\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              day: grammar[context.recResult].day\n            };\n          }),\n          target: \"whole_day_query\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"OK. \".concat(context.person, \". On which day is your meeting?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Can you please repeat that\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        }\n      }\n    },\n    whole_day_query: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"bool_val\" in (grammar[context.recResult] || {}) && grammar[context.recResult].bool_val == false,\n          actions: assign(context => {\n            return {\n              bool_val: grammar[context.recResult].bool_val\n            };\n          }),\n          target: \"meeting_time_query\"\n        }, {\n          cond: context => \"bool_val\" in (grammar[context.recResult] || {}) && grammar[context.recResult].bool_val == true,\n          actions: assign(context => {\n            return {\n              bool_val: grammar[context.recResult].bool_val\n            };\n          }),\n          target: \"confirm_full_day\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Will the meeting take the whole day?\"\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Can you please repeat that\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        }\n      }\n    },\n    meeting_time_query: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"time\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              time: grammar[context.recResult].time\n            };\n          }),\n          target: \"confirm_day_and_time\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"What time is the meeting?\"\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Can you please repeat that\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        }\n      }\n    },\n    confirm_day_and_time: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"bool_val\" in (grammar[context.recResult] || {}) && grammar[context.recResult].bool_val == false,\n          actions: assign(context => {\n            return {\n              bool_val: grammar[context.recResult].bool_val\n            };\n          }),\n          target: \"init\"\n        }, {\n          cond: context => \"bool_val\" in (grammar[context.recResult] || {}) && grammar[context.recResult].bool_val == true,\n          actions: assign(context => {\n            return {\n              bool_val: grammar[context.recResult].bool_val\n            };\n          }),\n          target: \"finalise\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Do you want to create an appointment with \".concat(context.person, \" on \").concat(context.day, \" at \").concat(context.time, \"?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Can you please repeat that\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        }\n      }\n    },\n    confirm_full_day: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"bool_val\" in (grammar[context.recResult] || {}) && grammar[context.recResult].bool_val == false,\n          actions: assign(context => {\n            return {\n              bool_val: grammar[context.recResult].bool_val\n            };\n          }),\n          target: \"init\"\n        }, {\n          cond: context => \"bool_val\" in (grammar[context.recResult] || {}) && grammar[context.recResult].bool_val == true,\n          actions: assign(context => {\n            return {\n              bool_val: grammar[context.recResult].bool_val\n            };\n          }),\n          target: \"finalise\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Do you want to create an appointment with \".concat(context.person, \" on \").concat(context.day, \" for the whole day?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Can you please repeat that\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        }\n      }\n    },\n    finalise: {\n      entry: say(\"Your appointment has been created.\"),\n      on: {\n        ENDSPEECH: \"init\"\n      }\n    },\n    say_error: {\n      target: 'init',\n      actions: say(\"Sorry, there was an error. \")\n    }\n  }\n};","map":{"version":3,"sources":["/Users/jacobcoles/Desktop/LT2216/Lab2/react-xstate-colourchanger/src/dmAppointment.ts"],"names":["send","assign","say","text","_context","type","value","listen","grammar","person","day","time","bool_val","initial_function","proxyurl","rasaurl","nluRequest","myQuery","fetch","Request","method","headers","body","then","data","json","dmMachine","initial","states","init","on","CLICK","welcome","id","RECOGNISED","target","actions","context","query","recResult","prompt","entry","ENDSPEECH","ask","invoke","src","event","onDone","cond","intent","confidence","snippet","name","console","log","onError","select_task","always","todo","timer","who","nomatch","whole_day_query","meeting_time_query","confirm_day_and_time","confirm_full_day","finalise","say_error"],"mappings":"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","sourcesContent":["import { MachineConfig, send, Action, assign } from \"xstate\";\n\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string, bool_val?: boolean, initial_function: string } } = {\n    \"John\": { person: \"John Appleseed\" },\n    \"Sarah\": { person: \"Sarah Swiggity\" },\n    \"daddy\": { person: \"The big lad\" },\n    \"on monday\": { day: \"Friday\" },\n    \"on tuesday\": { day: \"Thursday\" },\n    \"on wednesday\": { day: \"Friday\" },\n    \"on thursday\": { day: \"Thursday\" },\n    \"on friday\": { day: \"Friday\" },\n    \"on saturday\": { day: \"Thursday\" },\n    \"on sunday\": { day: \"Friday\" },\n    \"at 8\": { time: \"8:00\" },\n    \"at 9\": { time: \"9:00\" },\n    \"at 10\": { time: \"10:00\" },\n    \"at 11\": { time: \"11:00\" },\n    \"at 12\": { time: \"12:00\" },\n    \"at 13\": { time: \"13:00\" },\n    \"at 14\": { time: \"14:00\" },\n    \"at 15\": { time: \"15:00\" },\n    \"at 16\": { time: \"16:00\" },\n    \"yes\": { bool_val: true },\n\t\"yeah\": { bool_val: true },\n\t\"ok\": { bool_val: true },\n\t\"sure\": { bool_val: true },\n\t\"ja\": { bool_val: true },\n    \"no\": { bool_val: false },\n\t\"nope\": { bool_val: false },\n\t\"nein\": { bool_val: false },\n\t\"nej\": { bool_val: false },\n\t\"appointment\": { initial_function: \"appt\" },\n\t\"an appointment\": { initial_function: \"appt\" },\n\t\"set up an appointment\": { initial_function: \"appt\" },\n\t\"make an appointment\": { initial_function: \"appt\" },\n\t\"to do\": { initial_function: \"todo\" },\n\t\"set up a to do\": { initial_function: \"todo\" },\n\t\"make to do\": { initial_function: \"todo\" },\n\t\"make a to do\": { initial_function: \"todo\" },\n\t\"timer\": { initial_function: \"timer\" },\n\t\"make a timer\": { initial_function: \"timer\" },\n\t\"set a timer\": { initial_function: \"timer\" },\n\t\"set timer\": { initial_function: \"timer\" },\n}\n\n\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://rasajacobcoles.herokuapp.com/model/parse'\nconst nluRequest = (myQuery: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: 'POST',\n        headers: { 'Origin': 'http://localhost:3000/' }, // only required with proxy\n        body: `{\"text\": \"${myQuery}\"}`\n    }))\n        .then(data => data.json());\n\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'init',\n    states: {\n        init: {\n            on: {\n                CLICK: 'welcome'\n            }\n        },\n\t\twelcome:{\n\t\t\tinitial: \"prompt\",\n\t\t\tid: \"welcome\",\n\t\t\ton: {\n\t\t\t\tRECOGNISED: {\n\t\t\t\t\ttarget: \"query\",\n\t\t\t\t\tactions: assign((context) => { return { query: context.recResult } })\n\t\t\t\t}\n\t\t\t},\n\t\t\tstates: {\n                prompt: { \n\t\t\t\t\tentry: say(\"Would you like to book an appointment, set a timer or add a to do item?\"),\n\t\t\t\t\ton: { ENDSPEECH: \"ask\"} \n\t\t\t\t},\n\t\t\t\task: {\n\t\t\t\t\tentry: listen()\n\t\t\t\t},\n            }\n\t\t},\n\t\tquery: {\n\t\t\tinvoke: {\n\t\t\t\tid: \"rasaquery\",\n\t\t\t\tsrc: (context, event) => nluRequest(context.query),\n\t\t\t\tonDone: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttarget: \".prompt\",\n\t\t\t\t\t\tcond: (context, event)=> { return ((event.data.intent.confidence || 0) > 0.7) }\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttarget: \"select_task\",\n\t                    actions: [\n\t\t\t\t\t\t\tassign((context, event) => { return {snippet: event.data.intent.name }}),\n\t\t\t\t\t\t\t(context:SDSContext, event:any) => console.log(event.data),\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n                ],\n\t\t\t\tonError: {\n\t\t\t\t\ttarget: 'init',\n\t\t\t\t\tactions: [\n\t\t\t\t\t\t(context,event) => console.log(event.data),\n\t\t\t\t\t\tsay(\"Sorry, there was an error. \")\n\t\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\tstates: {\n                prompt: { \n\t\t\t\t\tentry: say(\"Sorry, I didn't get that\"),\n\t\t\t\t\ton: { ENDSPEECH: \"#welcome\"} \n\t\t\t\t},\n            }\n\t\t},\n\t\tselect_task: {\n\t\t\talways: [\n\t\t\t\t{\n\t\t\t\t\tcond: (context) => context.snippet ===  \"Appointment\",\n\t\t\t\t\ttarget: \"who\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tcond: (context) => context.snippet  ===  \"TODO\",\n\t\t\t\t\ttarget: \"todo\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tcond: (context) => context.snippet  ===  \"Timer\",\n\t\t\t\t\ttarget: \"timer\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttarget: \"init\"\n\t\t\t\t}\n\t\t\t],\n\t\t},\n\t\ttodo: {\n\t\t\tinitial: \"prompt\",\n\t\t\ton: {\n\t\t\t\tENDSPEECH: \"init\"\n\t\t\t},\n\t\t\tstates: {\n\t\t\t\tprompt: {\n\t\t\t\t\tentry: say(\"You are in the to do thing.\"),\n\t\t\t\t},\n\t\t\t}\n\t\t},\n\t\ttimer: {\n\t\t\tinitial: \"prompt\",\n\t\t\ton: {\n\t\t\t\tENDSPEECH: \"init\"\n\t\t\t},\n\t\t\tstates: {\n\t\t\t\tprompt: {\n\t\t\t\t\tentry: say(\"You are in the timer thing.\")\n\t\t\t\t},\n\t\t\t}\n\t\t},\n        who: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"person\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { person: grammar[context.recResult].person }}),\n                    target: \"day\"\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: say(\"Who are you meeting with?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry I don't know them\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        day: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"day\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { day: grammar[context.recResult].day } }),\n                    target: \"whole_day_query\"\n\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person}. On which day is your meeting?`\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Can you please repeat that\"),\n                    on: { ENDSPEECH: \"ask\" }\n                }\n            }\n        },\n        whole_day_query: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [\n\t\t\t\t{\n\t\t\t\t\tcond: (context) => \"bool_val\" in (grammar[context.recResult] || {}) && (grammar[context.recResult].bool_val == false),\n                    actions: assign((context) => { return { bool_val: grammar[context.recResult].bool_val } }),\n                    target: \"meeting_time_query\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tcond: (context) => \"bool_val\" in (grammar[context.recResult] || {}) && (grammar[context.recResult].bool_val == true),\n                    actions: assign((context) => { return { bool_val: grammar[context.recResult].bool_val } }),\n                    target: \"confirm_full_day\"\n\t\t\t\t},\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Will the meeting take the whole day?`\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Can you please repeat that\"),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n            }\n        },\n        meeting_time_query: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"time\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { time: grammar[context.recResult].time } }),\n                    target: \"confirm_day_and_time\"\n\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `What time is the meeting?`\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Can you please repeat that\"),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n            }\n        },\n\t\tconfirm_day_and_time: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [\n\t\t\t\t{\n\t\t\t\t\tcond: (context) => \"bool_val\" in (grammar[context.recResult] || {}) && (grammar[context.recResult].bool_val == false),\n                    actions: assign((context) => { return { bool_val: grammar[context.recResult].bool_val } }),\n                    target: \"init\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tcond: (context) => \"bool_val\" in (grammar[context.recResult] || {}) && (grammar[context.recResult].bool_val == true),\n                    actions: assign((context) => { return { bool_val: grammar[context.recResult].bool_val } }),\n                    target: \"finalise\"\n\t\t\t\t},\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Do you want to create an appointment with ${context.person} on ${context.day} at ${context.time}?`\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Can you please repeat that\"),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n            }\n        },\n\t\tconfirm_full_day: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [\n\t\t\t\t{\n\t\t\t\t\tcond: (context) => \"bool_val\" in (grammar[context.recResult] || {}) && (grammar[context.recResult].bool_val == false),\n                    actions: assign((context) => { return { bool_val: grammar[context.recResult].bool_val } }),\n                    target: \"init\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tcond: (context) => \"bool_val\" in (grammar[context.recResult] || {}) && (grammar[context.recResult].bool_val == true),\n                    actions: assign((context) => { return { bool_val: grammar[context.recResult].bool_val } }),\n                    target: \"finalise\"\n\t\t\t\t},\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Do you want to create an appointment with ${context.person} on ${context.day} for the whole day?`\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Can you please repeat that\"),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n            }\n        },\n\t\tfinalise: {\n\t\t\tentry: say(\"Your appointment has been created.\"),\n\t\t\ton: { ENDSPEECH: \"init\" }\n\t\t},\n\t\tsay_error: {\n\t\t\ttarget: 'init',\n\t\t\tactions: say(\"Sorry, there was an error. \")\n\t\t}\n\n    }\n})\n\n\n\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}