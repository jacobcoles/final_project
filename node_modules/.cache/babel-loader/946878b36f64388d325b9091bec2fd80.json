{"ast":null,"code":"\"use strict\"; // Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar _objectSpread = require(\"/Users/jacobcoles/Desktop/LT2216/final_project/final_project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _regeneratorRuntime = require(\"/Users/jacobcoles/Desktop/LT2216/final_project/final_project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/jacobcoles/Desktop/LT2216/final_project/final_project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GoogleAuth = exports.CLOUD_SDK_CLIENT_ID = void 0;\n\nconst child_process_1 = require(\"child_process\");\n\nconst fs = require(\"fs\");\n\nconst gcpMetadata = require(\"gcp-metadata\");\n\nconst os = require(\"os\");\n\nconst path = require(\"path\");\n\nconst crypto_1 = require(\"../crypto/crypto\");\n\nconst transporters_1 = require(\"../transporters\");\n\nconst computeclient_1 = require(\"./computeclient\");\n\nconst idtokenclient_1 = require(\"./idtokenclient\");\n\nconst envDetect_1 = require(\"./envDetect\");\n\nconst jwtclient_1 = require(\"./jwtclient\");\n\nconst refreshclient_1 = require(\"./refreshclient\");\n\nconst externalclient_1 = require(\"./externalclient\");\n\nconst baseexternalclient_1 = require(\"./baseexternalclient\");\n\nexports.CLOUD_SDK_CLIENT_ID = '764086051850-6qr4p6gpi6hn506pt8ejuq83di341hur.apps.googleusercontent.com';\n\nclass GoogleAuth {\n  constructor(opts) {\n    /**\n     * Caches a value indicating whether the auth layer is running on Google\n     * Compute Engine.\n     * @private\n     */\n    this.checkIsGCE = undefined; // To save the contents of the JSON credential file\n\n    this.jsonContent = null;\n    this.cachedCredential = null;\n    opts = opts || {};\n    this._cachedProjectId = opts.projectId || null;\n    this.keyFilename = opts.keyFilename || opts.keyFile;\n    this.scopes = opts.scopes;\n    this.jsonContent = opts.credentials || null;\n    this.clientOptions = opts.clientOptions;\n  } // Note:  this properly is only public to satisify unit tests.\n  // https://github.com/Microsoft/TypeScript/issues/5228\n\n\n  get isGCE() {\n    return this.checkIsGCE;\n  }\n\n  getProjectId(callback) {\n    if (callback) {\n      this.getProjectIdAsync().then(r => callback(null, r), callback);\n    } else {\n      return this.getProjectIdAsync();\n    }\n  }\n\n  getProjectIdAsync() {\n    var _this = this;\n\n    if (this._cachedProjectId) {\n      return Promise.resolve(this._cachedProjectId);\n    } // In implicit case, supports three environments. In order of precedence,\n    // the implicit environments are:\n    // - GCLOUD_PROJECT or GOOGLE_CLOUD_PROJECT environment variable\n    // - GOOGLE_APPLICATION_CREDENTIALS JSON file\n    // - Cloud SDK: `gcloud config config-helper --format json`\n    // - GCE project ID from metadata server)\n\n\n    if (!this._getDefaultProjectIdPromise) {\n      // TODO: refactor the below code so that it doesn't mix and match\n      // promises and async/await.\n      this._getDefaultProjectIdPromise = new Promise(\n      /*#__PURE__*/\n      // eslint-disable-next-line no-async-promise-executor\n      function () {\n        var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(resolve, reject) {\n          var projectId;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.t3 = _this.getProductionProjectId();\n\n                if (_context.t3) {\n                  _context.next = 6;\n                  break;\n                }\n\n                _context.next = 5;\n                return _this.getFileProjectId();\n\n              case 5:\n                _context.t3 = _context.sent;\n\n              case 6:\n                _context.t2 = _context.t3;\n\n                if (_context.t2) {\n                  _context.next = 11;\n                  break;\n                }\n\n                _context.next = 10;\n                return _this.getDefaultServiceProjectId();\n\n              case 10:\n                _context.t2 = _context.sent;\n\n              case 11:\n                _context.t1 = _context.t2;\n\n                if (_context.t1) {\n                  _context.next = 16;\n                  break;\n                }\n\n                _context.next = 15;\n                return _this.getGCEProjectId();\n\n              case 15:\n                _context.t1 = _context.sent;\n\n              case 16:\n                _context.t0 = _context.t1;\n\n                if (_context.t0) {\n                  _context.next = 21;\n                  break;\n                }\n\n                _context.next = 20;\n                return _this.getExternalAccountClientProjectId();\n\n              case 20:\n                _context.t0 = _context.sent;\n\n              case 21:\n                projectId = _context.t0;\n                _this._cachedProjectId = projectId;\n\n                if (projectId) {\n                  _context.next = 25;\n                  break;\n                }\n\n                throw new Error('Unable to detect a Project Id in the current environment. \\n' + 'To learn more about authentication and Google APIs, visit: \\n' + 'https://cloud.google.com/docs/authentication/getting-started');\n\n              case 25:\n                resolve(projectId);\n                _context.next = 31;\n                break;\n\n              case 28:\n                _context.prev = 28;\n                _context.t4 = _context[\"catch\"](0);\n                reject(_context.t4);\n\n              case 31:\n              case \"end\":\n                return _context.stop();\n            }\n          }, _callee, null, [[0, 28]]);\n        }));\n\n        return function (_x, _x2) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    }\n\n    return this._getDefaultProjectIdPromise;\n  }\n  /**\n   * @returns Any scopes (user-specified or default scopes specified by the\n   *   client library) that need to be set on the current Auth client.\n   */\n\n\n  getAnyScopes() {\n    return this.scopes || this.defaultScopes;\n  }\n\n  getApplicationDefault(optionsOrCallback = {}, callback) {\n    let options;\n\n    if (typeof optionsOrCallback === 'function') {\n      callback = optionsOrCallback;\n    } else {\n      options = optionsOrCallback;\n    }\n\n    if (callback) {\n      this.getApplicationDefaultAsync(options).then(r => callback(null, r.credential, r.projectId), callback);\n    } else {\n      return this.getApplicationDefaultAsync(options);\n    }\n  }\n\n  getApplicationDefaultAsync(options = {}) {\n    var _this2 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var credential, projectId, isGCE;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!_this2.cachedCredential) {\n              _context2.next = 6;\n              break;\n            }\n\n            _context2.t0 = _this2.cachedCredential;\n            _context2.next = 4;\n            return _this2.getProjectIdAsync();\n\n          case 4:\n            _context2.t1 = _context2.sent;\n            return _context2.abrupt(\"return\", {\n              credential: _context2.t0,\n              projectId: _context2.t1\n            });\n\n          case 6:\n            _context2.next = 8;\n            return _this2._tryGetApplicationCredentialsFromEnvironmentVariable(options);\n\n          case 8:\n            credential = _context2.sent;\n\n            if (!credential) {\n              _context2.next = 16;\n              break;\n            }\n\n            if (credential instanceof jwtclient_1.JWT) {\n              credential.defaultScopes = _this2.defaultScopes;\n              credential.scopes = _this2.scopes;\n            } else if (credential instanceof baseexternalclient_1.BaseExternalAccountClient) {\n              credential.scopes = _this2.getAnyScopes();\n            }\n\n            _this2.cachedCredential = credential;\n            _context2.next = 14;\n            return _this2.getProjectId();\n\n          case 14:\n            projectId = _context2.sent;\n            return _context2.abrupt(\"return\", {\n              credential,\n              projectId\n            });\n\n          case 16:\n            _context2.next = 18;\n            return _this2._tryGetApplicationCredentialsFromWellKnownFile(options);\n\n          case 18:\n            credential = _context2.sent;\n\n            if (!credential) {\n              _context2.next = 26;\n              break;\n            }\n\n            if (credential instanceof jwtclient_1.JWT) {\n              credential.defaultScopes = _this2.defaultScopes;\n              credential.scopes = _this2.scopes;\n            } else if (credential instanceof baseexternalclient_1.BaseExternalAccountClient) {\n              credential.scopes = _this2.getAnyScopes();\n            }\n\n            _this2.cachedCredential = credential;\n            _context2.next = 24;\n            return _this2.getProjectId();\n\n          case 24:\n            projectId = _context2.sent;\n            return _context2.abrupt(\"return\", {\n              credential,\n              projectId\n            });\n\n          case 26:\n            _context2.prev = 26;\n            _context2.next = 29;\n            return _this2._checkIsGCE();\n\n          case 29:\n            isGCE = _context2.sent;\n            _context2.next = 36;\n            break;\n\n          case 32:\n            _context2.prev = 32;\n            _context2.t2 = _context2[\"catch\"](26);\n            _context2.t2.message = \"Unexpected error determining execution environment: \".concat(_context2.t2.message);\n            throw _context2.t2;\n\n          case 36:\n            if (isGCE) {\n              _context2.next = 38;\n              break;\n            }\n\n            throw new Error('Could not load the default credentials. Browse to https://cloud.google.com/docs/authentication/getting-started for more information.');\n\n          case 38:\n            // For GCE, just return a default ComputeClient. It will take care of\n            // the rest.\n            options.scopes = _this2.getAnyScopes();\n            _this2.cachedCredential = new computeclient_1.Compute(options);\n            _context2.next = 42;\n            return _this2.getProjectId();\n\n          case 42:\n            projectId = _context2.sent;\n            return _context2.abrupt(\"return\", {\n              projectId,\n              credential: _this2.cachedCredential\n            });\n\n          case 44:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2, null, [[26, 32]]);\n    }))();\n  }\n  /**\n   * Determines whether the auth layer is running on Google Compute Engine.\n   * @returns A promise that resolves with the boolean.\n   * @api private\n   */\n\n\n  _checkIsGCE() {\n    var _this3 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) switch (_context3.prev = _context3.next) {\n          case 0:\n            if (!(_this3.checkIsGCE === undefined)) {\n              _context3.next = 4;\n              break;\n            }\n\n            _context3.next = 3;\n            return gcpMetadata.isAvailable();\n\n          case 3:\n            _this3.checkIsGCE = _context3.sent;\n\n          case 4:\n            return _context3.abrupt(\"return\", _this3.checkIsGCE);\n\n          case 5:\n          case \"end\":\n            return _context3.stop();\n        }\n      }, _callee3);\n    }))();\n  }\n  /**\n   * Attempts to load default credentials from the environment variable path..\n   * @returns Promise that resolves with the OAuth2Client or null.\n   * @api private\n   */\n\n\n  _tryGetApplicationCredentialsFromEnvironmentVariable(options) {\n    var _this4 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n      var credentialsPath;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) switch (_context4.prev = _context4.next) {\n          case 0:\n            credentialsPath = process.env['GOOGLE_APPLICATION_CREDENTIALS'] || process.env['google_application_credentials'];\n\n            if (!(!credentialsPath || credentialsPath.length === 0)) {\n              _context4.next = 3;\n              break;\n            }\n\n            return _context4.abrupt(\"return\", null);\n\n          case 3:\n            _context4.prev = 3;\n            return _context4.abrupt(\"return\", _this4._getApplicationCredentialsFromFilePath(credentialsPath, options));\n\n          case 7:\n            _context4.prev = 7;\n            _context4.t0 = _context4[\"catch\"](3);\n            _context4.t0.message = \"Unable to read the credential file specified by the GOOGLE_APPLICATION_CREDENTIALS environment variable: \".concat(_context4.t0.message);\n            throw _context4.t0;\n\n          case 11:\n          case \"end\":\n            return _context4.stop();\n        }\n      }, _callee4, null, [[3, 7]]);\n    }))();\n  }\n  /**\n   * Attempts to load default credentials from a well-known file location\n   * @return Promise that resolves with the OAuth2Client or null.\n   * @api private\n   */\n\n\n  _tryGetApplicationCredentialsFromWellKnownFile(options) {\n    var _this5 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n      var location, home, client;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) switch (_context5.prev = _context5.next) {\n          case 0:\n            // First, figure out the location of the file, depending upon the OS type.\n            location = null;\n\n            if (_this5._isWindows()) {\n              // Windows\n              location = process.env['APPDATA'];\n            } else {\n              // Linux or Mac\n              home = process.env['HOME'];\n\n              if (home) {\n                location = path.join(home, '.config');\n              }\n            } // If we found the root path, expand it.\n\n\n            if (location) {\n              location = path.join(location, 'gcloud', 'application_default_credentials.json');\n\n              if (!fs.existsSync(location)) {\n                location = null;\n              }\n            } // The file does not exist.\n\n\n            if (location) {\n              _context5.next = 5;\n              break;\n            }\n\n            return _context5.abrupt(\"return\", null);\n\n          case 5:\n            _context5.next = 7;\n            return _this5._getApplicationCredentialsFromFilePath(location, options);\n\n          case 7:\n            client = _context5.sent;\n            return _context5.abrupt(\"return\", client);\n\n          case 9:\n          case \"end\":\n            return _context5.stop();\n        }\n      }, _callee5);\n    }))();\n  }\n  /**\n   * Attempts to load default credentials from a file at the given path..\n   * @param filePath The path to the file to read.\n   * @returns Promise that resolves with the OAuth2Client\n   * @api private\n   */\n\n\n  _getApplicationCredentialsFromFilePath(filePath, options = {}) {\n    var _this6 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n      var readStream;\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) switch (_context6.prev = _context6.next) {\n          case 0:\n            if (!(!filePath || filePath.length === 0)) {\n              _context6.next = 2;\n              break;\n            }\n\n            throw new Error('The file path is invalid.');\n\n          case 2:\n            _context6.prev = 2;\n            // Resolve path to actual file in case of symlink. Expect a thrown error\n            // if not resolvable.\n            filePath = fs.realpathSync(filePath);\n\n            if (fs.lstatSync(filePath).isFile()) {\n              _context6.next = 6;\n              break;\n            }\n\n            throw new Error();\n\n          case 6:\n            _context6.next = 12;\n            break;\n\n          case 8:\n            _context6.prev = 8;\n            _context6.t0 = _context6[\"catch\"](2);\n            _context6.t0.message = \"The file at \".concat(filePath, \" does not exist, or it is not a file. \").concat(_context6.t0.message);\n            throw _context6.t0;\n\n          case 12:\n            // Now open a read stream on the file, and parse it.\n            readStream = fs.createReadStream(filePath);\n            return _context6.abrupt(\"return\", _this6.fromStream(readStream, options));\n\n          case 14:\n          case \"end\":\n            return _context6.stop();\n        }\n      }, _callee6, null, [[2, 8]]);\n    }))();\n  }\n  /**\n   * Create a credentials instance using the given input options.\n   * @param json The input object.\n   * @param options The JWT or UserRefresh options for the client\n   * @returns JWT or UserRefresh Client with data\n   */\n\n\n  fromJSON(json, options) {\n    let client;\n\n    if (!json) {\n      throw new Error('Must pass in a JSON object containing the Google auth settings.');\n    }\n\n    options = options || {};\n\n    if (json.type === 'authorized_user') {\n      client = new refreshclient_1.UserRefreshClient(options);\n      client.fromJSON(json);\n    } else if (json.type === baseexternalclient_1.EXTERNAL_ACCOUNT_TYPE) {\n      client = externalclient_1.ExternalAccountClient.fromJSON(json, options);\n      client.scopes = this.getAnyScopes();\n    } else {\n      options.scopes = this.scopes;\n      client = new jwtclient_1.JWT(options);\n      client.defaultScopes = this.defaultScopes;\n      client.fromJSON(json);\n    }\n\n    return client;\n  }\n  /**\n   * Return a JWT or UserRefreshClient from JavaScript object, caching both the\n   * object used to instantiate and the client.\n   * @param json The input object.\n   * @param options The JWT or UserRefresh options for the client\n   * @returns JWT or UserRefresh Client with data\n   */\n\n\n  _cacheClientFromJSON(json, options) {\n    let client; // create either a UserRefreshClient or JWT client.\n\n    options = options || {};\n\n    if (json.type === 'authorized_user') {\n      client = new refreshclient_1.UserRefreshClient(options);\n      client.fromJSON(json);\n    } else if (json.type === baseexternalclient_1.EXTERNAL_ACCOUNT_TYPE) {\n      client = externalclient_1.ExternalAccountClient.fromJSON(json, options);\n      client.scopes = this.getAnyScopes();\n    } else {\n      options.scopes = this.scopes;\n      client = new jwtclient_1.JWT(options);\n      client.defaultScopes = this.defaultScopes;\n      client.fromJSON(json);\n    } // cache both raw data used to instantiate client and client itself.\n\n\n    this.jsonContent = json;\n    this.cachedCredential = client;\n    return this.cachedCredential;\n  }\n\n  fromStream(inputStream, optionsOrCallback = {}, callback) {\n    let options = {};\n\n    if (typeof optionsOrCallback === 'function') {\n      callback = optionsOrCallback;\n    } else {\n      options = optionsOrCallback;\n    }\n\n    if (callback) {\n      this.fromStreamAsync(inputStream, options).then(r => callback(null, r), callback);\n    } else {\n      return this.fromStreamAsync(inputStream, options);\n    }\n  }\n\n  fromStreamAsync(inputStream, options) {\n    return new Promise((resolve, reject) => {\n      if (!inputStream) {\n        throw new Error('Must pass in a stream containing the Google auth settings.');\n      }\n\n      let s = '';\n      inputStream.setEncoding('utf8').on('error', reject).on('data', chunk => s += chunk).on('end', () => {\n        try {\n          try {\n            const data = JSON.parse(s);\n\n            const r = this._cacheClientFromJSON(data, options);\n\n            return resolve(r);\n          } catch (err) {\n            // If we failed parsing this.keyFileName, assume that it\n            // is a PEM or p12 certificate:\n            if (!this.keyFilename) throw err;\n            const client = new jwtclient_1.JWT(_objectSpread(_objectSpread({}, this.clientOptions), {}, {\n              keyFile: this.keyFilename\n            }));\n            this.cachedCredential = client;\n            return resolve(client);\n          }\n        } catch (err) {\n          return reject(err);\n        }\n      });\n    });\n  }\n  /**\n   * Create a credentials instance using the given API key string.\n   * @param apiKey The API key string\n   * @param options An optional options object.\n   * @returns A JWT loaded from the key\n   */\n\n\n  fromAPIKey(apiKey, options) {\n    options = options || {};\n    const client = new jwtclient_1.JWT(options);\n    client.fromAPIKey(apiKey);\n    return client;\n  }\n  /**\n   * Determines whether the current operating system is Windows.\n   * @api private\n   */\n\n\n  _isWindows() {\n    const sys = os.platform();\n\n    if (sys && sys.length >= 3) {\n      if (sys.substring(0, 3).toLowerCase() === 'win') {\n        return true;\n      }\n    }\n\n    return false;\n  }\n  /**\n   * Run the Google Cloud SDK command that prints the default project ID\n   */\n\n\n  getDefaultServiceProjectId() {\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) switch (_context7.prev = _context7.next) {\n          case 0:\n            return _context7.abrupt(\"return\", new Promise(resolve => {\n              child_process_1.exec('gcloud config config-helper --format json', (err, stdout) => {\n                if (!err && stdout) {\n                  try {\n                    const projectId = JSON.parse(stdout).configuration.properties.core.project;\n                    resolve(projectId);\n                    return;\n                  } catch (e) {// ignore errors\n                  }\n                }\n\n                resolve(null);\n              });\n            }));\n\n          case 1:\n          case \"end\":\n            return _context7.stop();\n        }\n      }, _callee7);\n    }))();\n  }\n  /**\n   * Loads the project id from environment variables.\n   * @api private\n   */\n\n\n  getProductionProjectId() {\n    return process.env['GCLOUD_PROJECT'] || process.env['GOOGLE_CLOUD_PROJECT'] || process.env['gcloud_project'] || process.env['google_cloud_project'];\n  }\n  /**\n   * Loads the project id from the GOOGLE_APPLICATION_CREDENTIALS json file.\n   * @api private\n   */\n\n\n  getFileProjectId() {\n    var _this7 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {\n      var creds, r;\n      return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n        while (1) switch (_context8.prev = _context8.next) {\n          case 0:\n            if (!_this7.cachedCredential) {\n              _context8.next = 2;\n              break;\n            }\n\n            return _context8.abrupt(\"return\", _this7.cachedCredential.projectId);\n\n          case 2:\n            if (!_this7.keyFilename) {\n              _context8.next = 8;\n              break;\n            }\n\n            _context8.next = 5;\n            return _this7.getClient();\n\n          case 5:\n            creds = _context8.sent;\n\n            if (!(creds && creds.projectId)) {\n              _context8.next = 8;\n              break;\n            }\n\n            return _context8.abrupt(\"return\", creds.projectId);\n\n          case 8:\n            _context8.next = 10;\n            return _this7._tryGetApplicationCredentialsFromEnvironmentVariable();\n\n          case 10:\n            r = _context8.sent;\n\n            if (!r) {\n              _context8.next = 15;\n              break;\n            }\n\n            return _context8.abrupt(\"return\", r.projectId);\n\n          case 15:\n            return _context8.abrupt(\"return\", null);\n\n          case 16:\n          case \"end\":\n            return _context8.stop();\n        }\n      }, _callee8);\n    }))();\n  }\n  /**\n   * Gets the project ID from external account client if available.\n   */\n\n\n  getExternalAccountClientProjectId() {\n    var _this8 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {\n      var creds;\n      return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n        while (1) switch (_context9.prev = _context9.next) {\n          case 0:\n            if (!(!_this8.jsonContent || _this8.jsonContent.type !== baseexternalclient_1.EXTERNAL_ACCOUNT_TYPE)) {\n              _context9.next = 2;\n              break;\n            }\n\n            return _context9.abrupt(\"return\", null);\n\n          case 2:\n            _context9.next = 4;\n            return _this8.getClient();\n\n          case 4:\n            creds = _context9.sent;\n            _context9.prev = 5;\n            _context9.next = 8;\n            return creds.getProjectId();\n\n          case 8:\n            return _context9.abrupt(\"return\", _context9.sent);\n\n          case 11:\n            _context9.prev = 11;\n            _context9.t0 = _context9[\"catch\"](5);\n            return _context9.abrupt(\"return\", null);\n\n          case 14:\n          case \"end\":\n            return _context9.stop();\n        }\n      }, _callee9, null, [[5, 11]]);\n    }))();\n  }\n  /**\n   * Gets the Compute Engine project ID if it can be inferred.\n   */\n\n\n  getGCEProjectId() {\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {\n      var r;\n      return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n        while (1) switch (_context10.prev = _context10.next) {\n          case 0:\n            _context10.prev = 0;\n            _context10.next = 3;\n            return gcpMetadata.project('project-id');\n\n          case 3:\n            r = _context10.sent;\n            return _context10.abrupt(\"return\", r);\n\n          case 7:\n            _context10.prev = 7;\n            _context10.t0 = _context10[\"catch\"](0);\n            return _context10.abrupt(\"return\", null);\n\n          case 10:\n          case \"end\":\n            return _context10.stop();\n        }\n      }, _callee10, null, [[0, 7]]);\n    }))();\n  }\n\n  getCredentials(callback) {\n    if (callback) {\n      this.getCredentialsAsync().then(r => callback(null, r), callback);\n    } else {\n      return this.getCredentialsAsync();\n    }\n  }\n\n  getCredentialsAsync() {\n    var _this9 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11() {\n      var credential, isGCE, data;\n      return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n        while (1) switch (_context11.prev = _context11.next) {\n          case 0:\n            _context11.next = 2;\n            return _this9.getClient();\n\n          case 2:\n            if (!_this9.jsonContent) {\n              _context11.next = 5;\n              break;\n            }\n\n            credential = {\n              client_email: _this9.jsonContent.client_email,\n              private_key: _this9.jsonContent.private_key\n            };\n            return _context11.abrupt(\"return\", credential);\n\n          case 5:\n            _context11.next = 7;\n            return _this9._checkIsGCE();\n\n          case 7:\n            isGCE = _context11.sent;\n\n            if (isGCE) {\n              _context11.next = 10;\n              break;\n            }\n\n            throw new Error('Unknown error.');\n\n          case 10:\n            _context11.next = 12;\n            return gcpMetadata.instance({\n              property: 'service-accounts/',\n              params: {\n                recursive: 'true'\n              }\n            });\n\n          case 12:\n            data = _context11.sent;\n\n            if (!(!data || !data.default || !data.default.email)) {\n              _context11.next = 15;\n              break;\n            }\n\n            throw new Error('Failure from metadata server.');\n\n          case 15:\n            return _context11.abrupt(\"return\", {\n              client_email: data.default.email\n            });\n\n          case 16:\n          case \"end\":\n            return _context11.stop();\n        }\n      }, _callee11);\n    }))();\n  }\n  /**\n   * Automatically obtain a client based on the provided configuration.  If no\n   * options were passed, use Application Default Credentials.\n   */\n\n\n  getClient(options) {\n    var _this10 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12() {\n      var filePath, stream;\n      return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n        while (1) switch (_context12.prev = _context12.next) {\n          case 0:\n            if (!options) {\n              _context12.next = 2;\n              break;\n            }\n\n            throw new Error('Passing options to getClient is forbidden in v5.0.0. Use new GoogleAuth(opts) instead.');\n\n          case 2:\n            if (_this10.cachedCredential) {\n              _context12.next = 16;\n              break;\n            }\n\n            if (!_this10.jsonContent) {\n              _context12.next = 7;\n              break;\n            }\n\n            _this10._cacheClientFromJSON(_this10.jsonContent, _this10.clientOptions);\n\n            _context12.next = 16;\n            break;\n\n          case 7:\n            if (!_this10.keyFilename) {\n              _context12.next = 14;\n              break;\n            }\n\n            filePath = path.resolve(_this10.keyFilename);\n            stream = fs.createReadStream(filePath);\n            _context12.next = 12;\n            return _this10.fromStreamAsync(stream, _this10.clientOptions);\n\n          case 12:\n            _context12.next = 16;\n            break;\n\n          case 14:\n            _context12.next = 16;\n            return _this10.getApplicationDefaultAsync(_this10.clientOptions);\n\n          case 16:\n            return _context12.abrupt(\"return\", _this10.cachedCredential);\n\n          case 17:\n          case \"end\":\n            return _context12.stop();\n        }\n      }, _callee12);\n    }))();\n  }\n  /**\n   * Creates a client which will fetch an ID token for authorization.\n   * @param targetAudience the audience for the fetched ID token.\n   * @returns IdTokenClient for making HTTP calls authenticated with ID tokens.\n   */\n\n\n  getIdTokenClient(targetAudience) {\n    var _this11 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13() {\n      var client;\n      return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n        while (1) switch (_context13.prev = _context13.next) {\n          case 0:\n            _context13.next = 2;\n            return _this11.getClient();\n\n          case 2:\n            client = _context13.sent;\n\n            if ('fetchIdToken' in client) {\n              _context13.next = 5;\n              break;\n            }\n\n            throw new Error('Cannot fetch ID token in this environment, use GCE or set the GOOGLE_APPLICATION_CREDENTIALS environment variable to a service account credentials JSON file.');\n\n          case 5:\n            return _context13.abrupt(\"return\", new idtokenclient_1.IdTokenClient({\n              targetAudience,\n              idTokenProvider: client\n            }));\n\n          case 6:\n          case \"end\":\n            return _context13.stop();\n        }\n      }, _callee13);\n    }))();\n  }\n  /**\n   * Automatically obtain application default credentials, and return\n   * an access token for making requests.\n   */\n\n\n  getAccessToken() {\n    var _this12 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14() {\n      var client;\n      return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n        while (1) switch (_context14.prev = _context14.next) {\n          case 0:\n            _context14.next = 2;\n            return _this12.getClient();\n\n          case 2:\n            client = _context14.sent;\n            _context14.next = 5;\n            return client.getAccessToken();\n\n          case 5:\n            return _context14.abrupt(\"return\", _context14.sent.token);\n\n          case 6:\n          case \"end\":\n            return _context14.stop();\n        }\n      }, _callee14);\n    }))();\n  }\n  /**\n   * Obtain the HTTP headers that will provide authorization for a given\n   * request.\n   */\n\n\n  getRequestHeaders(url) {\n    var _this13 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15() {\n      var client;\n      return _regeneratorRuntime.wrap(function _callee15$(_context15) {\n        while (1) switch (_context15.prev = _context15.next) {\n          case 0:\n            _context15.next = 2;\n            return _this13.getClient();\n\n          case 2:\n            client = _context15.sent;\n            return _context15.abrupt(\"return\", client.getRequestHeaders(url));\n\n          case 4:\n          case \"end\":\n            return _context15.stop();\n        }\n      }, _callee15);\n    }))();\n  }\n  /**\n   * Obtain credentials for a request, then attach the appropriate headers to\n   * the request options.\n   * @param opts Axios or Request options on which to attach the headers\n   */\n\n\n  authorizeRequest(opts) {\n    var _this14 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16() {\n      var url, client, headers;\n      return _regeneratorRuntime.wrap(function _callee16$(_context16) {\n        while (1) switch (_context16.prev = _context16.next) {\n          case 0:\n            opts = opts || {};\n            url = opts.url || opts.uri;\n            _context16.next = 4;\n            return _this14.getClient();\n\n          case 4:\n            client = _context16.sent;\n            _context16.next = 7;\n            return client.getRequestHeaders(url);\n\n          case 7:\n            headers = _context16.sent;\n            opts.headers = Object.assign(opts.headers || {}, headers);\n            return _context16.abrupt(\"return\", opts);\n\n          case 10:\n          case \"end\":\n            return _context16.stop();\n        }\n      }, _callee16);\n    }))();\n  }\n  /**\n   * Automatically obtain application default credentials, and make an\n   * HTTP request using the given options.\n   * @param opts Axios request options for the HTTP request.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  request(opts) {\n    var _this15 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee17() {\n      var client;\n      return _regeneratorRuntime.wrap(function _callee17$(_context17) {\n        while (1) switch (_context17.prev = _context17.next) {\n          case 0:\n            _context17.next = 2;\n            return _this15.getClient();\n\n          case 2:\n            client = _context17.sent;\n            return _context17.abrupt(\"return\", client.request(opts));\n\n          case 4:\n          case \"end\":\n            return _context17.stop();\n        }\n      }, _callee17);\n    }))();\n  }\n  /**\n   * Determine the compute environment in which the code is running.\n   */\n\n\n  getEnv() {\n    return envDetect_1.getEnv();\n  }\n  /**\n   * Sign the given data with the current private key, or go out\n   * to the IAM API to sign it.\n   * @param data The data to be signed.\n   */\n\n\n  sign(data) {\n    var _this16 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee18() {\n      var client, crypto, sign, projectId, creds, url, res;\n      return _regeneratorRuntime.wrap(function _callee18$(_context18) {\n        while (1) switch (_context18.prev = _context18.next) {\n          case 0:\n            _context18.next = 2;\n            return _this16.getClient();\n\n          case 2:\n            client = _context18.sent;\n            crypto = crypto_1.createCrypto();\n\n            if (!(client instanceof jwtclient_1.JWT && client.key)) {\n              _context18.next = 9;\n              break;\n            }\n\n            _context18.next = 7;\n            return crypto.sign(client.key, data);\n\n          case 7:\n            sign = _context18.sent;\n            return _context18.abrupt(\"return\", sign);\n\n          case 9:\n            _context18.next = 11;\n            return _this16.getProjectId();\n\n          case 11:\n            projectId = _context18.sent;\n\n            if (projectId) {\n              _context18.next = 14;\n              break;\n            }\n\n            throw new Error('Cannot sign data without a project ID.');\n\n          case 14:\n            _context18.next = 16;\n            return _this16.getCredentials();\n\n          case 16:\n            creds = _context18.sent;\n\n            if (creds.client_email) {\n              _context18.next = 19;\n              break;\n            }\n\n            throw new Error('Cannot sign data without `client_email`.');\n\n          case 19:\n            url = \"https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/\".concat(creds.client_email, \":signBlob\");\n            _context18.next = 22;\n            return _this16.request({\n              method: 'POST',\n              url,\n              data: {\n                payload: crypto.encodeBase64StringUtf8(data)\n              }\n            });\n\n          case 22:\n            res = _context18.sent;\n            return _context18.abrupt(\"return\", res.data.signedBlob);\n\n          case 24:\n          case \"end\":\n            return _context18.stop();\n        }\n      }, _callee18);\n    }))();\n  }\n\n}\n\nexports.GoogleAuth = GoogleAuth;\n/**\n * Export DefaultTransporter as a static property of the class.\n */\n\nGoogleAuth.DefaultTransporter = transporters_1.DefaultTransporter;","map":{"version":3,"sources":["/Users/jacobcoles/Desktop/LT2216/final_project/final_project/node_modules/google-auth-library/build/src/auth/googleauth.js"],"names":["Object","defineProperty","exports","value","GoogleAuth","CLOUD_SDK_CLIENT_ID","child_process_1","require","fs","gcpMetadata","os","path","crypto_1","transporters_1","computeclient_1","idtokenclient_1","envDetect_1","jwtclient_1","refreshclient_1","externalclient_1","baseexternalclient_1","constructor","opts","checkIsGCE","undefined","jsonContent","cachedCredential","_cachedProjectId","projectId","keyFilename","keyFile","scopes","credentials","clientOptions","isGCE","getProjectId","callback","getProjectIdAsync","then","r","Promise","resolve","_getDefaultProjectIdPromise","reject","getProductionProjectId","getFileProjectId","getDefaultServiceProjectId","getGCEProjectId","getExternalAccountClientProjectId","Error","getAnyScopes","defaultScopes","getApplicationDefault","optionsOrCallback","options","getApplicationDefaultAsync","credential","_tryGetApplicationCredentialsFromEnvironmentVariable","JWT","BaseExternalAccountClient","_tryGetApplicationCredentialsFromWellKnownFile","_checkIsGCE","message","Compute","isAvailable","credentialsPath","process","env","length","_getApplicationCredentialsFromFilePath","location","_isWindows","home","join","existsSync","client","filePath","realpathSync","lstatSync","isFile","readStream","createReadStream","fromStream","fromJSON","json","type","UserRefreshClient","EXTERNAL_ACCOUNT_TYPE","ExternalAccountClient","_cacheClientFromJSON","inputStream","fromStreamAsync","s","setEncoding","on","chunk","data","JSON","parse","err","fromAPIKey","apiKey","sys","platform","substring","toLowerCase","exec","stdout","configuration","properties","core","project","e","getClient","creds","getCredentials","getCredentialsAsync","client_email","private_key","instance","property","params","recursive","default","email","stream","getIdTokenClient","targetAudience","IdTokenClient","idTokenProvider","getAccessToken","token","getRequestHeaders","url","authorizeRequest","uri","headers","assign","request","getEnv","sign","crypto","createCrypto","key","method","payload","encodeBase64StringUtf8","res","signedBlob","DefaultTransporter"],"mappings":"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","sourcesContent":["\"use strict\";\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GoogleAuth = exports.CLOUD_SDK_CLIENT_ID = void 0;\nconst child_process_1 = require(\"child_process\");\nconst fs = require(\"fs\");\nconst gcpMetadata = require(\"gcp-metadata\");\nconst os = require(\"os\");\nconst path = require(\"path\");\nconst crypto_1 = require(\"../crypto/crypto\");\nconst transporters_1 = require(\"../transporters\");\nconst computeclient_1 = require(\"./computeclient\");\nconst idtokenclient_1 = require(\"./idtokenclient\");\nconst envDetect_1 = require(\"./envDetect\");\nconst jwtclient_1 = require(\"./jwtclient\");\nconst refreshclient_1 = require(\"./refreshclient\");\nconst externalclient_1 = require(\"./externalclient\");\nconst baseexternalclient_1 = require(\"./baseexternalclient\");\nexports.CLOUD_SDK_CLIENT_ID = '764086051850-6qr4p6gpi6hn506pt8ejuq83di341hur.apps.googleusercontent.com';\nclass GoogleAuth {\n    constructor(opts) {\n        /**\n         * Caches a value indicating whether the auth layer is running on Google\n         * Compute Engine.\n         * @private\n         */\n        this.checkIsGCE = undefined;\n        // To save the contents of the JSON credential file\n        this.jsonContent = null;\n        this.cachedCredential = null;\n        opts = opts || {};\n        this._cachedProjectId = opts.projectId || null;\n        this.keyFilename = opts.keyFilename || opts.keyFile;\n        this.scopes = opts.scopes;\n        this.jsonContent = opts.credentials || null;\n        this.clientOptions = opts.clientOptions;\n    }\n    // Note:  this properly is only public to satisify unit tests.\n    // https://github.com/Microsoft/TypeScript/issues/5228\n    get isGCE() {\n        return this.checkIsGCE;\n    }\n    getProjectId(callback) {\n        if (callback) {\n            this.getProjectIdAsync().then(r => callback(null, r), callback);\n        }\n        else {\n            return this.getProjectIdAsync();\n        }\n    }\n    getProjectIdAsync() {\n        if (this._cachedProjectId) {\n            return Promise.resolve(this._cachedProjectId);\n        }\n        // In implicit case, supports three environments. In order of precedence,\n        // the implicit environments are:\n        // - GCLOUD_PROJECT or GOOGLE_CLOUD_PROJECT environment variable\n        // - GOOGLE_APPLICATION_CREDENTIALS JSON file\n        // - Cloud SDK: `gcloud config config-helper --format json`\n        // - GCE project ID from metadata server)\n        if (!this._getDefaultProjectIdPromise) {\n            // TODO: refactor the below code so that it doesn't mix and match\n            // promises and async/await.\n            this._getDefaultProjectIdPromise = new Promise(\n            // eslint-disable-next-line no-async-promise-executor\n            async (resolve, reject) => {\n                try {\n                    const projectId = this.getProductionProjectId() ||\n                        (await this.getFileProjectId()) ||\n                        (await this.getDefaultServiceProjectId()) ||\n                        (await this.getGCEProjectId()) ||\n                        (await this.getExternalAccountClientProjectId());\n                    this._cachedProjectId = projectId;\n                    if (!projectId) {\n                        throw new Error('Unable to detect a Project Id in the current environment. \\n' +\n                            'To learn more about authentication and Google APIs, visit: \\n' +\n                            'https://cloud.google.com/docs/authentication/getting-started');\n                    }\n                    resolve(projectId);\n                }\n                catch (e) {\n                    reject(e);\n                }\n            });\n        }\n        return this._getDefaultProjectIdPromise;\n    }\n    /**\n     * @returns Any scopes (user-specified or default scopes specified by the\n     *   client library) that need to be set on the current Auth client.\n     */\n    getAnyScopes() {\n        return this.scopes || this.defaultScopes;\n    }\n    getApplicationDefault(optionsOrCallback = {}, callback) {\n        let options;\n        if (typeof optionsOrCallback === 'function') {\n            callback = optionsOrCallback;\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        if (callback) {\n            this.getApplicationDefaultAsync(options).then(r => callback(null, r.credential, r.projectId), callback);\n        }\n        else {\n            return this.getApplicationDefaultAsync(options);\n        }\n    }\n    async getApplicationDefaultAsync(options = {}) {\n        // If we've already got a cached credential, just return it.\n        if (this.cachedCredential) {\n            return {\n                credential: this.cachedCredential,\n                projectId: await this.getProjectIdAsync(),\n            };\n        }\n        let credential;\n        let projectId;\n        // Check for the existence of a local environment variable pointing to the\n        // location of the credential file. This is typically used in local\n        // developer scenarios.\n        credential = await this._tryGetApplicationCredentialsFromEnvironmentVariable(options);\n        if (credential) {\n            if (credential instanceof jwtclient_1.JWT) {\n                credential.defaultScopes = this.defaultScopes;\n                credential.scopes = this.scopes;\n            }\n            else if (credential instanceof baseexternalclient_1.BaseExternalAccountClient) {\n                credential.scopes = this.getAnyScopes();\n            }\n            this.cachedCredential = credential;\n            projectId = await this.getProjectId();\n            return { credential, projectId };\n        }\n        // Look in the well-known credential file location.\n        credential = await this._tryGetApplicationCredentialsFromWellKnownFile(options);\n        if (credential) {\n            if (credential instanceof jwtclient_1.JWT) {\n                credential.defaultScopes = this.defaultScopes;\n                credential.scopes = this.scopes;\n            }\n            else if (credential instanceof baseexternalclient_1.BaseExternalAccountClient) {\n                credential.scopes = this.getAnyScopes();\n            }\n            this.cachedCredential = credential;\n            projectId = await this.getProjectId();\n            return { credential, projectId };\n        }\n        // Determine if we're running on GCE.\n        let isGCE;\n        try {\n            isGCE = await this._checkIsGCE();\n        }\n        catch (e) {\n            e.message = `Unexpected error determining execution environment: ${e.message}`;\n            throw e;\n        }\n        if (!isGCE) {\n            // We failed to find the default credentials. Bail out with an error.\n            throw new Error('Could not load the default credentials. Browse to https://cloud.google.com/docs/authentication/getting-started for more information.');\n        }\n        // For GCE, just return a default ComputeClient. It will take care of\n        // the rest.\n        options.scopes = this.getAnyScopes();\n        this.cachedCredential = new computeclient_1.Compute(options);\n        projectId = await this.getProjectId();\n        return { projectId, credential: this.cachedCredential };\n    }\n    /**\n     * Determines whether the auth layer is running on Google Compute Engine.\n     * @returns A promise that resolves with the boolean.\n     * @api private\n     */\n    async _checkIsGCE() {\n        if (this.checkIsGCE === undefined) {\n            this.checkIsGCE = await gcpMetadata.isAvailable();\n        }\n        return this.checkIsGCE;\n    }\n    /**\n     * Attempts to load default credentials from the environment variable path..\n     * @returns Promise that resolves with the OAuth2Client or null.\n     * @api private\n     */\n    async _tryGetApplicationCredentialsFromEnvironmentVariable(options) {\n        const credentialsPath = process.env['GOOGLE_APPLICATION_CREDENTIALS'] ||\n            process.env['google_application_credentials'];\n        if (!credentialsPath || credentialsPath.length === 0) {\n            return null;\n        }\n        try {\n            return this._getApplicationCredentialsFromFilePath(credentialsPath, options);\n        }\n        catch (e) {\n            e.message = `Unable to read the credential file specified by the GOOGLE_APPLICATION_CREDENTIALS environment variable: ${e.message}`;\n            throw e;\n        }\n    }\n    /**\n     * Attempts to load default credentials from a well-known file location\n     * @return Promise that resolves with the OAuth2Client or null.\n     * @api private\n     */\n    async _tryGetApplicationCredentialsFromWellKnownFile(options) {\n        // First, figure out the location of the file, depending upon the OS type.\n        let location = null;\n        if (this._isWindows()) {\n            // Windows\n            location = process.env['APPDATA'];\n        }\n        else {\n            // Linux or Mac\n            const home = process.env['HOME'];\n            if (home) {\n                location = path.join(home, '.config');\n            }\n        }\n        // If we found the root path, expand it.\n        if (location) {\n            location = path.join(location, 'gcloud', 'application_default_credentials.json');\n            if (!fs.existsSync(location)) {\n                location = null;\n            }\n        }\n        // The file does not exist.\n        if (!location) {\n            return null;\n        }\n        // The file seems to exist. Try to use it.\n        const client = await this._getApplicationCredentialsFromFilePath(location, options);\n        return client;\n    }\n    /**\n     * Attempts to load default credentials from a file at the given path..\n     * @param filePath The path to the file to read.\n     * @returns Promise that resolves with the OAuth2Client\n     * @api private\n     */\n    async _getApplicationCredentialsFromFilePath(filePath, options = {}) {\n        // Make sure the path looks like a string.\n        if (!filePath || filePath.length === 0) {\n            throw new Error('The file path is invalid.');\n        }\n        // Make sure there is a file at the path. lstatSync will throw if there is\n        // nothing there.\n        try {\n            // Resolve path to actual file in case of symlink. Expect a thrown error\n            // if not resolvable.\n            filePath = fs.realpathSync(filePath);\n            if (!fs.lstatSync(filePath).isFile()) {\n                throw new Error();\n            }\n        }\n        catch (err) {\n            err.message = `The file at ${filePath} does not exist, or it is not a file. ${err.message}`;\n            throw err;\n        }\n        // Now open a read stream on the file, and parse it.\n        const readStream = fs.createReadStream(filePath);\n        return this.fromStream(readStream, options);\n    }\n    /**\n     * Create a credentials instance using the given input options.\n     * @param json The input object.\n     * @param options The JWT or UserRefresh options for the client\n     * @returns JWT or UserRefresh Client with data\n     */\n    fromJSON(json, options) {\n        let client;\n        if (!json) {\n            throw new Error('Must pass in a JSON object containing the Google auth settings.');\n        }\n        options = options || {};\n        if (json.type === 'authorized_user') {\n            client = new refreshclient_1.UserRefreshClient(options);\n            client.fromJSON(json);\n        }\n        else if (json.type === baseexternalclient_1.EXTERNAL_ACCOUNT_TYPE) {\n            client = externalclient_1.ExternalAccountClient.fromJSON(json, options);\n            client.scopes = this.getAnyScopes();\n        }\n        else {\n            options.scopes = this.scopes;\n            client = new jwtclient_1.JWT(options);\n            client.defaultScopes = this.defaultScopes;\n            client.fromJSON(json);\n        }\n        return client;\n    }\n    /**\n     * Return a JWT or UserRefreshClient from JavaScript object, caching both the\n     * object used to instantiate and the client.\n     * @param json The input object.\n     * @param options The JWT or UserRefresh options for the client\n     * @returns JWT or UserRefresh Client with data\n     */\n    _cacheClientFromJSON(json, options) {\n        let client;\n        // create either a UserRefreshClient or JWT client.\n        options = options || {};\n        if (json.type === 'authorized_user') {\n            client = new refreshclient_1.UserRefreshClient(options);\n            client.fromJSON(json);\n        }\n        else if (json.type === baseexternalclient_1.EXTERNAL_ACCOUNT_TYPE) {\n            client = externalclient_1.ExternalAccountClient.fromJSON(json, options);\n            client.scopes = this.getAnyScopes();\n        }\n        else {\n            options.scopes = this.scopes;\n            client = new jwtclient_1.JWT(options);\n            client.defaultScopes = this.defaultScopes;\n            client.fromJSON(json);\n        }\n        // cache both raw data used to instantiate client and client itself.\n        this.jsonContent = json;\n        this.cachedCredential = client;\n        return this.cachedCredential;\n    }\n    fromStream(inputStream, optionsOrCallback = {}, callback) {\n        let options = {};\n        if (typeof optionsOrCallback === 'function') {\n            callback = optionsOrCallback;\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        if (callback) {\n            this.fromStreamAsync(inputStream, options).then(r => callback(null, r), callback);\n        }\n        else {\n            return this.fromStreamAsync(inputStream, options);\n        }\n    }\n    fromStreamAsync(inputStream, options) {\n        return new Promise((resolve, reject) => {\n            if (!inputStream) {\n                throw new Error('Must pass in a stream containing the Google auth settings.');\n            }\n            let s = '';\n            inputStream\n                .setEncoding('utf8')\n                .on('error', reject)\n                .on('data', chunk => (s += chunk))\n                .on('end', () => {\n                try {\n                    try {\n                        const data = JSON.parse(s);\n                        const r = this._cacheClientFromJSON(data, options);\n                        return resolve(r);\n                    }\n                    catch (err) {\n                        // If we failed parsing this.keyFileName, assume that it\n                        // is a PEM or p12 certificate:\n                        if (!this.keyFilename)\n                            throw err;\n                        const client = new jwtclient_1.JWT({\n                            ...this.clientOptions,\n                            keyFile: this.keyFilename,\n                        });\n                        this.cachedCredential = client;\n                        return resolve(client);\n                    }\n                }\n                catch (err) {\n                    return reject(err);\n                }\n            });\n        });\n    }\n    /**\n     * Create a credentials instance using the given API key string.\n     * @param apiKey The API key string\n     * @param options An optional options object.\n     * @returns A JWT loaded from the key\n     */\n    fromAPIKey(apiKey, options) {\n        options = options || {};\n        const client = new jwtclient_1.JWT(options);\n        client.fromAPIKey(apiKey);\n        return client;\n    }\n    /**\n     * Determines whether the current operating system is Windows.\n     * @api private\n     */\n    _isWindows() {\n        const sys = os.platform();\n        if (sys && sys.length >= 3) {\n            if (sys.substring(0, 3).toLowerCase() === 'win') {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Run the Google Cloud SDK command that prints the default project ID\n     */\n    async getDefaultServiceProjectId() {\n        return new Promise(resolve => {\n            child_process_1.exec('gcloud config config-helper --format json', (err, stdout) => {\n                if (!err && stdout) {\n                    try {\n                        const projectId = JSON.parse(stdout).configuration.properties.core\n                            .project;\n                        resolve(projectId);\n                        return;\n                    }\n                    catch (e) {\n                        // ignore errors\n                    }\n                }\n                resolve(null);\n            });\n        });\n    }\n    /**\n     * Loads the project id from environment variables.\n     * @api private\n     */\n    getProductionProjectId() {\n        return (process.env['GCLOUD_PROJECT'] ||\n            process.env['GOOGLE_CLOUD_PROJECT'] ||\n            process.env['gcloud_project'] ||\n            process.env['google_cloud_project']);\n    }\n    /**\n     * Loads the project id from the GOOGLE_APPLICATION_CREDENTIALS json file.\n     * @api private\n     */\n    async getFileProjectId() {\n        if (this.cachedCredential) {\n            // Try to read the project ID from the cached credentials file\n            return this.cachedCredential.projectId;\n        }\n        // Ensure the projectId is loaded from the keyFile if available.\n        if (this.keyFilename) {\n            const creds = await this.getClient();\n            if (creds && creds.projectId) {\n                return creds.projectId;\n            }\n        }\n        // Try to load a credentials file and read its project ID\n        const r = await this._tryGetApplicationCredentialsFromEnvironmentVariable();\n        if (r) {\n            return r.projectId;\n        }\n        else {\n            return null;\n        }\n    }\n    /**\n     * Gets the project ID from external account client if available.\n     */\n    async getExternalAccountClientProjectId() {\n        if (!this.jsonContent || this.jsonContent.type !== baseexternalclient_1.EXTERNAL_ACCOUNT_TYPE) {\n            return null;\n        }\n        const creds = await this.getClient();\n        try {\n            return await creds.getProjectId();\n        }\n        catch (e) {\n            return null;\n        }\n    }\n    /**\n     * Gets the Compute Engine project ID if it can be inferred.\n     */\n    async getGCEProjectId() {\n        try {\n            const r = await gcpMetadata.project('project-id');\n            return r;\n        }\n        catch (e) {\n            // Ignore any errors\n            return null;\n        }\n    }\n    getCredentials(callback) {\n        if (callback) {\n            this.getCredentialsAsync().then(r => callback(null, r), callback);\n        }\n        else {\n            return this.getCredentialsAsync();\n        }\n    }\n    async getCredentialsAsync() {\n        await this.getClient();\n        if (this.jsonContent) {\n            const credential = {\n                client_email: this.jsonContent.client_email,\n                private_key: this.jsonContent.private_key,\n            };\n            return credential;\n        }\n        const isGCE = await this._checkIsGCE();\n        if (!isGCE) {\n            throw new Error('Unknown error.');\n        }\n        // For GCE, return the service account details from the metadata server\n        // NOTE: The trailing '/' at the end of service-accounts/ is very important!\n        // The GCF metadata server doesn't respect querystring params if this / is\n        // not included.\n        const data = await gcpMetadata.instance({\n            property: 'service-accounts/',\n            params: { recursive: 'true' },\n        });\n        if (!data || !data.default || !data.default.email) {\n            throw new Error('Failure from metadata server.');\n        }\n        return { client_email: data.default.email };\n    }\n    /**\n     * Automatically obtain a client based on the provided configuration.  If no\n     * options were passed, use Application Default Credentials.\n     */\n    async getClient(options) {\n        if (options) {\n            throw new Error('Passing options to getClient is forbidden in v5.0.0. Use new GoogleAuth(opts) instead.');\n        }\n        if (!this.cachedCredential) {\n            if (this.jsonContent) {\n                this._cacheClientFromJSON(this.jsonContent, this.clientOptions);\n            }\n            else if (this.keyFilename) {\n                const filePath = path.resolve(this.keyFilename);\n                const stream = fs.createReadStream(filePath);\n                await this.fromStreamAsync(stream, this.clientOptions);\n            }\n            else {\n                await this.getApplicationDefaultAsync(this.clientOptions);\n            }\n        }\n        return this.cachedCredential;\n    }\n    /**\n     * Creates a client which will fetch an ID token for authorization.\n     * @param targetAudience the audience for the fetched ID token.\n     * @returns IdTokenClient for making HTTP calls authenticated with ID tokens.\n     */\n    async getIdTokenClient(targetAudience) {\n        const client = await this.getClient();\n        if (!('fetchIdToken' in client)) {\n            throw new Error('Cannot fetch ID token in this environment, use GCE or set the GOOGLE_APPLICATION_CREDENTIALS environment variable to a service account credentials JSON file.');\n        }\n        return new idtokenclient_1.IdTokenClient({ targetAudience, idTokenProvider: client });\n    }\n    /**\n     * Automatically obtain application default credentials, and return\n     * an access token for making requests.\n     */\n    async getAccessToken() {\n        const client = await this.getClient();\n        return (await client.getAccessToken()).token;\n    }\n    /**\n     * Obtain the HTTP headers that will provide authorization for a given\n     * request.\n     */\n    async getRequestHeaders(url) {\n        const client = await this.getClient();\n        return client.getRequestHeaders(url);\n    }\n    /**\n     * Obtain credentials for a request, then attach the appropriate headers to\n     * the request options.\n     * @param opts Axios or Request options on which to attach the headers\n     */\n    async authorizeRequest(opts) {\n        opts = opts || {};\n        const url = opts.url || opts.uri;\n        const client = await this.getClient();\n        const headers = await client.getRequestHeaders(url);\n        opts.headers = Object.assign(opts.headers || {}, headers);\n        return opts;\n    }\n    /**\n     * Automatically obtain application default credentials, and make an\n     * HTTP request using the given options.\n     * @param opts Axios request options for the HTTP request.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    async request(opts) {\n        const client = await this.getClient();\n        return client.request(opts);\n    }\n    /**\n     * Determine the compute environment in which the code is running.\n     */\n    getEnv() {\n        return envDetect_1.getEnv();\n    }\n    /**\n     * Sign the given data with the current private key, or go out\n     * to the IAM API to sign it.\n     * @param data The data to be signed.\n     */\n    async sign(data) {\n        const client = await this.getClient();\n        const crypto = crypto_1.createCrypto();\n        if (client instanceof jwtclient_1.JWT && client.key) {\n            const sign = await crypto.sign(client.key, data);\n            return sign;\n        }\n        const projectId = await this.getProjectId();\n        if (!projectId) {\n            throw new Error('Cannot sign data without a project ID.');\n        }\n        const creds = await this.getCredentials();\n        if (!creds.client_email) {\n            throw new Error('Cannot sign data without `client_email`.');\n        }\n        const url = `https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/${creds.client_email}:signBlob`;\n        const res = await this.request({\n            method: 'POST',\n            url,\n            data: {\n                payload: crypto.encodeBase64StringUtf8(data),\n            },\n        });\n        return res.data.signedBlob;\n    }\n}\nexports.GoogleAuth = GoogleAuth;\n/**\n * Export DefaultTransporter as a static property of the class.\n */\nGoogleAuth.DefaultTransporter = transporters_1.DefaultTransporter;\n//# sourceMappingURL=googleauth.js.map"]},"metadata":{},"sourceType":"script"}