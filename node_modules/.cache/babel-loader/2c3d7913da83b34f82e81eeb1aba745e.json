{"ast":null,"code":"import _objectSpread from \"/Users/jacobcoles/Desktop/LT2216/Lab2and4/react-xstate-colourchanger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { send, assign } from \"xstate\";\n\nfunction say(text) {\n  return send(_context => ({\n    type: \"SPEAK\",\n    value: text\n  }));\n}\n\nfunction listen() {\n  return send('LISTEN');\n}\n\nconst grammar = {\n  \"john\": {\n    person: \"John Appleseed\"\n  },\n  \"sarah\": {\n    person: \"Sarah Swiggity\"\n  },\n  \"daddy\": {\n    person: \"The big lad\"\n  },\n  \"on monday\": {\n    day: \"Friday\"\n  },\n  \"on tuesday\": {\n    day: \"Thursday\"\n  },\n  \"on wednesday\": {\n    day: \"Friday\"\n  },\n  \"on thursday\": {\n    day: \"Thursday\"\n  },\n  \"on friday\": {\n    day: \"Friday\"\n  },\n  \"on saturday\": {\n    day: \"Thursday\"\n  },\n  \"on sunday\": {\n    day: \"Friday\"\n  },\n  \"at 8\": {\n    time: \"8:00\"\n  },\n  \"at 9\": {\n    time: \"9:00\"\n  },\n  \"at 10\": {\n    time: \"10:00\"\n  },\n  \"at 11\": {\n    time: \"11:00\"\n  },\n  \"at 12\": {\n    time: \"12:00\"\n  },\n  \"at 13\": {\n    time: \"13:00\"\n  },\n  \"at 14\": {\n    time: \"14:00\"\n  },\n  \"at 15\": {\n    time: \"15:00\"\n  },\n  \"at 16\": {\n    time: \"16:00\"\n  },\n  \"yes\": {\n    bool_val: true\n  },\n  \"yeah\": {\n    bool_val: true\n  },\n  \"ok\": {\n    bool_val: true\n  },\n  \"sure\": {\n    bool_val: true\n  },\n  \"ja\": {\n    bool_val: true\n  },\n  \"no\": {\n    bool_val: false\n  },\n  \"nope\": {\n    bool_val: false\n  },\n  \"nein\": {\n    bool_val: false\n  },\n  \"nej\": {\n    bool_val: false\n  },\n  \"appointment\": {\n    initial_function: \"appt\"\n  },\n  \"an appointment\": {\n    initial_function: \"appt\"\n  },\n  \"set up an appointment\": {\n    initial_function: \"appt\"\n  },\n  \"make an appointment\": {\n    initial_function: \"appt\"\n  },\n  \"to do\": {\n    initial_function: \"todo\"\n  },\n  \"set up a to do\": {\n    initial_function: \"todo\"\n  },\n  \"make to do\": {\n    initial_function: \"todo\"\n  },\n  \"make a to do\": {\n    initial_function: \"todo\"\n  },\n  \"timer\": {\n    initial_function: \"timer\"\n  },\n  \"make a timer\": {\n    initial_function: \"timer\"\n  },\n  \"set a timer\": {\n    initial_function: \"timer\"\n  },\n  \"set timer\": {\n    initial_function: \"timer\"\n  },\n  \"help\": {\n    help: true\n  }\n};\n\nconst nluRequestOld = myQuery => fetch(new Request(proxyurl + rasaurl, {\n  method: 'POST',\n  headers: {\n    'Origin': 'http://localhost:3000/'\n  },\n  // only required with proxy\n  body: \"{\\\"text\\\": \\\"\".concat(myQuery, \"\\\"}\")\n})).then(data => data.json());\n\nfunction promptAndAsk(prompt) {\n  return {\n    initial: 'prompt',\n    states: {\n      prompt: {\n        entry: say(prompt),\n        on: {\n          ENDSPEECH: 'ask'\n        }\n      },\n      ask: {\n        entry: [send('LISTEN'), send('MAXSPEECH', {\n          delay: 10000\n        })]\n      }\n    }\n  };\n}\n\nconst proxyurl = \"https://boiling-depths-26621.herokuapp.com/\"; //\"https://cors-anywhere.herokuapp.com/\";\n\nconst rasaurl = 'https://rasajacobcoles.herokuapp.com/model/parse';\n\nfunction nluRequest() {\n  return {\n    initial: 'request',\n    states: {\n      request: {\n        invoke: {\n          id: \"rasaquery\",\n          src: (context, event) => {\n            //~ let timeoutPromise = new Promise((resolve) => {\n            //~ let int = setTimeout(() => { resolve() }, 8000) \n            //~ })\n            //~ timeoutPromise.then(()=>{\n            //~ console.log('http timeout'); \n            //~ send('HTTP_TIMEOUT')\n            //~ })\n            return fetch(new Request(proxyurl + rasaurl, {\n              method: 'POST',\n              headers: {\n                'Origin': 'http://localhost:3000/'\n              },\n              // only required with proxy\n              body: \"{\\\"text\\\": \\\"\".concat(context.query, \"\\\"}\")\n            })).then(data => data.json());\n          },\n          onDone: [{\n            target: '.invalid_query',\n            cond: (context, event) => {\n              console.log('invalid query');\n              return event.data.intent.confidence < 0.7;\n            }\n          }, {\n            target: \".valid_query\",\n            actions: [assign((context, event) => {\n              console.log('valid query');\n              return {\n                snippet: event.data.intent.name\n              };\n            }), (context, event) => console.log(event.data)]\n          }],\n          onError: {\n            target: '#init',\n            actions: say(\"Sorry, there was an error. \")\n          }\n        },\n        states: {\n          invalid_query: {\n            entry: send('INVALID_QUERY')\n          },\n          valid_query: {\n            entry: send('VALID_QUERY')\n          }\n        }\n      }\n    }\n  };\n}\n\nconst commands = ['stop', 'help'];\nexport const dmMachine = {\n  initial: 'init',\n  id: 'init',\n  states: {\n    init: {\n      on: {\n        CLICK: 'container'\n      }\n    },\n    container: {\n      initial: 'welcome',\n      on: {\n        RECOGNISED: [{\n          target: \".stop\",\n          cond: context => context.recResult === 'stop'\n        }, {\n          target: \".help\",\n          cond: context => context.recResult === 'help'\n        }],\n        MAXSPEECH: 'init'\n      },\n      states: {\n        welcome: _objectSpread({\n          initial: \"prompt\",\n          id: \"welcome\",\n          on: {\n            RECOGNISED: {\n              target: \"query\",\n              actions: assign(context => {\n                return {\n                  query: context.recResult\n                };\n              })\n            }\n          }\n        }, promptAndAsk(\"Would you like to book an appointment, set a timer or add a to do item?\")),\n        query: _objectSpread({\n          on: {\n            INVALID_QUERY: {\n              target: '#init'\n            },\n            VALID_QUERY: {\n              target: '#init'\n            },\n            HTTP_TIMEOUT: {\n              target: '#init'\n            }\n          }\n        }, nluRequest()),\n        select_task: {\n          initial: \"select\",\n          states: {\n            select: {\n              always: [{\n                cond: context => context.snippet === \"Appointment\",\n                target: \"#who\"\n              }, {\n                cond: context => context.snippet === \"TODO\",\n                target: \"#todo\"\n              }, {\n                cond: context => context.snippet === \"Timer\",\n                target: \"#timer\"\n              }, {\n                target: \"prompt\"\n              }]\n            },\n            prompt: {\n              entry: say(\"Sorry, that isn't a valid answer\"),\n              on: {\n                ENDSPEECH: \"#welcome\"\n              }\n            }\n          }\n        },\n        todo: {\n          id: \"todo\",\n          initial: \"prompt\",\n          on: {\n            ENDSPEECH: \"#init\"\n          },\n          states: {\n            prompt: {\n              entry: say(\"You are in the to do thing.\")\n            }\n          }\n        },\n        timer: {\n          id: \"timer\",\n          initial: \"prompt\",\n          on: {\n            ENDSPEECH: \"#init\"\n          },\n          states: {\n            prompt: {\n              entry: say(\"You are in the timer thing.\")\n            }\n          }\n        },\n        who: {\n          id: \"who\",\n          initial: \"prompt\",\n          on: {\n            RECOGNISED: [{\n              cond: context => \"person\" in (grammar[context.recResult] || {}),\n              actions: assign(context => {\n                return {\n                  person: grammar[context.recResult].person\n                };\n              }),\n              target: \"day\"\n            }, {\n              target: \".nomatch\"\n            }]\n          },\n          states: {\n            prompt: {\n              entry: say(\"Who are you meeting with?\"),\n              on: {\n                ENDSPEECH: \"ask\"\n              }\n            },\n            ask: {\n              entry: listen()\n            },\n            nomatch: {\n              entry: say(\"Sorry I don't know them\"),\n              on: {\n                ENDSPEECH: \"prompt\"\n              }\n            }\n          }\n        },\n        day: {\n          initial: \"prompt\",\n          on: {\n            RECOGNISED: [{\n              cond: context => \"day\" in (grammar[context.recResult] || {}),\n              actions: assign(context => {\n                console.log(context.recResult);\n                return {\n                  day: grammar[context.recResult].day\n                };\n              }),\n              target: \"whole_day_query\"\n            }, {\n              target: \".nomatch\"\n            }]\n          },\n          states: {\n            prompt: {\n              entry: send(context => ({\n                type: \"SPEAK\",\n                value: \"OK. \".concat(context.person, \". On which day is your meeting?\")\n              })),\n              on: {\n                ENDSPEECH: \"ask\"\n              }\n            },\n            ask: {\n              entry: listen()\n            },\n            nomatch: {\n              entry: say(\"Can you please repeat that\"),\n              on: {\n                ENDSPEECH: \"ask\"\n              }\n            }\n          }\n        },\n        whole_day_query: {\n          initial: 'prompt',\n          on: {\n            RECOGNISED: [{\n              cond: context => \"bool_val\" in (grammar[context.recResult] || {}) && grammar[context.recResult].bool_val == false,\n              actions: assign(context => {\n                return {\n                  bool_val: grammar[context.recResult].bool_val\n                };\n              }),\n              target: \"meeting_time_query\"\n            }, {\n              cond: context => \"bool_val\" in (grammar[context.recResult] || {}) && grammar[context.recResult].bool_val == true,\n              actions: assign(context => {\n                return {\n                  bool_val: grammar[context.recResult].bool_val\n                };\n              }),\n              target: \"confirm_full_day\"\n            }, {\n              target: \".nomatch\"\n            }]\n          },\n          states: {\n            prompt: {\n              entry: send(context => ({\n                type: \"SPEAK\",\n                value: \"Will this meeting take the whole day?\"\n              })),\n              on: {\n                ENDSPEECH: \"ask\"\n              }\n            },\n            ask: {\n              entry: listen()\n            },\n            nomatch: {\n              entry: say(\"Can you please repeat that\"),\n              on: {\n                ENDSPEECH: \"ask\"\n              }\n            }\n          }\n        },\n        meeting_time_query: {\n          initial: \"prompt\",\n          on: {\n            RECOGNISED: [{\n              cond: context => \"time\" in (grammar[context.recResult] || {}),\n              actions: assign(context => {\n                return {\n                  time: grammar[context.recResult].time\n                };\n              }),\n              target: \"confirm_day_and_time\"\n            }, {\n              target: \".nomatch\"\n            }]\n          },\n          states: {\n            prompt: {\n              entry: send(context => ({\n                type: \"SPEAK\",\n                value: \"What time is the meeting?\"\n              })),\n              on: {\n                ENDSPEECH: \"ask\"\n              }\n            },\n            ask: {\n              entry: listen()\n            },\n            nomatch: {\n              entry: say(\"Can you please repeat that\"),\n              on: {\n                ENDSPEECH: \"ask\"\n              }\n            }\n          }\n        },\n        confirm_day_and_time: {\n          initial: \"prompt\",\n          on: {\n            RECOGNISED: [{\n              cond: context => \"bool_val\" in (grammar[context.recResult] || {}) && grammar[context.recResult].bool_val == false,\n              actions: assign(context => {\n                return {\n                  bool_val: grammar[context.recResult].bool_val\n                };\n              }),\n              target: \"#init\"\n            }, {\n              cond: context => \"bool_val\" in (grammar[context.recResult] || {}) && grammar[context.recResult].bool_val == true,\n              actions: assign(context => {\n                return {\n                  bool_val: grammar[context.recResult].bool_val\n                };\n              }),\n              target: \"finalise\"\n            }, {\n              target: \".nomatch\"\n            }]\n          },\n          states: {\n            prompt: {\n              entry: send(context => ({\n                type: \"SPEAK\",\n                value: \"Do you want to create an appointment with \".concat(context.person, \" on \").concat(context.day, \" at \").concat(context.time, \"?\")\n              })),\n              on: {\n                ENDSPEECH: \"ask\"\n              }\n            },\n            ask: {\n              entry: listen()\n            },\n            nomatch: {\n              entry: say(\"Can you please repeat that\"),\n              on: {\n                ENDSPEECH: \"ask\"\n              }\n            }\n          }\n        },\n        confirm_full_day: {\n          initial: \"prompt\",\n          on: {\n            RECOGNISED: [{\n              cond: context => \"bool_val\" in (grammar[context.recResult] || {}) && grammar[context.recResult].bool_val == false,\n              actions: assign(context => {\n                return {\n                  bool_val: grammar[context.recResult].bool_val\n                };\n              }),\n              target: \"#init\"\n            }, {\n              cond: context => \"bool_val\" in (grammar[context.recResult] || {}) && grammar[context.recResult].bool_val == true,\n              actions: assign(context => {\n                return {\n                  bool_val: grammar[context.recResult].bool_val\n                };\n              }),\n              target: \"finalise\"\n            }, {\n              target: \".nomatch\"\n            }]\n          },\n          states: {\n            prompt: {\n              entry: send(context => ({\n                type: \"SPEAK\",\n                value: \"Do you want to create an appointment with \".concat(context.person, \" on \").concat(context.day, \" for the whole day?\")\n              })),\n              on: {\n                ENDSPEECH: \"ask\"\n              }\n            },\n            ask: {\n              entry: listen()\n            },\n            nomatch: {\n              entry: say(\"Can you please repeat that\"),\n              on: {\n                ENDSPEECH: \"ask\"\n              }\n            }\n          }\n        },\n        finalise: {\n          entry: say(\"Your appointment has been created.\"),\n          on: {\n            ENDSPEECH: \"#init\"\n          }\n        },\n        say_error: {\n          target: '#init',\n          actions: say(\"Sorry, there was an error. Try again. \")\n        },\n        stop: {\n          entry: say(\"Ok, program stopped\"),\n          target: '#init'\n        },\n        help: {\n          entry: say(\"I'm supposed to help you but I won't\"),\n          target: '#init'\n        }\n      }\n    }\n  }\n}; //~ query: {\n//~ invoke: {\n//~ id: \"rasaquery\",\n//~ src: (context, event) => nluRequest(context.query),\n//~ onDone: [\n//~ {\n//~ target: \".prompt\",\n//~ cond: (context, event)=> { return ((event.data.intent.confidence) < 0.7) }\n//~ },\n//~ {\n//~ target: \"select_task\",\n//~ actions: [\n//~ assign((context, event) => { return {snippet: event.data.intent.name }}),\n//~ (context:SDSContext, event:any) => console.log(event.data),\n//~ ]\n//~ },\n//~ ],\n//~ onError: {\n//~ target: '#init',\n//~ actions: say(\"Sorry, there was an error. \")\n//~ },\n//~ },\n//~ states: {\n//~ prompt: { \n//~ entry: say(\"Sorry, I didn't get that\"),\n//~ on: { ENDSPEECH: \"#init.container.welcome\"} \n//~ },\n//~ }\n//~ },","map":{"version":3,"sources":["/Users/jacobcoles/Desktop/LT2216/Lab2and4/react-xstate-colourchanger/src/dmAppointment_rewrite.ts"],"names":["send","assign","say","text","_context","type","value","listen","grammar","person","day","time","bool_val","initial_function","help","nluRequestOld","myQuery","fetch","Request","proxyurl","rasaurl","method","headers","body","then","data","json","promptAndAsk","prompt","initial","states","entry","on","ENDSPEECH","ask","delay","nluRequest","request","invoke","id","src","context","event","query","onDone","target","cond","console","log","intent","confidence","actions","snippet","name","onError","invalid_query","valid_query","commands","dmMachine","init","CLICK","container","RECOGNISED","recResult","MAXSPEECH","welcome","INVALID_QUERY","VALID_QUERY","HTTP_TIMEOUT","select_task","select","always","todo","timer","who","nomatch","whole_day_query","meeting_time_query","confirm_day_and_time","confirm_full_day","finalise","say_error","stop"],"mappings":"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","sourcesContent":["import { MachineConfig, send, Action, assign } from \"xstate\";\n\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string, bool_val?: boolean, initial_function: string } } = {\n    \"john\": { person: \"John Appleseed\" },\n    \"sarah\": { person: \"Sarah Swiggity\" },\n    \"daddy\": { person: \"The big lad\" },\n    \"on monday\": { day: \"Friday\" },\n    \"on tuesday\": { day: \"Thursday\" },\n    \"on wednesday\": { day: \"Friday\" },\n    \"on thursday\": { day: \"Thursday\" },\n    \"on friday\": { day: \"Friday\" },\n    \"on saturday\": { day: \"Thursday\" },\n    \"on sunday\": { day: \"Friday\" },\n    \"at 8\": { time: \"8:00\" },\n    \"at 9\": { time: \"9:00\" },\n    \"at 10\": { time: \"10:00\" },\n    \"at 11\": { time: \"11:00\" },\n    \"at 12\": { time: \"12:00\" },\n    \"at 13\": { time: \"13:00\" },\n    \"at 14\": { time: \"14:00\" },\n    \"at 15\": { time: \"15:00\" },\n    \"at 16\": { time: \"16:00\" },\n    \"yes\": { bool_val: true },\n\t\"yeah\": { bool_val: true },\n\t\"ok\": { bool_val: true },\n\t\"sure\": { bool_val: true },\n\t\"ja\": { bool_val: true },\n    \"no\": { bool_val: false },\n\t\"nope\": { bool_val: false },\n\t\"nein\": { bool_val: false },\n\t\"nej\": { bool_val: false },\n\t\"appointment\": { initial_function: \"appt\" },\n\t\"an appointment\": { initial_function: \"appt\" },\n\t\"set up an appointment\": { initial_function: \"appt\" },\n\t\"make an appointment\": { initial_function: \"appt\" },\n\t\"to do\": { initial_function: \"todo\" },\n\t\"set up a to do\": { initial_function: \"todo\" },\n\t\"make to do\": { initial_function: \"todo\" },\n\t\"make a to do\": { initial_function: \"todo\" },\n\t\"timer\": { initial_function: \"timer\" },\n\t\"make a timer\": { initial_function: \"timer\" },\n\t\"set a timer\": { initial_function: \"timer\" },\n\t\"set timer\": { initial_function: \"timer\" },\n\t\"help\": { help: true },\n}\n\n\n\nconst nluRequestOld = (myQuery: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: 'POST',\n        headers: { 'Origin': 'http://localhost:3000/' }, // only required with proxy\n        body: `{\"text\": \"${myQuery}\"}`\n    }))\n        .then(data => data.json());\n\n\nfunction promptAndAsk(prompt: string): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n        initial: 'prompt',\n        states: {\n            prompt: {\n                entry: say(prompt),\n                on: { ENDSPEECH: 'ask' }\n            },\n            ask: {\n                entry: [\n\t\t\t\t\tsend('LISTEN'),\n\t\t\t\t\tsend('MAXSPEECH', { delay: 10000 })\n\t\t\t\t]\n            },\n        }\n    })\n}\n\nconst proxyurl = \"https://boiling-depths-26621.herokuapp.com/\" //\"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://rasajacobcoles.herokuapp.com/model/parse'\nfunction nluRequest(): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n        initial: 'request',\n        states: {\n            request: {\n\t\t\t\tinvoke: {\n\t\t\t\t\tid: \"rasaquery\",\n\t\t\t\t\tsrc: (context, event) => {\n\t\t\t\t\t\t\n\t\t\t\t\t\t//~ let timeoutPromise = new Promise((resolve) => {\n\t\t\t\t\t\t\t//~ let int = setTimeout(() => { resolve() }, 8000) \n\t\t\t\t\t\t//~ })\n\t\t\t\t\t    //~ timeoutPromise.then(()=>{\n\t\t\t\t\t\t\t//~ console.log('http timeout'); \n\t\t\t\t\t\t\t//~ send('HTTP_TIMEOUT')\n\t\t\t\t\t\t//~ })\n\t\t\t\t\t\t\n\t\t\t\t\t\treturn fetch(new Request(proxyurl + rasaurl, {\n\t\t\t\t        method: 'POST',\n\t\t\t\t        headers: { 'Origin': 'http://localhost:3000/' }, // only required with proxy\n\t\t\t\t        body: `{\"text\": \"${context.query}\"}`\n\t\t\t\t\t\t}))\n\t\t\t\t        .then(data => data.json());\n\t\t\t\t\t},\n\t\t\t\t\tonDone: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttarget: '.invalid_query',\n\t\t\t\t\t\t\tcond: (context, event)=> { console.log('invalid query'); return ((event.data.intent.confidence) < 0.7) }\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttarget: \".valid_query\",\n\t\t                    actions: [\n\t\t\t\t\t\t\t\tassign((context, event) => { console.log('valid query'); return {snippet: event.data.intent.name }}),\n\t\t\t\t\t\t\t\t(context:SDSContext, event:any) => console.log(event.data),\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t                ],\n\t\t\t\t\tonError: {\n\t\t\t\t\t\ttarget: '#init',\n\t\t\t\t\t\tactions: say(\"Sorry, there was an error. \")\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tstates: {\n\t\t\t\t\tinvalid_query: {\n\t\t\t\t\t\tentry: send('INVALID_QUERY'),\n\t\t\t\t\t},\n\t\t\t\t\tvalid_query: {\n\t\t\t\t\t\tentry: send('VALID_QUERY'),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t}\n\t\t}}\n\t\t)\n\t}\n\n\n\nconst commands = ['stop', 'help']\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'init',\n    id: 'init',\n    states: {\n        init: {\n            on: {\n                CLICK: 'container'\n            }\n        },\n        container: {\n\t\t\tinitial: 'welcome',\n\t\t\ton: {\n\t\t\t\tRECOGNISED: \n\t\t\t\t\t[\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttarget: \".stop\",\n\t\t\t\t\t\t\tcond: (context) => context.recResult === 'stop' ,\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttarget: \".help\",\n\t\t\t\t\t\t\tcond: (context) => context.recResult === 'help' ,\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\tMAXSPEECH: 'init',\n\t\t\t},\n\t\t\tstates: {\n\t\t\t\twelcome:{\n\t\t\t\t\tinitial: \"prompt\",\n\t\t\t\t\tid: \"welcome\",\n\t\t\t\t\ton: {\n\t\t\t\t\t\tRECOGNISED: {\n\t\t\t\t\t\t\ttarget: \"query\",\n\t\t\t\t\t\t\tactions: assign((context) => { return { query: context.recResult } })\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t...promptAndAsk(\"Would you like to book an appointment, set a timer or add a to do item?\")\n\t\t\t\t},\n\t\t\t\tquery: {\n\t\t\t\t\ton: {\n\t\t\t\t\t\tINVALID_QUERY: {\n\t\t\t\t\t\t\ttarget: '#init',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tVALID_QUERY: {\n\t\t\t\t\t\t\ttarget: '#init',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tHTTP_TIMEOUT: {\n\t\t\t\t\t\t\ttarget: '#init',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t...nluRequest()\n\t\t\t\t},\n\t\t\t\tselect_task: {\n\t\t\t\t\tinitial: \"select\",\n\t\t\t\t\tstates: {\n\t\t\t\t\t\tselect: {\n\t\t\t\t\t\t\talways: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tcond: (context) => context.snippet ===  \"Appointment\",\n\t\t\t\t\t\t\t\t\ttarget: \"#who\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tcond: (context) => context.snippet  ===  \"TODO\",\n\t\t\t\t\t\t\t\t\ttarget: \"#todo\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tcond: (context) => context.snippet  ===  \"Timer\",\n\t\t\t\t\t\t\t\t\ttarget: \"#timer\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttarget: \"prompt\",\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t\t\tprompt: { \n\t\t\t\t\t\t\tentry: say(\"Sorry, that isn't a valid answer\"),\n\t\t\t\t\t\t\ton: { ENDSPEECH: \"#welcome\"} \n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\ttodo: {\n\t\t            id: \"todo\",\n\t\t\t\t\tinitial: \"prompt\",\n\t\t\t\t\ton: {\n\t\t\t\t\t\tENDSPEECH: \"#init\"\n\t\t\t\t\t},\n\t\t\t\t\tstates: {\n\t\t\t\t\t\tprompt: {\n\t\t\t\t\t\t\tentry: say(\"You are in the to do thing.\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\ttimer: {\n\t\t            id: \"timer\",\n\t\t\t\t\tinitial: \"prompt\",\n\t\t\t\t\ton: {\n\t\t\t\t\t\tENDSPEECH: \"#init\"\n\t\t\t\t\t},\n\t\t\t\t\tstates: {\n\t\t\t\t\t\tprompt: {\n\t\t\t\t\t\t\tentry: say(\"You are in the timer thing.\")\n\t\t\t\t\t\t},\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t        who: {\n\t\t            id: \"who\",\n\t\t            initial: \"prompt\",\n\t\t            on: {\n\t\t                RECOGNISED: [{\n\t\t                    cond: (context) => \"person\" in (grammar[context.recResult] || {}),\n\t\t                    actions: assign((context) => { return { person: grammar[context.recResult].person }}),\n\t\t                    target: \"day\"\n\t\t                },\n\t\t                { target: \".nomatch\" }\n\t\t                ]\n\t\t            },\n\t\t            states: {\n\t\t                prompt: {\n\t\t                    entry: say(\"Who are you meeting with?\"),\n\t\t                    on: { ENDSPEECH: \"ask\" }\n\t\t                },\n\t\t                ask: {\n\t\t                    entry: listen()\n\t\t                },\n\t\t                nomatch: {\n\t\t                    entry: say(\"Sorry I don't know them\"),\n\t\t                    on: { ENDSPEECH: \"prompt\" }\n\t\t                }\n\t\t            }\n\t\t        },\n\t\t        day: {\n\t\t            initial: \"prompt\",\n\t\t            on: {\n\t\t                RECOGNISED: [{\n\t\t                    cond: (context) => \"day\" in (grammar[context.recResult] || {}),\n\t\t                    actions: assign((context) => { \n\t\t\t\t\t\t\t\tconsole.log(context.recResult)\n\t\t\t\t\t\t\t\treturn { day: grammar[context.recResult].day } }),\n\t\t                    target: \"whole_day_query\"\n\t\t\n\t\t                },\n\t\t                { target: \".nomatch\" }]\n\t\t            },\n\t\t            states: {\n\t\t                prompt: {\n\t\t                    entry: send((context) => ({\n\t\t                        type: \"SPEAK\",\n\t\t                        value: `OK. ${context.person}. On which day is your meeting?`\n\t\t                    })),\n\t\t                    on: { ENDSPEECH: \"ask\" }\n\t\t                },\n\t\t                ask: {\n\t\t                    entry: listen()\n\t\t                },\n\t\t                nomatch: {\n\t\t                    entry: say(\"Can you please repeat that\"),\n\t\t                    on: { ENDSPEECH: \"ask\" }\n\t\t                }\n\t\t            }\n\t\t        },\n\t\t        whole_day_query: {\n\t\t\t\t\tinitial: 'prompt',\n\t\t            on: {\n\t\t                RECOGNISED: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcond: (context) => \"bool_val\" in (grammar[context.recResult] || {}) && (grammar[context.recResult].bool_val == false),\n\t\t                    actions: assign((context) => { return { bool_val: grammar[context.recResult].bool_val } }),\n\t\t                    target: \"meeting_time_query\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcond: (context) => \"bool_val\" in (grammar[context.recResult] || {}) && (grammar[context.recResult].bool_val == true),\n\t\t                    actions: assign((context) => { return { bool_val: grammar[context.recResult].bool_val } }),\n\t\t                    target: \"confirm_full_day\"\n\t\t\t\t\t\t},\n\t\t                { target: \".nomatch\" }\n\t\t                ]\n\t\t            },\n\t\t            states: {\n\t\t                prompt: {\n\t\t                    entry: send((context) => ({\n\t\t                        type: \"SPEAK\",\n\t\t                        value: `Will this meeting take the whole day?`\n\t\t                    })),\n\t\t                    on: { ENDSPEECH: \"ask\" }\n\t\t                },\n\t\t                ask: {\n\t\t                    entry: listen()\n\t\t                },\n\t\t                nomatch: {\n\t\t                    entry: say(\"Can you please repeat that\"),\n\t\t                    on: { ENDSPEECH: \"ask\" }\n\t\t                }\n\t\t            }\n\t\t        },\n\t\t        meeting_time_query: {\n\t\t            initial: \"prompt\",\n\t\t            on: {\n\t\t                RECOGNISED: [{\n\t\t                    cond: (context) => \"time\" in (grammar[context.recResult] || {}),\n\t\t                    actions: assign((context) => { return { time: grammar[context.recResult].time } }),\n\t\t                    target: \"confirm_day_and_time\"\n\t\t\n\t\t                },\n\t\t                { target: \".nomatch\" }]\n\t\t            },\n\t\t            states: {\n\t\t                prompt: {\n\t\t                    entry: send((context) => ({\n\t\t                        type: \"SPEAK\",\n\t\t                        value: `What time is the meeting?`\n\t\t                    })),\n\t\t                    on: { ENDSPEECH: \"ask\" }\n\t\t                },\n\t\t                ask: {\n\t\t                    entry: listen()\n\t\t                },\n\t\t                nomatch: {\n\t\t                    entry: say(\"Can you please repeat that\"),\n\t\t                    on: { ENDSPEECH: \"ask\" }\n\t\t                },\n\t\t            }\n\t\t        },\n\t\t\t\tconfirm_day_and_time: {\n\t\t            initial: \"prompt\",\n\t\t            on: {\n\t\t                RECOGNISED: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcond: (context) => \"bool_val\" in (grammar[context.recResult] || {}) && (grammar[context.recResult].bool_val == false),\n\t\t                    actions: assign((context) => { return { bool_val: grammar[context.recResult].bool_val } }),\n\t\t                    target: \"#init\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcond: (context) => \"bool_val\" in (grammar[context.recResult] || {}) && (grammar[context.recResult].bool_val == true),\n\t\t                    actions: assign((context) => { return { bool_val: grammar[context.recResult].bool_val } }),\n\t\t                    target: \"finalise\"\n\t\t\t\t\t\t},\n\t\t                { target: \".nomatch\" }]\n\t\t            },\n\t\t            states: {\n\t\t                prompt: {\n\t\t                    entry: send((context) => ({\n\t\t                        type: \"SPEAK\",\n\t\t                        value: `Do you want to create an appointment with ${context.person} on ${context.day} at ${context.time}?`\n\t\t                    })),\n\t\t                    on: { ENDSPEECH: \"ask\" }\n\t\t                },\n\t\t                ask: {\n\t\t                    entry: listen()\n\t\t                },\n\t\t                nomatch: {\n\t\t                    entry: say(\"Can you please repeat that\"),\n\t\t                    on: { ENDSPEECH: \"ask\" }\n\t\t                },\n\t\t            }\n\t\t        },\n\t\t\t\tconfirm_full_day: {\n\t\t            initial: \"prompt\",\n\t\t            on: {\n\t\t                RECOGNISED: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcond: (context) => \"bool_val\" in (grammar[context.recResult] || {}) && (grammar[context.recResult].bool_val == false),\n\t\t                    actions: assign((context) => { return { bool_val: grammar[context.recResult].bool_val } }),\n\t\t                    target: \"#init\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcond: (context) => \"bool_val\" in (grammar[context.recResult] || {}) && (grammar[context.recResult].bool_val == true),\n\t\t                    actions: assign((context) => { return { bool_val: grammar[context.recResult].bool_val } }),\n\t\t                    target: \"finalise\"\n\t\t\t\t\t\t},\n\t\t                { target: \".nomatch\" }]\n\t\t            },\n\t\t            states: {\n\t\t                prompt: {\n\t\t                    entry: send((context) => ({\n\t\t                        type: \"SPEAK\",\n\t\t                        value: `Do you want to create an appointment with ${context.person} on ${context.day} for the whole day?`\n\t\t                    })),\n\t\t                    on: { ENDSPEECH: \"ask\" }\n\t\t                },\n\t\t                ask: {\n\t\t                    entry: listen()\n\t\t                },\n\t\t                nomatch: {\n\t\t                    entry: say(\"Can you please repeat that\"),\n\t\t                    on: { ENDSPEECH: \"ask\" }\n\t\t                },\n\t\t            }\n\t\t        },\n\t\t\t\tfinalise: {\n\t\t\t\t\tentry: say(\"Your appointment has been created.\"),\n\t\t\t\t\ton: { ENDSPEECH: \"#init\" }\n\t\t\t\t},\n\t\t\t\tsay_error: {\n\t\t\t\t\ttarget: '#init',\n\t\t\t\t\tactions: say(\"Sorry, there was an error. Try again. \")\n\t\t\t\t},\n\t\t\t\tstop: {\n\t\t\t\t\tentry: say(\"Ok, program stopped\"),\n\t\t\t\t\ttarget: '#init'\n\t\t\t\t},\n\t\t\t\thelp: {\n\t\t\t\t\tentry: say(\"I'm supposed to help you but I won't\"),\n\t\t\t\t\ttarget: '#init'\n\t\t\t\t}\n\t\t\t},\n\t\t}\n    }\n})\n\n\n\n\n\n\t\t\t\t//~ query: {\n\t\t\t\t\t//~ invoke: {\n\t\t\t\t\t\t//~ id: \"rasaquery\",\n\t\t\t\t\t\t//~ src: (context, event) => nluRequest(context.query),\n\t\t\t\t\t\t//~ onDone: [\n\t\t\t\t\t\t\t//~ {\n\t\t\t\t\t\t\t\t//~ target: \".prompt\",\n\t\t\t\t\t\t\t\t//~ cond: (context, event)=> { return ((event.data.intent.confidence) < 0.7) }\n\t\t\t\t\t\t\t//~ },\n\t\t\t\t\t\t\t//~ {\n\t\t\t\t\t\t\t\t//~ target: \"select_task\",\n\t\t\t                    //~ actions: [\n\t\t\t\t\t\t\t\t\t//~ assign((context, event) => { return {snippet: event.data.intent.name }}),\n\t\t\t\t\t\t\t\t\t//~ (context:SDSContext, event:any) => console.log(event.data),\n\t\t\t\t\t\t\t\t//~ ]\n\t\t\t\t\t\t\t//~ },\n\t\t                //~ ],\n\t\t\t\t\t\t//~ onError: {\n\t\t\t\t\t\t\t//~ target: '#init',\n\t\t\t\t\t\t\t//~ actions: say(\"Sorry, there was an error. \")\n\t\t\t\t\t\t//~ },\n\t\t\t\t\t//~ },\n\t\t\t\t\t//~ states: {\n\t\t                //~ prompt: { \n\t\t\t\t\t\t\t//~ entry: say(\"Sorry, I didn't get that\"),\n\t\t\t\t\t\t\t//~ on: { ENDSPEECH: \"#init.container.welcome\"} \n\t\t\t\t\t\t//~ },\n\t\t            //~ }\n\t\t\t\t//~ },\n\n\n\n"]},"metadata":{},"sourceType":"module"}