{"ast":null,"code":"import _objectSpread from \"/Users/jacobcoles/Desktop/LT2216/Lab2and4/react-xstate-colourchanger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { send, assign } from \"xstate\"; // SRGS parser and example (logs the results to console on page load)\n\nimport { loadGrammar } from './runparser';\nimport { parse } from './chartparser';\nimport { grammar } from './grammars/quotesGrammar'; //'./grammars/pizzaGrammar'\n\nconst gram = loadGrammar(grammar);\nconst input = \"please turn on the lights\";\nconst prs = parse(input.split(/\\s+/), gram);\nconst result = prs.resultsForRule(gram.$root)[0];\nconsole.log(result);\nconst sayColour = send(context => ({\n  type: \"SPEAK\",\n  value: \"Repainting to \".concat(context.recResult)\n}));\n\nfunction say(text) {\n  return send(_context => ({\n    type: \"SPEAK\",\n    value: text\n  }));\n}\n\nfunction parse_text(input_text) {\n  const gram = loadGrammar(grammar);\n  const prs = parse(input_text.toLowerCase().split(/\\s+/), gram);\n  const result = prs.resultsForRule(gram.$root)[0];\n  return result;\n}\n\nfunction promptAndAsk(prompt) {\n  return {\n    initial: 'prompt',\n    states: {\n      prompt: {\n        entry: say(prompt),\n        on: {\n          ENDSPEECH: 'ask'\n        }\n      },\n      ask: {\n        entry: send('LISTEN')\n      }\n    }\n  };\n}\n\nexport const dmMachine = {\n  initial: 'init',\n  id: 'init',\n  states: {\n    init: {\n      on: {\n        CLICK: 'ask'\n      }\n    },\n    ask: _objectSpread({\n      id: 'ask',\n      on: {\n        RECOGNISED: [{\n          target: 'select_task',\n          actions: assign(context => {\n            let queryResp = parse_text(context.recResult);\n            return {\n              queryResp\n            };\n          })\n        }]\n      }\n    }, promptAndAsk(\"What would you like me to do?\")),\n    select_task: {\n      id: 'select_task',\n      always: [{\n        cond: context => context.queryResp.object === \"light\",\n        target: \"light\"\n      }, {\n        cond: context => context.queryResp.object === \"heat\",\n        target: \"heat\"\n      }, {\n        cond: context => context.queryResp.object === \"window\",\n        target: \"window\"\n      }, {\n        cond: context => context.queryResp.object === \"door\",\n        target: \"door\"\n      }, {\n        target: \".prompt\"\n      }],\n      states: {\n        prompt: {\n          entry: say(\"Sorry, that isn't a valid answer\"),\n          on: {\n            ENDSPEECH: \"#init\"\n          }\n        }\n      }\n    },\n    light: _objectSpread({}, promptAndAsk(\"What would you like me to do?\")),\n    heat: _objectSpread({}, promptAndAsk(\"What would you like me to do?\")),\n    window: _objectSpread({}, promptAndAsk(\"What would you like me to do?\")),\n    door: _objectSpread({}, promptAndAsk(\"What would you like me to do?\"))\n  }\n};","map":{"version":3,"sources":["/Users/jacobcoles/Desktop/LT2216/Lab2and4/react-xstate-colourchanger/src/dmSmartHome_rewrite.ts"],"names":["send","assign","loadGrammar","parse","grammar","gram","input","prs","split","result","resultsForRule","$root","console","log","sayColour","context","type","value","recResult","say","text","_context","parse_text","input_text","toLowerCase","promptAndAsk","prompt","initial","states","entry","on","ENDSPEECH","ask","dmMachine","id","init","CLICK","RECOGNISED","target","actions","queryResp","select_task","always","cond","object","light","heat","window","door"],"mappings":"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","sourcesContent":["import { MachineConfig, send, Action, assign } from \"xstate\";\n\n// SRGS parser and example (logs the results to console on page load)\nimport { loadGrammar } from './runparser'\nimport { parse } from './chartparser'\nimport { grammar } from './grammars/quotesGrammar' //'./grammars/pizzaGrammar'\n\nconst gram = loadGrammar(grammar)\nconst input = \"please turn on the lights\"\nconst prs = parse(input.split(/\\s+/), gram)\nconst result = prs.resultsForRule(gram.$root)[0]\n\nconsole.log(result)\n\nconst sayColour: Action<SDSContext, SDSEvent> = send((context: SDSContext) => ({\n    type: \"SPEAK\", value: `Repainting to ${context.recResult}`\n}))\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction parse_text(input_text: string): Action<SDSContext, SDSEvent> {\n\tconst gram = loadGrammar(grammar)\n\tconst prs = parse(input_text.toLowerCase().split(/\\s+/), gram)\n\tconst result = prs.resultsForRule(gram.$root)[0]\n\treturn result\n}\n\nfunction promptAndAsk(prompt: string): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n        initial: 'prompt',\n        states: {\n            prompt: {\n                entry: say(prompt),\n                on: { ENDSPEECH: 'ask' }\n            },\n            ask: {\n                entry: send('LISTEN'),\n            },\n        }\n    })\n}\n\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'init',\n\tid: 'init',\n    states: {\n        init: {\n            on: {\n                CLICK: 'ask'\n            }\n        },\n\t\task: {\n\t\t\tid: 'ask',\n\t\t\ton: {\t\n\t\t\t\tRECOGNISED: [\n                    { \n\t\t\t\t\t\ttarget: 'select_task',\n\t\t\t\t\t\tactions: assign((context) => {\n\t\t\t\t\t\t\tlet queryResp = parse_text(context.recResult)\n\t\t\t\t\t\t\treturn { queryResp }\n\t\t\t\t\t\t})\n\t\t\t\t\t},\n\t            ]\n\t        },\n\t        ...promptAndAsk(\"What would you like me to do?\")\n\t\t},\n\t\tselect_task: {\n\t\t\tid: 'select_task',\n\t\t\talways: [\n\t\t\t\t{\n\t\t\t\t\tcond: (context) => (context.queryResp.object ===  \"light\"),\n\t\t\t\t\ttarget: \"light\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tcond: (context) => (context.queryResp.object ===  \"heat\"),\n\t\t\t\t\ttarget: \"heat\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tcond: (context) => (context.queryResp.object ===  \"window\"),\n\t\t\t\t\ttarget: \"window\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tcond: (context) => (context.queryResp.object ===  \"door\"),\n\t\t\t\t\ttarget: \"door\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttarget: \".prompt\"\n\t\t\t\t}\n\t\t\t],\n\t\t\tstates: {\n\t\t\t\tprompt: { \n\t\t\t\t\tentry: say(\"Sorry, that isn't a valid answer\"),\n\t\t\t\t\ton: { ENDSPEECH: \"#init\"} \n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tlight: {\n\t\t\t...promptAndAsk(\"What would you like me to do?\")\n\t\t},\n\t\theat: {\n\t\t\t...promptAndAsk(\"What would you like me to do?\")\n\t\t},\n\t\twindow: {\n\t\t\t...promptAndAsk(\"What would you like me to do?\")\n\t\t},\n\t\tdoor: {\n\t\t\t...promptAndAsk(\"What would you like me to do?\")\n\t\t},\n\t}\n\n})\n"]},"metadata":{},"sourceType":"module"}