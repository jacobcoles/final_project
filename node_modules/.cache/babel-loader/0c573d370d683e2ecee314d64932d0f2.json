{"ast":null,"code":"import _objectSpread from \"/Users/jacobcoles/Desktop/LT2216/Lab2and4/react-xstate-colourchanger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { actions, assign } from \"xstate\";\nconst send = actions.send,\n      cancel = actions.cancel;\n\nfunction say(text) {\n  return send(_context => ({\n    type: \"SPEAK\",\n    value: text\n  }));\n}\n\nfunction listen() {\n  return send('LISTEN');\n}\n\nconst grammar = {\n  \"john\": {\n    person: \"John Appleseed\"\n  },\n  \"sarah\": {\n    person: \"Sarah Swiggity\"\n  },\n  \"daddy\": {\n    person: \"The big lad\"\n  },\n  \"on monday\": {\n    day: \"Friday\"\n  },\n  \"on tuesday\": {\n    day: \"Thursday\"\n  },\n  \"on wednesday\": {\n    day: \"Friday\"\n  },\n  \"on thursday\": {\n    day: \"Thursday\"\n  },\n  \"on friday\": {\n    day: \"Friday\"\n  },\n  \"on saturday\": {\n    day: \"Thursday\"\n  },\n  \"on sunday\": {\n    day: \"Friday\"\n  },\n  \"at 8\": {\n    time: \"8:00\"\n  },\n  \"at 9\": {\n    time: \"9:00\"\n  },\n  \"at 10\": {\n    time: \"10:00\"\n  },\n  \"at 11\": {\n    time: \"11:00\"\n  },\n  \"at 12\": {\n    time: \"12:00\"\n  },\n  \"at 13\": {\n    time: \"13:00\"\n  },\n  \"at 14\": {\n    time: \"14:00\"\n  },\n  \"at 15\": {\n    time: \"15:00\"\n  },\n  \"at 16\": {\n    time: \"16:00\"\n  },\n  \"yes\": {\n    bool_val: true\n  },\n  \"yeah\": {\n    bool_val: true\n  },\n  \"ok\": {\n    bool_val: true\n  },\n  \"sure\": {\n    bool_val: true\n  },\n  \"ja\": {\n    bool_val: true\n  },\n  \"no\": {\n    bool_val: false\n  },\n  \"nope\": {\n    bool_val: false\n  },\n  \"nein\": {\n    bool_val: false\n  },\n  \"nej\": {\n    bool_val: false\n  },\n  \"appointment\": {\n    initial_function: \"appt\"\n  },\n  \"an appointment\": {\n    initial_function: \"appt\"\n  },\n  \"set up an appointment\": {\n    initial_function: \"appt\"\n  },\n  \"make an appointment\": {\n    initial_function: \"appt\"\n  },\n  \"to do\": {\n    initial_function: \"todo\"\n  },\n  \"set up a to do\": {\n    initial_function: \"todo\"\n  },\n  \"make to do\": {\n    initial_function: \"todo\"\n  },\n  \"make a to do\": {\n    initial_function: \"todo\"\n  },\n  \"timer\": {\n    initial_function: \"timer\"\n  },\n  \"make a timer\": {\n    initial_function: \"timer\"\n  },\n  \"set a timer\": {\n    initial_function: \"timer\"\n  },\n  \"set timer\": {\n    initial_function: \"timer\"\n  }\n};\n\nfunction promptAndAsk(prompt) {\n  return {\n    initial: 'prompt',\n    states: {\n      prompt: {\n        entry: say(prompt),\n        on: {\n          ENDSPEECH: 'ask'\n        }\n      },\n      ask: {\n        entry: [send('LISTEN'), send('MAXSPEECH', {\n          delay: 5000,\n          id: 'maxspeech_cancel'\n        })]\n      }\n    }\n  };\n}\n\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\"; // can try instead \"https://boiling-depths-26621.herokuapp.com/\"\n\nconst rasaurl = 'https://rasajacobcoles.herokuapp.com/model/parse';\n\nfunction nluRequest() {\n  return {\n    initial: 'http_timeout',\n    invoke: {\n      id: \"rasaquery\",\n      src: (context, event) => {\n        return fetch(new Request(proxyurl + rasaurl, {\n          method: 'POST',\n          headers: {\n            'Origin': 'http://localhost:3000/'\n          },\n          // only required with proxy\n          body: \"{\\\"text\\\": \\\"\".concat(context.query, \"\\\"}\")\n        })).then(data => data.json());\n      },\n      onDone: [{\n        target: '.invalid_query',\n        cond: (context, event) => {\n          return event.data.intent.confidence < 0.7;\n        }\n      }, {\n        target: '.valid_query',\n        actions: [assign((context, event) => {\n          return {\n            snippet: event.data.intent.name\n          };\n        }), (context, event) => console.log(event.data)]\n      }],\n      onError: {\n        target: '#root.dm',\n        actions: say(\"Sorry, there was an error. \")\n      }\n    },\n    states: {\n      http_timeout: {\n        src: (context, event) => {\n          return new Promise(resolve => {\n            setTimeout(() => {\n              resolve();\n            }, 4000);\n          });\n        },\n        onDone: send('HTTP_TIMEOUT')\n      },\n      invalid_query: {\n        entry: send('INVALID_QUERY')\n      },\n      valid_query: {\n        entry: send('VALID_QUERY')\n      }\n    }\n  };\n}\n\nconst commands = ['stop', 'help'];\nexport const dmMachine = {\n  initial: 'main',\n  id: 'init',\n  on: {\n    MAXSPEECH: '.maxspeech',\n    RECOGNISED: [{\n      target: \".stop\",\n      cond: context => context.recResult === 'stop'\n    }, {\n      target: \".help\",\n      cond: context => context.recResult === 'help'\n    }]\n  },\n  states: {\n    //initial: 'idle',\n    main: {\n      on: {\n        CLICK: '.begin'\n      },\n      states: {\n        hist: {\n          type: 'history'\n        },\n        begin: {\n          initial: \"prompt\",\n          id: \"welcome\",\n          on: {\n            RECOGNISED: {\n              target: \"query\",\n              actions: assign(context => {\n                return {\n                  query: context.recResult\n                };\n              }),\n              cond: context => !commands.includes(context.recResult)\n            }\n          },\n          states: {\n            prompt: _objectSpread({}, promptAndAsk(\"Would you like to book an appointment, set a timer or add a to do item?\"))\n          }\n        },\n        query: {\n          initial: 'rasa_query',\n          on: {\n            RECOGNISED: {\n              cond: context => !commands.includes(context.recResult),\n              target: '.rasa_query',\n              actions: assign(context => {\n                return {\n                  query: context.recResult\n                };\n              })\n            },\n            INVALID_QUERY: {\n              target: '.invalid_query'\n            },\n            VALID_QUERY: {\n              target: 'select_task'\n            },\n            HTTP_TIMEOUT: {\n              target: '.http_timeout'\n            }\n          },\n          states: {\n            rasa_query: _objectSpread({}, nluRequest()),\n            invalid_query: _objectSpread({}, promptAndAsk(\"Sorry, I don't understand, please say that again\")),\n            http_timeout: _objectSpread({}, promptAndAsk(\"Sorry, the rasa server isnt responding right now. Try again.\"))\n          }\n        },\n        select_task: {\n          initial: \"select\",\n          states: {\n            select: {\n              always: [{\n                cond: context => context.snippet === \"Appointment\",\n                target: \"#who\"\n              }, {\n                cond: context => context.snippet === \"TODO\",\n                target: \"#todo\"\n              }, {\n                cond: context => context.snippet === \"Timer\",\n                target: \"#timer\"\n              }, {\n                cond: context => !commands.includes(context.recResult),\n                target: \"prompt\"\n              }]\n            },\n            prompt: {\n              entry: say(\"Sorry, that isn't a valid answer\"),\n              on: {\n                ENDSPEECH: \"#welcome\"\n              }\n            }\n          }\n        },\n        todo: {\n          id: \"todo\",\n          initial: \"prompt\",\n          on: {\n            ENDSPEECH: \"#init\"\n          },\n          states: {\n            prompt: {\n              entry: say(\"You are in the to do thing.\")\n            }\n          }\n        },\n        timer: {\n          id: \"timer\",\n          initial: \"prompt\",\n          on: {\n            ENDSPEECH: \"#init\"\n          },\n          states: {\n            prompt: {\n              entry: say(\"You are in the timer thing.\")\n            }\n          }\n        },\n        who: {\n          id: \"who\",\n          initial: \"prompt\",\n          on: {\n            RECOGNISED: [{\n              cond: context => \"person\" in (grammar[context.recResult] || {}),\n              actions: assign(context => {\n                return {\n                  person: grammar[context.recResult].person\n                };\n              }),\n              target: \"day\"\n            }, {\n              target: \".nomatch\",\n              cond: context => !commands.includes(context.recResult)\n            }]\n          },\n          states: {\n            prompt: _objectSpread({}, promptAndAsk(\"Who are you meeting with?\")),\n            nomatch: {\n              entry: say(\"Sorry I don't know them\"),\n              on: {\n                ENDSPEECH: \"prompt\"\n              }\n            }\n          }\n        },\n        day: {\n          initial: \"prompt\",\n          on: {\n            RECOGNISED: [{\n              cond: context => \"day\" in (grammar[context.recResult] || {}),\n              actions: assign(context => {\n                return {\n                  day: grammar[context.recResult].day\n                };\n              }),\n              target: \"whole_day_query\"\n            }, {\n              target: \".nomatch\",\n              cond: context => !commands.includes(context.recResult)\n            }]\n          },\n          states: {\n            prompt: {\n              entry: send(context => ({\n                type: \"SPEAK\",\n                value: \"OK. \".concat(context.person, \". On which day is your meeting?\")\n              })),\n              on: {\n                ENDSPEECH: \"ask\"\n              }\n            },\n            ask: {\n              entry: listen()\n            },\n            nomatch: {\n              entry: say(\"Can you please repeat that\"),\n              on: {\n                ENDSPEECH: \"ask\"\n              }\n            }\n          }\n        },\n        whole_day_query: {\n          initial: \"prompt\",\n          on: {\n            RECOGNISED: [{\n              cond: context => \"bool_val\" in (grammar[context.recResult] || {}) && grammar[context.recResult].bool_val == false,\n              actions: assign(context => {\n                return {\n                  bool_val: grammar[context.recResult].bool_val\n                };\n              }),\n              target: \"meeting_time_query\"\n            }, {\n              cond: context => \"bool_val\" in (grammar[context.recResult] || {}) && grammar[context.recResult].bool_val == true,\n              actions: assign(context => {\n                return {\n                  bool_val: grammar[context.recResult].bool_val\n                };\n              }),\n              target: \"confirm_full_day\"\n            }, {\n              target: \".nomatch\",\n              cond: context => !commands.includes(context.recResult)\n            }]\n          },\n          states: {\n            prompt: {\n              entry: send(context => ({\n                type: \"SPEAK\",\n                value: \"Will the meeting take the whole day?\"\n              })),\n              on: {\n                ENDSPEECH: \"ask\"\n              }\n            },\n            ask: {\n              entry: listen()\n            },\n            nomatch: {\n              entry: say(\"Can you please repeat that\"),\n              on: {\n                ENDSPEECH: \"ask\"\n              }\n            }\n          }\n        },\n        meeting_time_query: {\n          initial: \"prompt\",\n          on: {\n            RECOGNISED: [{\n              cond: context => \"time\" in (grammar[context.recResult] || {}),\n              actions: assign(context => {\n                return {\n                  time: grammar[context.recResult].time\n                };\n              }),\n              target: \"confirm_day_and_time\"\n            }, {\n              target: \".nomatch\",\n              cond: context => !commands.includes(context.recResult)\n            }]\n          },\n          states: {\n            prompt: {\n              entry: send(context => ({\n                type: \"SPEAK\",\n                value: \"What time is the meeting?\"\n              })),\n              on: {\n                ENDSPEECH: \"ask\"\n              }\n            },\n            ask: {\n              entry: listen()\n            },\n            nomatch: {\n              entry: say(\"Can you please repeat that\"),\n              on: {\n                ENDSPEECH: \"ask\"\n              }\n            }\n          }\n        },\n        confirm_day_and_time: {\n          initial: \"prompt\",\n          on: {\n            RECOGNISED: [{\n              cond: context => \"bool_val\" in (grammar[context.recResult] || {}) && grammar[context.recResult].bool_val == false,\n              actions: assign(context => {\n                return {\n                  bool_val: grammar[context.recResult].bool_val\n                };\n              }),\n              target: \"#init\"\n            }, {\n              cond: context => \"bool_val\" in (grammar[context.recResult] || {}) && grammar[context.recResult].bool_val == true,\n              actions: assign(context => {\n                return {\n                  bool_val: grammar[context.recResult].bool_val\n                };\n              }),\n              target: \"finalise\"\n            }, {\n              target: \".nomatch\",\n              cond: context => !commands.includes(context.recResult)\n            }]\n          },\n          states: {\n            prompt: {\n              entry: send(context => ({\n                type: \"SPEAK\",\n                value: \"Do you want to create an appointment with \".concat(context.person, \" on \").concat(context.day, \" at \").concat(context.time, \"?\")\n              })),\n              on: {\n                ENDSPEECH: \"ask\"\n              }\n            },\n            ask: {\n              entry: listen()\n            },\n            nomatch: {\n              entry: say(\"Can you please repeat that\"),\n              on: {\n                ENDSPEECH: \"ask\"\n              }\n            }\n          }\n        },\n        confirm_full_day: {\n          initial: \"prompt\",\n          on: {\n            RECOGNISED: [{\n              cond: context => \"bool_val\" in (grammar[context.recResult] || {}) && grammar[context.recResult].bool_val == false,\n              actions: assign(context => {\n                return {\n                  bool_val: grammar[context.recResult].bool_val\n                };\n              }),\n              target: \"#init\"\n            }, {\n              cond: context => \"bool_val\" in (grammar[context.recResult] || {}) && grammar[context.recResult].bool_val == true,\n              actions: assign(context => {\n                return {\n                  bool_val: grammar[context.recResult].bool_val\n                };\n              }),\n              target: \"finalise\"\n            }, {\n              target: \".nomatch\",\n              cond: context => !commands.includes(context.recResult)\n            }]\n          },\n          states: {\n            prompt: {\n              entry: send(context => ({\n                type: \"SPEAK\",\n                value: \"Do you want to create an appointment with \".concat(context.person, \" on \").concat(context.day, \" for the whole day?\")\n              })),\n              on: {\n                ENDSPEECH: \"ask\"\n              }\n            },\n            ask: {\n              entry: listen()\n            },\n            nomatch: {\n              entry: say(\"Can you please repeat that\"),\n              on: {\n                ENDSPEECH: \"ask\"\n              }\n            }\n          }\n        },\n        finalise: {\n          entry: say(\"Your appointment has been created.\"),\n          on: {\n            ENDSPEECH: \"#init.main\"\n          }\n        },\n        say_error: {\n          target: 'main',\n          actions: say(\"Sorry, there was an error. \")\n        }\n      }\n    },\n    maxspeech: {\n      entry: say(\"Sorry,\"),\n      on: {\n        ENDSPEECH: 'main.hist'\n      }\n    },\n    stop: {\n      entry: say(\"Ok, program stopped\"),\n      target: 'main'\n    },\n    help: {\n      entry: say(\"I'm supposed to help you but I won't\"),\n      target: 'main'\n    }\n  }\n};","map":{"version":3,"sources":["/Users/jacobcoles/Desktop/LT2216/Lab2and4/react-xstate-colourchanger/src/dmAppointment_rewrite_rewrite.ts"],"names":["actions","assign","send","cancel","say","text","_context","type","value","listen","grammar","person","day","time","bool_val","initial_function","promptAndAsk","prompt","initial","states","entry","on","ENDSPEECH","ask","delay","id","proxyurl","rasaurl","nluRequest","invoke","src","context","event","fetch","Request","method","headers","body","query","then","data","json","onDone","target","cond","intent","confidence","snippet","name","console","log","onError","http_timeout","Promise","resolve","setTimeout","invalid_query","valid_query","commands","dmMachine","MAXSPEECH","RECOGNISED","recResult","main","CLICK","hist","begin","includes","INVALID_QUERY","VALID_QUERY","HTTP_TIMEOUT","rasa_query","select_task","select","always","todo","timer","who","nomatch","whole_day_query","meeting_time_query","confirm_day_and_time","confirm_full_day","finalise","say_error","maxspeech","stop","help"],"mappings":"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","sourcesContent":["import { MachineConfig, actions, Action, assign } from \"xstate\";\nconst { send, cancel } = actions;\n\n\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string, bool_val?: boolean, initial_function: string } } = {\n    \"john\": { person: \"John Appleseed\" },\n    \"sarah\": { person: \"Sarah Swiggity\" },\n    \"daddy\": { person: \"The big lad\" },\n    \"on monday\": { day: \"Friday\" },\n    \"on tuesday\": { day: \"Thursday\" },\n    \"on wednesday\": { day: \"Friday\" },\n    \"on thursday\": { day: \"Thursday\" },\n    \"on friday\": { day: \"Friday\" },\n    \"on saturday\": { day: \"Thursday\" },\n    \"on sunday\": { day: \"Friday\" },\n    \"at 8\": { time: \"8:00\" },\n    \"at 9\": { time: \"9:00\" },\n    \"at 10\": { time: \"10:00\" },\n    \"at 11\": { time: \"11:00\" },\n    \"at 12\": { time: \"12:00\" },\n    \"at 13\": { time: \"13:00\" },\n    \"at 14\": { time: \"14:00\" },\n    \"at 15\": { time: \"15:00\" },\n    \"at 16\": { time: \"16:00\" },\n    \"yes\": { bool_val: true },\n\t\"yeah\": { bool_val: true },\n\t\"ok\": { bool_val: true },\n\t\"sure\": { bool_val: true },\n\t\"ja\": { bool_val: true },\n    \"no\": { bool_val: false },\n\t\"nope\": { bool_val: false },\n\t\"nein\": { bool_val: false },\n\t\"nej\": { bool_val: false },\n\t\"appointment\": { initial_function: \"appt\" },\n\t\"an appointment\": { initial_function: \"appt\" },\n\t\"set up an appointment\": { initial_function: \"appt\" },\n\t\"make an appointment\": { initial_function: \"appt\" },\n\t\"to do\": { initial_function: \"todo\" },\n\t\"set up a to do\": { initial_function: \"todo\" },\n\t\"make to do\": { initial_function: \"todo\" },\n\t\"make a to do\": { initial_function: \"todo\" },\n\t\"timer\": { initial_function: \"timer\" },\n\t\"make a timer\": { initial_function: \"timer\" },\n\t\"set a timer\": { initial_function: \"timer\" },\n\t\"set timer\": { initial_function: \"timer\" },\n}\n\nfunction promptAndAsk(prompt: string): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n        initial: 'prompt',\n        states: {\n            prompt: {\n                entry: say(prompt),\n                on: { ENDSPEECH: 'ask' }\n            },\n            ask: {\n                entry: [\n\t\t\t\t\tsend('LISTEN'),\n\t\t\t\t\tsend(\n\t\t\t\t\t\t'MAXSPEECH', \n\t\t\t\t\t\t{ \n\t\t\t\t\t\t\tdelay: 5000,\n\t\t\t\t\t\t\tid: 'maxspeech_cancel'\n\t\t\t\t\t\t}\n\t\t\t\t\t)\n\t\t\t\t]\n            },\n        }\n    })\n}\n\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\" // can try instead \"https://boiling-depths-26621.herokuapp.com/\"\nconst rasaurl = 'https://rasajacobcoles.herokuapp.com/model/parse'\nfunction nluRequest(): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n\t\tinitial: 'http_timeout',\n\t\tinvoke: {\n\t\t\tid: \"rasaquery\",\n\t\t\tsrc: (context, event) => {\n\t\t\t\t\n\t\t\t\treturn fetch(new Request(proxyurl + rasaurl, {\n\t\t        method: 'POST',\n\t\t        headers: { 'Origin': 'http://localhost:3000/' }, // only required with proxy\n\t\t        body: `{\"text\": \"${context.query}\"}`\n\t\t\t\t}))\n\t\t        .then(data => data.json());\n\n\t\t\t},\n\t\t\tonDone: [\n\t\t\t\t{\n\t\t\t\t\ttarget: '.invalid_query',\n\t\t\t\t\tcond: (context, event)=> { return ((event.data.intent.confidence) < 0.7) }\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttarget: '.valid_query',\n                    actions: [\n\t\t\t\t\t\tassign((context, event) => { return {snippet: event.data.intent.name }}),\n\t\t\t\t\t\t(context:SDSContext, event:any) => console.log(event.data),\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t],\n\t\t\tonError: {\n\t\t\t\t\ttarget: '#root.dm',\n\t\t\t\t\tactions: say(\"Sorry, there was an error. \")\n\t\t\t\t},\n\t\t},\n\t\tstates: {\n\t\t\thttp_timeout: {\n\t\t\t\tsrc: (context, event) => {\n\t\t\t\t\treturn new Promise((resolve) => {\n\t\t\t\t\t\t\tsetTimeout(() => { resolve() }, 4000) \n\t\t\t\t\t\t})\n\t\t\t\t},\n\t\t\t\tonDone: send('HTTP_TIMEOUT')\n\t\t\t},\n\t\t\tinvalid_query: {\n\t\t\t\tentry: send('INVALID_QUERY'),\n\t\t\t},\n\t\t\tvalid_query: {\n\t\t\t\tentry: send('VALID_QUERY'),\n\t\t\t},\n\t\t},\n\t})\n}\n\nconst commands = ['stop', 'help']\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'main',\n    id: 'init',\n    on: {\n\t\tMAXSPEECH: '.maxspeech',\n\t\tRECOGNISED: \n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\ttarget: \".stop\",\n\t\t\t\t\tcond: (context) => context.recResult === 'stop' ,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttarget: \".help\",\n\t\t\t\t\tcond: (context) => context.recResult === 'help' ,\n\t\t\t\t}\n\t\t\t],\n\t},\n    states: {\n\t\t//initial: 'idle',\n        main: {\n            on: {\n                CLICK: '.begin'\n            },\n\t\t\tstates: {\n\t\t\t\thist: { type: 'history' },\n\t\t\t\tbegin:{\n\t\t\t\t\tinitial: \"prompt\",\n\t\t\t\t\tid: \"welcome\",\n\t\t\t\t\ton: {\n\t\t\t\t\t\tRECOGNISED: {\n\t\t\t\t\t\t\ttarget: \"query\",\n\t\t\t\t\t\t\tactions: assign((context) => { return { query: context.recResult } }),\n\t\t\t\t\t\t\tcond: (context) => !commands.includes(context.recResult)\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tstates: {\n\t\t\t\t\t\tprompt: {\n\t\t\t\t\t\t\t...promptAndAsk(\"Would you like to book an appointment, set a timer or add a to do item?\")\n\t\t\t\t\t\t}\n\t\t            }\n\t\t\t\t},\n\t\t\t\tquery: {\n\t\t\t\t\tinitial:'rasa_query',\n\t\t\t\t\ton: {\n\t\t\t\t\t\tRECOGNISED: {\n\t\t\t\t\t\t\tcond: (context)=> !commands.includes(context.recResult),\n\t\t\t\t\t\t\ttarget: '.rasa_query',\n\t\t\t\t\t\t\tactions: assign((context) => { return { query: context.recResult } })\n\t\t\t\t\t\t},\n\t\t\t\t\t\tINVALID_QUERY: {\n\t\t\t\t\t\t\ttarget: '.invalid_query'\n\t\t\t\t\t\t},\n\t\t\t\t\t\tVALID_QUERY: {\n\t\t\t\t\t\t\ttarget: 'select_task'\n\t\t\t\t\t\t},\n\t\t\t\t\t\tHTTP_TIMEOUT: {\n\t\t\t\t\t\t\ttarget: '.http_timeout'\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tstates: {\n\t\t\t\t\t\trasa_query: {\n\t\t\t\t\t\t\t...nluRequest()\n\t\t\t\t\t\t},\n\t\t\t\t\t\tinvalid_query: {\n\t\t\t\t\t\t\t...promptAndAsk(\"Sorry, I don't understand, please say that again\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\thttp_timeout: {\n\t\t\t\t\t\t\t...promptAndAsk(\"Sorry, the rasa server isnt responding right now. Try again.\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tselect_task: {\n\t\t\t\t\tinitial: \"select\",\n\t\t\t\t\tstates: {\n\t\t\t\t\t\tselect: {\n\t\t\t\t\t\t\talways: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tcond: (context) => context.snippet ===  \"Appointment\",\n\t\t\t\t\t\t\t\t\ttarget: \"#who\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tcond: (context) => context.snippet  ===  \"TODO\",\n\t\t\t\t\t\t\t\t\ttarget: \"#todo\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tcond: (context) => context.snippet  ===  \"Timer\",\n\t\t\t\t\t\t\t\t\ttarget: \"#timer\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tcond: (context) => !commands.includes(context.recResult),\n\t\t\t\t\t\t\t\t\ttarget: \"prompt\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t\t\tprompt: { \n\t\t\t\t\t\t\tentry: say(\"Sorry, that isn't a valid answer\"),\n\t\t\t\t\t\t\ton: { ENDSPEECH: \"#welcome\"} \n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\ttodo: {\n\t\t            id: \"todo\",\n\t\t\t\t\tinitial: \"prompt\",\n\t\t\t\t\ton: {\n\t\t\t\t\t\tENDSPEECH: \"#init\"\n\t\t\t\t\t},\n\t\t\t\t\tstates: {\n\t\t\t\t\t\tprompt: {\n\t\t\t\t\t\t\tentry: say(\"You are in the to do thing.\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\ttimer: {\n\t\t            id: \"timer\",\n\t\t\t\t\tinitial: \"prompt\",\n\t\t\t\t\ton: {\n\t\t\t\t\t\tENDSPEECH: \"#init\"\n\t\t\t\t\t},\n\t\t\t\t\tstates: {\n\t\t\t\t\t\tprompt: {\n\t\t\t\t\t\t\tentry: say(\"You are in the timer thing.\")\n\t\t\t\t\t\t},\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t        who: {\n\t\t            id: \"who\",\n\t\t            initial: \"prompt\",\n\t\t            on: {\n\t\t                RECOGNISED: [{\n\t\t                    cond: (context) => \"person\" in (grammar[context.recResult] || {}),\n\t\t                    actions: assign((context) => { return { person: grammar[context.recResult].person }}),\n\t\t                    target: \"day\"\n\t\t                },\n\t\t                { \n\t\t\t\t\t\t\ttarget: \".nomatch\" ,\n\t\t\t\t\t\t\tcond: (context) => !commands.includes(context.recResult)\n\t\t\t\t\t\t}]\n\t\t            },\n\t\t            states: {\n\t\t                prompt: {\n\t\t                    ...promptAndAsk(\"Who are you meeting with?\")\n\t\t                },\n\t\t                nomatch: {\n\t\t                    entry: say(\"Sorry I don't know them\"),\n\t\t                    on: { ENDSPEECH: \"prompt\" }\n\t\t                }\n\t\t            }\n\t\t        },\n\t\t        day: {\n\t\t            initial: \"prompt\",\n\t\t            on: {\n\t\t                RECOGNISED: [{\n\t\t                    cond: (context) => \"day\" in (grammar[context.recResult] || {}),\n\t\t                    actions: assign((context) => { return { day: grammar[context.recResult].day } }),\n\t\t                    target: \"whole_day_query\"\n\t\t\n\t\t                },\n\t\t                { \n\t\t\t\t\t\t\ttarget: \".nomatch\",\n\t\t\t\t\t\t\tcond: (context) => !commands.includes(context.recResult)\n\t\t\t\t\t\t}]\n\t\t            },\n\t\t            states: {\n\t\t                prompt: {\n\t\t                    entry: send((context) => ({\n\t\t                        type: \"SPEAK\",\n\t\t                        value: `OK. ${context.person}. On which day is your meeting?`\n\t\t                    })),\n\t\t                    on: { ENDSPEECH: \"ask\" }\n\t\t                },\n\t\t                ask: {\n\t\t                    entry: listen()\n\t\t                },\n\t\t                nomatch: {\n\t\t                    entry: say(\"Can you please repeat that\"),\n\t\t                    on: { ENDSPEECH: \"ask\" }\n\t\t                }\n\t\t            }\n\t\t        },\n\t\t        whole_day_query: {\n\t\t            initial: \"prompt\",\n\t\t            on: {\n\t\t                RECOGNISED: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcond: (context) => \"bool_val\" in (grammar[context.recResult] || {}) && (grammar[context.recResult].bool_val == false),\n\t\t                    actions: assign((context) => { return { bool_val: grammar[context.recResult].bool_val } }),\n\t\t                    target: \"meeting_time_query\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcond: (context) => \"bool_val\" in (grammar[context.recResult] || {}) && (grammar[context.recResult].bool_val == true),\n\t\t                    actions: assign((context) => { return { bool_val: grammar[context.recResult].bool_val } }),\n\t\t                    target: \"confirm_full_day\"\n\t\t\t\t\t\t},\n\t\t                { \n\t\t\t\t\t\t\ttarget: \".nomatch\" ,\n\t\t\t\t\t\t\tcond: (context) => !commands.includes(context.recResult)\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t}]\n\t\t            },\n\t\t            states: {\n\t\t                prompt: {\n\t\t                    entry: send((context) => ({\n\t\t                        type: \"SPEAK\",\n\t\t                        value: `Will the meeting take the whole day?`\n\t\t                    })),\n\t\t                    on: { ENDSPEECH: \"ask\" }\n\t\t                },\n\t\t                ask: {\n\t\t                    entry: listen()\n\t\t                },\n\t\t                nomatch: {\n\t\t                    entry: say(\"Can you please repeat that\"),\n\t\t                    on: { ENDSPEECH: \"ask\" }\n\t\t                },\n\t\t            }\n\t\t        },\n\t\t        meeting_time_query: {\n\t\t            initial: \"prompt\",\n\t\t            on: {\n\t\t                RECOGNISED: [{\n\t\t                    cond: (context) => \"time\" in (grammar[context.recResult] || {}),\n\t\t                    actions: assign((context) => { return { time: grammar[context.recResult].time } }),\n\t\t                    target: \"confirm_day_and_time\"\n\t\t\n\t\t                },\n\t\t                { \n\t\t\t\t\t\t\ttarget: \".nomatch\" ,\n\t\t\t\t\t\t\tcond: (context) => !commands.includes(context.recResult)\n\t\t\t\t\t\t}]\n\t\t            },\n\t\t            states: {\n\t\t                prompt: {\n\t\t                    entry: send((context) => ({\n\t\t                        type: \"SPEAK\",\n\t\t                        value: `What time is the meeting?`\n\t\t                    })),\n\t\t                    on: { ENDSPEECH: \"ask\" }\n\t\t                },\n\t\t                ask: {\n\t\t                    entry: listen()\n\t\t                },\n\t\t                nomatch: {\n\t\t                    entry: say(\"Can you please repeat that\"),\n\t\t                    on: { ENDSPEECH: \"ask\" }\n\t\t                },\n\t\t            }\n\t\t        },\n\t\t\t\tconfirm_day_and_time: {\n\t\t            initial: \"prompt\",\n\t\t            on: {\n\t\t                RECOGNISED: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcond: (context) => \"bool_val\" in (grammar[context.recResult] || {}) && (grammar[context.recResult].bool_val == false),\n\t\t                    actions: assign((context) => { return { bool_val: grammar[context.recResult].bool_val } }),\n\t\t                    target: \"#init\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcond: (context) => \"bool_val\" in (grammar[context.recResult] || {}) && (grammar[context.recResult].bool_val == true),\n\t\t                    actions: assign((context) => { return { bool_val: grammar[context.recResult].bool_val } }),\n\t\t                    target: \"finalise\"\n\t\t\t\t\t\t},\n\t\t                { \n\t\t\t\t\t\t\ttarget: \".nomatch\" ,\n\t\t\t\t\t\t\tcond: (context) => !commands.includes(context.recResult)\n\t\t\t\t\t\t}]\n\t\t            },\n\t\t            states: {\n\t\t                prompt: {\n\t\t                    entry: send((context) => ({\n\t\t                        type: \"SPEAK\",\n\t\t                        value: `Do you want to create an appointment with ${context.person} on ${context.day} at ${context.time}?`\n\t\t                    })),\n\t\t                    on: { ENDSPEECH: \"ask\" }\n\t\t                },\n\t\t                ask: {\n\t\t                    entry: listen()\n\t\t                },\n\t\t                nomatch: {\n\t\t                    entry: say(\"Can you please repeat that\"),\n\t\t                    on: { ENDSPEECH: \"ask\" }\n\t\t                },\n\t\t            }\n\t\t        },\n\t\t\t\tconfirm_full_day: {\n\t\t            initial: \"prompt\",\n\t\t            on: {\n\t\t                RECOGNISED: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcond: (context) => \"bool_val\" in (grammar[context.recResult] || {}) && (grammar[context.recResult].bool_val == false),\n\t\t                    actions: assign((context) => { return { bool_val: grammar[context.recResult].bool_val } }),\n\t\t                    target: \"#init\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcond: (context) => \"bool_val\" in (grammar[context.recResult] || {}) && (grammar[context.recResult].bool_val == true),\n\t\t                    actions: assign((context) => { return { bool_val: grammar[context.recResult].bool_val } }),\n\t\t                    target: \"finalise\"\n\t\t\t\t\t\t},\n\t\t                { \n\t\t\t\t\t\t\ttarget: \".nomatch\" ,\n\t\t\t\t\t\t\tcond: (context) => !commands.includes(context.recResult)\n\t\t\t\t\t\t}]\n\t\t            },\n\t\t            states: {\n\t\t                prompt: {\n\t\t                    entry: send((context) => ({\n\t\t                        type: \"SPEAK\",\n\t\t                        value: `Do you want to create an appointment with ${context.person} on ${context.day} for the whole day?`\n\t\t                    })),\n\t\t                    on: { ENDSPEECH: \"ask\" }\n\t\t                },\n\t\t                ask: {\n\t\t                    entry: listen()\n\t\t                },\n\t\t                nomatch: {\n\t\t                    entry: say(\"Can you please repeat that\"),\n\t\t                    on: { ENDSPEECH: \"ask\" }\n\t\t                },\n\t\t            }\n\t\t        },\n\t\t\t\tfinalise: {\n\t\t\t\t\tentry: say(\"Your appointment has been created.\"),\n\t\t\t\t\ton: { ENDSPEECH: \"#init.main\" }\n\t\t\t\t},\n\t\t\t\tsay_error: {\n\t\t\t\t\ttarget: 'main',\n\t\t\t\t\tactions: say(\"Sorry, there was an error. \")\n\t\t\t\t},\n\t\t    },\n\t\t},\n\t\tmaxspeech: {\n\t\t\tentry: say(\"Sorry,\"),\n\t\t\ton: {\n\t\t\t\tENDSPEECH: 'main.hist'\n\t\t\t}\n\t\t},\n\t\tstop: {\n\t\t\tentry: say(\"Ok, program stopped\"),\n\t\t\ttarget: 'main'\n\t\t},\n\t\thelp: {\n\t\t\tentry: say(\"I'm supposed to help you but I won't\"),\n\t\t\ttarget: 'main'\n\t\t},\n\t},\n\t\t\n})\n\n\n\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}