{"ast":null,"code":"\"use strict\"; // Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar _regeneratorRuntime = require(\"/Users/jacobcoles/Desktop/LT2216/final_project/final_project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/jacobcoles/Desktop/LT2216/final_project/final_project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _a, _b, _c;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.IdentityPoolClient = void 0;\n\nconst fs = require(\"fs\");\n\nconst util_1 = require(\"util\");\n\nconst baseexternalclient_1 = require(\"./baseexternalclient\"); // fs.readfile is undefined in browser karma tests causing\n// `npm run browser-test` to fail as test.oauth2.ts imports this file via\n// src/index.ts.\n// Fallback to void function to avoid promisify throwing a TypeError.\n\n\nconst readFile = util_1.promisify((_a = fs.readFile) !== null && _a !== void 0 ? _a : () => {});\nconst realpath = util_1.promisify((_b = fs.realpath) !== null && _b !== void 0 ? _b : () => {});\nconst lstat = util_1.promisify((_c = fs.lstat) !== null && _c !== void 0 ? _c : () => {});\n/**\n * Defines the Url-sourced and file-sourced external account clients mainly\n * used for K8s and Azure workloads.\n */\n\nclass IdentityPoolClient extends baseexternalclient_1.BaseExternalAccountClient {\n  /**\n   * Instantiate an IdentityPoolClient instance using the provided JSON\n   * object loaded from an external account credentials file.\n   * An error is thrown if the credential is not a valid file-sourced or\n   * url-sourced credential.\n   * @param options The external account options object typically loaded\n   *   from the external account JSON credential file.\n   * @param additionalOptions Optional additional behavior customization\n   *   options. These currently customize expiration threshold time and\n   *   whether to retry on 401/403 API request errors.\n   */\n  constructor(options, additionalOptions) {\n    var _a, _b;\n\n    super(options, additionalOptions);\n    this.file = options.credential_source.file;\n    this.url = options.credential_source.url;\n    this.headers = options.credential_source.headers;\n\n    if (!this.file && !this.url) {\n      throw new Error('No valid Identity Pool \"credential_source\" provided');\n    } // Text is the default format type.\n\n\n    this.formatType = ((_a = options.credential_source.format) === null || _a === void 0 ? void 0 : _a.type) || 'text';\n    this.formatSubjectTokenFieldName = (_b = options.credential_source.format) === null || _b === void 0 ? void 0 : _b.subject_token_field_name;\n\n    if (this.formatType !== 'json' && this.formatType !== 'text') {\n      throw new Error(\"Invalid credential_source format \\\"\".concat(this.formatType, \"\\\"\"));\n    }\n\n    if (this.formatType === 'json' && !this.formatSubjectTokenFieldName) {\n      throw new Error('Missing subject_token_field_name for JSON credential_source format');\n    }\n  }\n  /**\n   * Triggered when a external subject token is needed to be exchanged for a GCP\n   * access token via GCP STS endpoint.\n   * This uses the `options.credential_source` object to figure out how\n   * to retrieve the token using the current environment. In this case,\n   * this either retrieves the local credential from a file location (k8s\n   * workload) or by sending a GET request to a local metadata server (Azure\n   * workloads).\n   * @return A promise that resolves with the external subject token.\n   */\n\n\n  retrieveSubjectToken() {\n    var _this = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            if (!_this.file) {\n              _context.next = 4;\n              break;\n            }\n\n            _context.next = 3;\n            return _this.getTokenFromFile(_this.file, _this.formatType, _this.formatSubjectTokenFieldName);\n\n          case 3:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 4:\n            _context.next = 6;\n            return _this.getTokenFromUrl(_this.url, _this.formatType, _this.formatSubjectTokenFieldName, _this.headers);\n\n          case 6:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }))();\n  }\n  /**\n   * Looks up the external subject token in the file path provided and\n   * resolves with that token.\n   * @param file The file path where the external credential is located.\n   * @param formatType The token file or URL response type (JSON or text).\n   * @param formatSubjectTokenFieldName For JSON response types, this is the\n   *   subject_token field name. For Azure, this is access_token. For text\n   *   response types, this is ignored.\n   * @return A promise that resolves with the external subject token.\n   */\n\n\n  getTokenFromFile(filePath, formatType, formatSubjectTokenFieldName) {\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var subjectToken, rawText, json;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return realpath(filePath);\n\n          case 3:\n            filePath = _context2.sent;\n            _context2.next = 6;\n            return lstat(filePath);\n\n          case 6:\n            if (_context2.sent.isFile()) {\n              _context2.next = 8;\n              break;\n            }\n\n            throw new Error();\n\n          case 8:\n            _context2.next = 14;\n            break;\n\n          case 10:\n            _context2.prev = 10;\n            _context2.t0 = _context2[\"catch\"](0);\n            _context2.t0.message = \"The file at \".concat(filePath, \" does not exist, or it is not a file. \").concat(_context2.t0.message);\n            throw _context2.t0;\n\n          case 14:\n            _context2.next = 16;\n            return readFile(filePath, {\n              encoding: 'utf8'\n            });\n\n          case 16:\n            rawText = _context2.sent;\n\n            if (formatType === 'text') {\n              subjectToken = rawText;\n            } else if (formatType === 'json' && formatSubjectTokenFieldName) {\n              json = JSON.parse(rawText);\n              subjectToken = json[formatSubjectTokenFieldName];\n            }\n\n            if (subjectToken) {\n              _context2.next = 20;\n              break;\n            }\n\n            throw new Error('Unable to parse the subject_token from the credential_source file');\n\n          case 20:\n            return _context2.abrupt(\"return\", subjectToken);\n\n          case 21:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2, null, [[0, 10]]);\n    }))();\n  }\n  /**\n   * Sends a GET request to the URL provided and resolves with the returned\n   * external subject token.\n   * @param url The URL to call to retrieve the subject token. This is typically\n   *   a local metadata server.\n   * @param formatType The token file or URL response type (JSON or text).\n   * @param formatSubjectTokenFieldName For JSON response types, this is the\n   *   subject_token field name. For Azure, this is access_token. For text\n   *   response types, this is ignored.\n   * @param headers The optional additional headers to send with the request to\n   *   the metadata server url.\n   * @return A promise that resolves with the external subject token.\n   */\n\n\n  getTokenFromUrl(url, formatType, formatSubjectTokenFieldName, headers) {\n    var _this2 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var opts, subjectToken, response;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) switch (_context3.prev = _context3.next) {\n          case 0:\n            opts = {\n              url,\n              method: 'GET',\n              headers,\n              responseType: formatType\n            };\n\n            if (!(formatType === 'text')) {\n              _context3.next = 8;\n              break;\n            }\n\n            _context3.next = 4;\n            return _this2.transporter.request(opts);\n\n          case 4:\n            response = _context3.sent;\n            subjectToken = response.data;\n            _context3.next = 13;\n            break;\n\n          case 8:\n            if (!(formatType === 'json' && formatSubjectTokenFieldName)) {\n              _context3.next = 13;\n              break;\n            }\n\n            _context3.next = 11;\n            return _this2.transporter.request(opts);\n\n          case 11:\n            response = _context3.sent;\n            subjectToken = response.data[formatSubjectTokenFieldName];\n\n          case 13:\n            if (subjectToken) {\n              _context3.next = 15;\n              break;\n            }\n\n            throw new Error('Unable to parse the subject_token from the credential_source URL');\n\n          case 15:\n            return _context3.abrupt(\"return\", subjectToken);\n\n          case 16:\n          case \"end\":\n            return _context3.stop();\n        }\n      }, _callee3);\n    }))();\n  }\n\n}\n\nexports.IdentityPoolClient = IdentityPoolClient;","map":{"version":3,"sources":["/Users/jacobcoles/Desktop/LT2216/final_project/final_project/node_modules/google-auth-library/build/src/auth/identitypoolclient.js"],"names":["_a","_b","_c","Object","defineProperty","exports","value","IdentityPoolClient","fs","require","util_1","baseexternalclient_1","readFile","promisify","realpath","lstat","BaseExternalAccountClient","constructor","options","additionalOptions","file","credential_source","url","headers","Error","formatType","format","type","formatSubjectTokenFieldName","subject_token_field_name","retrieveSubjectToken","getTokenFromFile","getTokenFromUrl","filePath","isFile","message","encoding","rawText","subjectToken","json","JSON","parse","opts","method","responseType","transporter","request","response","data"],"mappings":"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","sourcesContent":["\"use strict\";\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar _a, _b, _c;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.IdentityPoolClient = void 0;\nconst fs = require(\"fs\");\nconst util_1 = require(\"util\");\nconst baseexternalclient_1 = require(\"./baseexternalclient\");\n// fs.readfile is undefined in browser karma tests causing\n// `npm run browser-test` to fail as test.oauth2.ts imports this file via\n// src/index.ts.\n// Fallback to void function to avoid promisify throwing a TypeError.\nconst readFile = util_1.promisify((_a = fs.readFile) !== null && _a !== void 0 ? _a : (() => { }));\nconst realpath = util_1.promisify((_b = fs.realpath) !== null && _b !== void 0 ? _b : (() => { }));\nconst lstat = util_1.promisify((_c = fs.lstat) !== null && _c !== void 0 ? _c : (() => { }));\n/**\n * Defines the Url-sourced and file-sourced external account clients mainly\n * used for K8s and Azure workloads.\n */\nclass IdentityPoolClient extends baseexternalclient_1.BaseExternalAccountClient {\n    /**\n     * Instantiate an IdentityPoolClient instance using the provided JSON\n     * object loaded from an external account credentials file.\n     * An error is thrown if the credential is not a valid file-sourced or\n     * url-sourced credential.\n     * @param options The external account options object typically loaded\n     *   from the external account JSON credential file.\n     * @param additionalOptions Optional additional behavior customization\n     *   options. These currently customize expiration threshold time and\n     *   whether to retry on 401/403 API request errors.\n     */\n    constructor(options, additionalOptions) {\n        var _a, _b;\n        super(options, additionalOptions);\n        this.file = options.credential_source.file;\n        this.url = options.credential_source.url;\n        this.headers = options.credential_source.headers;\n        if (!this.file && !this.url) {\n            throw new Error('No valid Identity Pool \"credential_source\" provided');\n        }\n        // Text is the default format type.\n        this.formatType = ((_a = options.credential_source.format) === null || _a === void 0 ? void 0 : _a.type) || 'text';\n        this.formatSubjectTokenFieldName = (_b = options.credential_source.format) === null || _b === void 0 ? void 0 : _b.subject_token_field_name;\n        if (this.formatType !== 'json' && this.formatType !== 'text') {\n            throw new Error(`Invalid credential_source format \"${this.formatType}\"`);\n        }\n        if (this.formatType === 'json' && !this.formatSubjectTokenFieldName) {\n            throw new Error('Missing subject_token_field_name for JSON credential_source format');\n        }\n    }\n    /**\n     * Triggered when a external subject token is needed to be exchanged for a GCP\n     * access token via GCP STS endpoint.\n     * This uses the `options.credential_source` object to figure out how\n     * to retrieve the token using the current environment. In this case,\n     * this either retrieves the local credential from a file location (k8s\n     * workload) or by sending a GET request to a local metadata server (Azure\n     * workloads).\n     * @return A promise that resolves with the external subject token.\n     */\n    async retrieveSubjectToken() {\n        if (this.file) {\n            return await this.getTokenFromFile(this.file, this.formatType, this.formatSubjectTokenFieldName);\n        }\n        return await this.getTokenFromUrl(this.url, this.formatType, this.formatSubjectTokenFieldName, this.headers);\n    }\n    /**\n     * Looks up the external subject token in the file path provided and\n     * resolves with that token.\n     * @param file The file path where the external credential is located.\n     * @param formatType The token file or URL response type (JSON or text).\n     * @param formatSubjectTokenFieldName For JSON response types, this is the\n     *   subject_token field name. For Azure, this is access_token. For text\n     *   response types, this is ignored.\n     * @return A promise that resolves with the external subject token.\n     */\n    async getTokenFromFile(filePath, formatType, formatSubjectTokenFieldName) {\n        // Make sure there is a file at the path. lstatSync will throw if there is\n        // nothing there.\n        try {\n            // Resolve path to actual file in case of symlink. Expect a thrown error\n            // if not resolvable.\n            filePath = await realpath(filePath);\n            if (!(await lstat(filePath)).isFile()) {\n                throw new Error();\n            }\n        }\n        catch (err) {\n            err.message = `The file at ${filePath} does not exist, or it is not a file. ${err.message}`;\n            throw err;\n        }\n        let subjectToken;\n        const rawText = await readFile(filePath, { encoding: 'utf8' });\n        if (formatType === 'text') {\n            subjectToken = rawText;\n        }\n        else if (formatType === 'json' && formatSubjectTokenFieldName) {\n            const json = JSON.parse(rawText);\n            subjectToken = json[formatSubjectTokenFieldName];\n        }\n        if (!subjectToken) {\n            throw new Error('Unable to parse the subject_token from the credential_source file');\n        }\n        return subjectToken;\n    }\n    /**\n     * Sends a GET request to the URL provided and resolves with the returned\n     * external subject token.\n     * @param url The URL to call to retrieve the subject token. This is typically\n     *   a local metadata server.\n     * @param formatType The token file or URL response type (JSON or text).\n     * @param formatSubjectTokenFieldName For JSON response types, this is the\n     *   subject_token field name. For Azure, this is access_token. For text\n     *   response types, this is ignored.\n     * @param headers The optional additional headers to send with the request to\n     *   the metadata server url.\n     * @return A promise that resolves with the external subject token.\n     */\n    async getTokenFromUrl(url, formatType, formatSubjectTokenFieldName, headers) {\n        const opts = {\n            url,\n            method: 'GET',\n            headers,\n            responseType: formatType,\n        };\n        let subjectToken;\n        if (formatType === 'text') {\n            const response = await this.transporter.request(opts);\n            subjectToken = response.data;\n        }\n        else if (formatType === 'json' && formatSubjectTokenFieldName) {\n            const response = await this.transporter.request(opts);\n            subjectToken = response.data[formatSubjectTokenFieldName];\n        }\n        if (!subjectToken) {\n            throw new Error('Unable to parse the subject_token from the credential_source URL');\n        }\n        return subjectToken;\n    }\n}\nexports.IdentityPoolClient = IdentityPoolClient;\n//# sourceMappingURL=identitypoolclient.js.map"]},"metadata":{},"sourceType":"script"}