{"ast":null,"code":"import _objectSpread from \"/Users/jacobcoles/Desktop/LT2216/Lab2and4/react-xstate-colourchanger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { send, assign } from \"xstate\";\n\nfunction say(text) {\n  return send(_context => ({\n    type: \"SPEAK\",\n    value: text\n  }));\n}\n\nfunction listen() {\n  return send('LISTEN');\n}\n\nconst grammar = {\n  \"john\": {\n    person: \"John Appleseed\"\n  },\n  \"sarah\": {\n    person: \"Sarah Swiggity\"\n  },\n  \"daddy\": {\n    person: \"The big lad\"\n  },\n  \"on monday\": {\n    day: \"Friday\"\n  },\n  \"on tuesday\": {\n    day: \"Thursday\"\n  },\n  \"on wednesday\": {\n    day: \"Friday\"\n  },\n  \"on thursday\": {\n    day: \"Thursday\"\n  },\n  \"on friday\": {\n    day: \"Friday\"\n  },\n  \"on saturday\": {\n    day: \"Thursday\"\n  },\n  \"on sunday\": {\n    day: \"Friday\"\n  },\n  \"at 8\": {\n    time: \"8:00\"\n  },\n  \"at 9\": {\n    time: \"9:00\"\n  },\n  \"at 10\": {\n    time: \"10:00\"\n  },\n  \"at 11\": {\n    time: \"11:00\"\n  },\n  \"at 12\": {\n    time: \"12:00\"\n  },\n  \"at 13\": {\n    time: \"13:00\"\n  },\n  \"at 14\": {\n    time: \"14:00\"\n  },\n  \"at 15\": {\n    time: \"15:00\"\n  },\n  \"at 16\": {\n    time: \"16:00\"\n  },\n  \"yes\": {\n    bool_val: true\n  },\n  \"yeah\": {\n    bool_val: true\n  },\n  \"ok\": {\n    bool_val: true\n  },\n  \"sure\": {\n    bool_val: true\n  },\n  \"ja\": {\n    bool_val: true\n  },\n  \"no\": {\n    bool_val: false\n  },\n  \"nope\": {\n    bool_val: false\n  },\n  \"nein\": {\n    bool_val: false\n  },\n  \"nej\": {\n    bool_val: false\n  },\n  \"appointment\": {\n    initial_function: \"appt\"\n  },\n  \"an appointment\": {\n    initial_function: \"appt\"\n  },\n  \"set up an appointment\": {\n    initial_function: \"appt\"\n  },\n  \"make an appointment\": {\n    initial_function: \"appt\"\n  },\n  \"to do\": {\n    initial_function: \"todo\"\n  },\n  \"set up a to do\": {\n    initial_function: \"todo\"\n  },\n  \"make to do\": {\n    initial_function: \"todo\"\n  },\n  \"make a to do\": {\n    initial_function: \"todo\"\n  },\n  \"timer\": {\n    initial_function: \"timer\"\n  },\n  \"make a timer\": {\n    initial_function: \"timer\"\n  },\n  \"set a timer\": {\n    initial_function: \"timer\"\n  },\n  \"set timer\": {\n    initial_function: \"timer\"\n  },\n  \"help\": {\n    help: true\n  }\n};\n\nfunction promptAndAsk(prompt) {\n  return {\n    initial: 'prompt',\n    states: {\n      prompt: {\n        entry: say(prompt),\n        on: {\n          ENDSPEECH: 'ask'\n        }\n      },\n      ask: {\n        entry: [send('LISTEN'), send('MAXSPEECH', {\n          delay: 10000\n        })]\n      }\n    }\n  };\n}\n\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\"; // \"https://boiling-depths-26621.herokuapp.com/\"\n\nconst rasaurl = 'https://rasajacobcoles.herokuapp.com/model/parse';\n\nfunction nluRequest() {\n  return {\n    invoke: {\n      id: \"rasaquery\",\n      src: (context, event) => {\n        return fetch(new Request(proxyurl + rasaurl, {\n          method: 'POST',\n          headers: {\n            'Origin': 'http://localhost:3000/'\n          },\n          // only required with proxy\n          body: \"{\\\"text\\\": \\\"\".concat(context.query, \"\\\"}\")\n        })).then(data => data.json());\n      },\n      onDone: [{\n        target: '.invalid_query',\n        cond: (context, event) => {\n          return event.data.intent.confidence < 0.7;\n        }\n      }, {\n        target: \".valid_query\",\n        actions: [assign((context, event) => {\n          return {\n            snippet: event.data.intent.name\n          };\n        }), (context, event) => console.log(event.data)]\n      }],\n      onError: [{\n        target: '.http_timeout',\n        cond: (context, event) => {\n          console.log(event.data);\n          return event.data === 'TIMEOUT';\n        }\n      }, {\n        target: '#root.dm',\n        actions: say(\"Sorry, there was an error. \")\n      }]\n    },\n    states: {\n      prompt: _objectSpread({}, promptAndAsk(\"Would you like to book an appointment, set a timer or add a to do item?\")),\n      invalid_query: {\n        entry: send('INVALID_QUERY')\n      },\n      valid_query: {\n        entry: send('VALID_QUERY')\n      },\n      http_timeout: {\n        entry: send('HTTP_TIMEOUT')\n      }\n    }\n  };\n}\n\nconst commands = ['stop', 'help'];\nexport const dmMachine = {\n  initial: 'init',\n  id: 'init',\n  on: {\n    MAXSPEECH: '#init',\n    RECOGNISED: [{\n      target: \".stop\",\n      cond: context => context.recResult === 'stop'\n    }, {\n      target: \".help\",\n      cond: context => context.recResult === 'help'\n    }]\n  },\n  states: {\n    init: {\n      on: {\n        CLICK: 'welcome'\n      }\n    },\n    welcome: {\n      initial: \"prompt\",\n      id: \"welcome\",\n      on: {\n        RECOGNISED: {\n          target: \"query\",\n          actions: assign(context => {\n            return {\n              query: context.recResult\n            };\n          })\n        }\n      },\n      states: {\n        prompt: _objectSpread({}, promptAndAsk(\"Would you like to book an appointment, set a timer or add a to do item?\"))\n      }\n    },\n    query: {\n      initial: 'rasa_query',\n      on: {\n        RECOGNISED: {\n          cond: context => !commands.includes(context.recResult),\n          target: '.rasa_query',\n          actions: assign(context => {\n            return {\n              query: context.recResult\n            };\n          })\n        },\n        INVALID_QUERY: {\n          target: '.invalid_query'\n        },\n        VALID_QUERY: {\n          target: 'select_task'\n        }\n      },\n      states: {\n        rasa_query: _objectSpread({}, nluRequest()),\n        invalid_query: _objectSpread({}, promptAndAsk(\"Sorry, I don't understand, please say that again\"))\n      }\n    },\n    select_task: {\n      initial: \"select\",\n      states: {\n        select: {\n          always: [{\n            cond: context => context.snippet === \"Appointment\",\n            target: \"#who\"\n          }, {\n            cond: context => context.snippet === \"TODO\",\n            target: \"#todo\"\n          }, {\n            cond: context => context.snippet === \"Timer\",\n            target: \"#timer\"\n          }, {\n            target: \"prompt\"\n          }]\n        },\n        prompt: {\n          entry: say(\"Sorry, that isn't a valid answer\"),\n          on: {\n            ENDSPEECH: \"#welcome\"\n          }\n        }\n      }\n    },\n    todo: {\n      id: \"todo\",\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"init\"\n      },\n      states: {\n        prompt: {\n          entry: say(\"You are in the to do thing.\")\n        }\n      }\n    },\n    timer: {\n      id: \"timer\",\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"init\"\n      },\n      states: {\n        prompt: {\n          entry: say(\"You are in the timer thing.\")\n        }\n      }\n    },\n    who: {\n      id: \"who\",\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"person\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              person: grammar[context.recResult].person\n            };\n          }),\n          target: \"day\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: _objectSpread({}, promptAndAsk(\"Who are you meeting with?\")),\n        nomatch: {\n          entry: say(\"Sorry I don't know them\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    day: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"day\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              day: grammar[context.recResult].day\n            };\n          }),\n          target: \"whole_day_query\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"OK. \".concat(context.person, \". On which day is your meeting?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Can you please repeat that\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        }\n      }\n    },\n    whole_day_query: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"bool_val\" in (grammar[context.recResult] || {}) && grammar[context.recResult].bool_val == false,\n          actions: assign(context => {\n            return {\n              bool_val: grammar[context.recResult].bool_val\n            };\n          }),\n          target: \"meeting_time_query\"\n        }, {\n          cond: context => \"bool_val\" in (grammar[context.recResult] || {}) && grammar[context.recResult].bool_val == true,\n          actions: assign(context => {\n            return {\n              bool_val: grammar[context.recResult].bool_val\n            };\n          }),\n          target: \"confirm_full_day\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Will the meeting take the whole day?\"\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Can you please repeat that\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        }\n      }\n    },\n    meeting_time_query: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"time\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              time: grammar[context.recResult].time\n            };\n          }),\n          target: \"confirm_day_and_time\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"What time is the meeting?\"\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Can you please repeat that\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        }\n      }\n    },\n    confirm_day_and_time: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"bool_val\" in (grammar[context.recResult] || {}) && grammar[context.recResult].bool_val == false,\n          actions: assign(context => {\n            return {\n              bool_val: grammar[context.recResult].bool_val\n            };\n          }),\n          target: \"init\"\n        }, {\n          cond: context => \"bool_val\" in (grammar[context.recResult] || {}) && grammar[context.recResult].bool_val == true,\n          actions: assign(context => {\n            return {\n              bool_val: grammar[context.recResult].bool_val\n            };\n          }),\n          target: \"finalise\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Do you want to create an appointment with \".concat(context.person, \" on \").concat(context.day, \" at \").concat(context.time, \"?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Can you please repeat that\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        }\n      }\n    },\n    confirm_full_day: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"bool_val\" in (grammar[context.recResult] || {}) && grammar[context.recResult].bool_val == false,\n          actions: assign(context => {\n            return {\n              bool_val: grammar[context.recResult].bool_val\n            };\n          }),\n          target: \"init\"\n        }, {\n          cond: context => \"bool_val\" in (grammar[context.recResult] || {}) && grammar[context.recResult].bool_val == true,\n          actions: assign(context => {\n            return {\n              bool_val: grammar[context.recResult].bool_val\n            };\n          }),\n          target: \"finalise\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Do you want to create an appointment with \".concat(context.person, \" on \").concat(context.day, \" for the whole day?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Can you please repeat that\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        }\n      }\n    },\n    finalise: {\n      entry: say(\"Your appointment has been created.\"),\n      on: {\n        ENDSPEECH: \"init\"\n      }\n    },\n    say_error: {\n      target: 'init',\n      actions: say(\"Sorry, there was an error. \")\n    },\n    stop: {\n      entry: say(\"Ok, program stopped\"),\n      target: '#init'\n    },\n    help: {\n      entry: say(\"I'm supposed to help you but I won't\"),\n      target: '#init'\n    }\n  }\n};","map":{"version":3,"sources":["/Users/jacobcoles/Desktop/LT2216/Lab2and4/react-xstate-colourchanger/src/dmAppointment_rewrite_rewrite.ts"],"names":["send","assign","say","text","_context","type","value","listen","grammar","person","day","time","bool_val","initial_function","help","promptAndAsk","prompt","initial","states","entry","on","ENDSPEECH","ask","delay","proxyurl","rasaurl","nluRequest","invoke","id","src","context","event","fetch","Request","method","headers","body","query","then","data","json","onDone","target","cond","intent","confidence","actions","snippet","name","console","log","onError","invalid_query","valid_query","http_timeout","commands","dmMachine","MAXSPEECH","RECOGNISED","recResult","init","CLICK","welcome","includes","INVALID_QUERY","VALID_QUERY","rasa_query","select_task","select","always","todo","timer","who","nomatch","whole_day_query","meeting_time_query","confirm_day_and_time","confirm_full_day","finalise","say_error","stop"],"mappings":"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","sourcesContent":["import { MachineConfig, send, Action, assign } from \"xstate\";\n\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string, bool_val?: boolean, initial_function: string } } = {\n    \"john\": { person: \"John Appleseed\" },\n    \"sarah\": { person: \"Sarah Swiggity\" },\n    \"daddy\": { person: \"The big lad\" },\n    \"on monday\": { day: \"Friday\" },\n    \"on tuesday\": { day: \"Thursday\" },\n    \"on wednesday\": { day: \"Friday\" },\n    \"on thursday\": { day: \"Thursday\" },\n    \"on friday\": { day: \"Friday\" },\n    \"on saturday\": { day: \"Thursday\" },\n    \"on sunday\": { day: \"Friday\" },\n    \"at 8\": { time: \"8:00\" },\n    \"at 9\": { time: \"9:00\" },\n    \"at 10\": { time: \"10:00\" },\n    \"at 11\": { time: \"11:00\" },\n    \"at 12\": { time: \"12:00\" },\n    \"at 13\": { time: \"13:00\" },\n    \"at 14\": { time: \"14:00\" },\n    \"at 15\": { time: \"15:00\" },\n    \"at 16\": { time: \"16:00\" },\n    \"yes\": { bool_val: true },\n\t\"yeah\": { bool_val: true },\n\t\"ok\": { bool_val: true },\n\t\"sure\": { bool_val: true },\n\t\"ja\": { bool_val: true },\n    \"no\": { bool_val: false },\n\t\"nope\": { bool_val: false },\n\t\"nein\": { bool_val: false },\n\t\"nej\": { bool_val: false },\n\t\"appointment\": { initial_function: \"appt\" },\n\t\"an appointment\": { initial_function: \"appt\" },\n\t\"set up an appointment\": { initial_function: \"appt\" },\n\t\"make an appointment\": { initial_function: \"appt\" },\n\t\"to do\": { initial_function: \"todo\" },\n\t\"set up a to do\": { initial_function: \"todo\" },\n\t\"make to do\": { initial_function: \"todo\" },\n\t\"make a to do\": { initial_function: \"todo\" },\n\t\"timer\": { initial_function: \"timer\" },\n\t\"make a timer\": { initial_function: \"timer\" },\n\t\"set a timer\": { initial_function: \"timer\" },\n\t\"set timer\": { initial_function: \"timer\" },\n\t\"help\": { help: true },\n}\n\nfunction promptAndAsk(prompt: string): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n        initial: 'prompt',\n        states: {\n            prompt: {\n                entry: say(prompt),\n                on: { ENDSPEECH: 'ask' }\n            },\n            ask: {\n                entry: [\n\t\t\t\t\tsend('LISTEN'),\n\t\t\t\t\tsend('MAXSPEECH', { delay: 10000 })\n\t\t\t\t]\n            },\n        }\n    })\n}\n\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\" // \"https://boiling-depths-26621.herokuapp.com/\"\nconst rasaurl = 'https://rasajacobcoles.herokuapp.com/model/parse'\nfunction nluRequest(): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n\t\tinvoke: {\n\t\t\tid: \"rasaquery\",\n\t\t\tsrc: (context, event) => {\n\t\t\t\t\n\t\t\t\t\n\t\t\t\treturn fetch(new Request(proxyurl + rasaurl, {\n\t\t        method: 'POST',\n\t\t        headers: { 'Origin': 'http://localhost:3000/' }, // only required with proxy\n\t\t        body: `{\"text\": \"${context.query}\"}`\n\t\t\t\t}))\n\t\t        .then(data => data.json());\n\n\t\t\t\t\n\t\t\t},\n\t\t\tonDone: [\n\t\t\t\t{\n\t\t\t\t\ttarget: '.invalid_query',\n\t\t\t\t\tcond: (context, event)=> { return ((event.data.intent.confidence) < 0.7) }\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttarget: \".valid_query\",\n                    actions: [\n\t\t\t\t\t\tassign((context, event) => { return {snippet: event.data.intent.name }}),\n\t\t\t\t\t\t(context:SDSContext, event:any) => console.log(event.data),\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t],\n\t\t\tonError: [\n\t\t\t\t{\n\t\t\t\t\ttarget: '.http_timeout',\n\t\t\t\t\tcond: (context, event)=> { console.log(event.data); return (event.data === 'TIMEOUT') }\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttarget: '#root.dm',\n\t\t\t\t\tactions: say(\"Sorry, there was an error. \")\n\t\t\t\t},\n\t\t\t]\n\t\t},\n\t\tstates: {\n\t\t\tprompt: {\n\t\t\t\t...promptAndAsk(\"Would you like to book an appointment, set a timer or add a to do item?\")\n\t\t\t},\n\t\t\tinvalid_query: {\n\t\t\t\tentry: send('INVALID_QUERY'),\n\t\t\t},\n\t\t\tvalid_query: {\n\t\t\t\tentry: send('VALID_QUERY'),\n\t\t\t},\n\t\t\thttp_timeout: {\n\t\t\t\tentry: send('HTTP_TIMEOUT'),\n\t\t\t},\n\t\t},\n\t})\n}\n\nconst commands = ['stop', 'help']\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'init',\n    id: 'init',\n    on: {\n\t\tMAXSPEECH: '#init',\n\t\tRECOGNISED: \n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\ttarget: \".stop\",\n\t\t\t\t\tcond: (context) => context.recResult === 'stop' ,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttarget: \".help\",\n\t\t\t\t\tcond: (context) => context.recResult === 'help' ,\n\t\t\t\t}\n\t\t\t],\n\t},\n    states: {\n        init: {\n            on: {\n                CLICK: 'welcome'\n            }\n        },\n\t\twelcome:{\n\t\t\tinitial: \"prompt\",\n\t\t\tid: \"welcome\",\n\t\t\ton: {\n\t\t\t\tRECOGNISED: {\n\t\t\t\t\ttarget: \"query\",\n\t\t\t\t\tactions: assign((context) => { return { query: context.recResult } })\n\t\t\t\t}\n\t\t\t},\n\t\t\tstates: {\n\t\t\t\tprompt: {\n\t\t\t\t\t...promptAndAsk(\"Would you like to book an appointment, set a timer or add a to do item?\")\n\t\t\t\t}\n            }\n\t\t},\n\t\tquery: {\n\t\t\tinitial:'rasa_query',\n\t\t\ton: {\n\t\t\t\tRECOGNISED: {\n\t\t\t\t\tcond: (context)=> !commands.includes(context.recResult),\n\t\t\t\t\ttarget: '.rasa_query',\n\t\t\t\t\tactions: assign((context) => { return { query: context.recResult } })\n\t\t\t\t},\n\t\t\t\tINVALID_QUERY: {\n\t\t\t\t\ttarget: '.invalid_query'\n\t\t\t\t},\n\t\t\t\tVALID_QUERY: {\n\t\t\t\t\ttarget: 'select_task'\n\t\t\t\t},\n\t\t\t},\n\t\t\tstates: {\n\t\t\t\trasa_query: {\n\t\t\t\t\t...nluRequest()\n\t\t\t\t},\n\t\t\t\tinvalid_query: {\n\t\t\t\t\t...promptAndAsk(\"Sorry, I don't understand, please say that again\"),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tselect_task: {\n\t\t\tinitial: \"select\",\n\t\t\tstates: {\n\t\t\t\tselect: {\n\t\t\t\t\talways: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcond: (context) => context.snippet ===  \"Appointment\",\n\t\t\t\t\t\t\ttarget: \"#who\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcond: (context) => context.snippet  ===  \"TODO\",\n\t\t\t\t\t\t\ttarget: \"#todo\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcond: (context) => context.snippet  ===  \"Timer\",\n\t\t\t\t\t\t\ttarget: \"#timer\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttarget: \"prompt\"\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\tprompt: { \n\t\t\t\t\tentry: say(\"Sorry, that isn't a valid answer\"),\n\t\t\t\t\ton: { ENDSPEECH: \"#welcome\"} \n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\ttodo: {\n            id: \"todo\",\n\t\t\tinitial: \"prompt\",\n\t\t\ton: {\n\t\t\t\tENDSPEECH: \"init\"\n\t\t\t},\n\t\t\tstates: {\n\t\t\t\tprompt: {\n\t\t\t\t\tentry: say(\"You are in the to do thing.\"),\n\t\t\t\t},\n\t\t\t}\n\t\t},\n\t\ttimer: {\n            id: \"timer\",\n\t\t\tinitial: \"prompt\",\n\t\t\ton: {\n\t\t\t\tENDSPEECH: \"init\"\n\t\t\t},\n\t\t\tstates: {\n\t\t\t\tprompt: {\n\t\t\t\t\tentry: say(\"You are in the timer thing.\")\n\t\t\t\t},\n\t\t\t}\n\t\t},\n        who: {\n            id: \"who\",\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"person\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { person: grammar[context.recResult].person }}),\n                    target: \"day\"\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    ...promptAndAsk(\"Who are you meeting with?\")\n                },\n                nomatch: {\n                    entry: say(\"Sorry I don't know them\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        day: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"day\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { day: grammar[context.recResult].day } }),\n                    target: \"whole_day_query\"\n\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person}. On which day is your meeting?`\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Can you please repeat that\"),\n                    on: { ENDSPEECH: \"ask\" }\n                }\n            }\n        },\n        whole_day_query: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [\n\t\t\t\t{\n\t\t\t\t\tcond: (context) => \"bool_val\" in (grammar[context.recResult] || {}) && (grammar[context.recResult].bool_val == false),\n                    actions: assign((context) => { return { bool_val: grammar[context.recResult].bool_val } }),\n                    target: \"meeting_time_query\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tcond: (context) => \"bool_val\" in (grammar[context.recResult] || {}) && (grammar[context.recResult].bool_val == true),\n                    actions: assign((context) => { return { bool_val: grammar[context.recResult].bool_val } }),\n                    target: \"confirm_full_day\"\n\t\t\t\t},\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Will the meeting take the whole day?`\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Can you please repeat that\"),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n            }\n        },\n        meeting_time_query: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"time\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { time: grammar[context.recResult].time } }),\n                    target: \"confirm_day_and_time\"\n\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `What time is the meeting?`\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Can you please repeat that\"),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n            }\n        },\n\t\tconfirm_day_and_time: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [\n\t\t\t\t{\n\t\t\t\t\tcond: (context) => \"bool_val\" in (grammar[context.recResult] || {}) && (grammar[context.recResult].bool_val == false),\n                    actions: assign((context) => { return { bool_val: grammar[context.recResult].bool_val } }),\n                    target: \"init\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tcond: (context) => \"bool_val\" in (grammar[context.recResult] || {}) && (grammar[context.recResult].bool_val == true),\n                    actions: assign((context) => { return { bool_val: grammar[context.recResult].bool_val } }),\n                    target: \"finalise\"\n\t\t\t\t},\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Do you want to create an appointment with ${context.person} on ${context.day} at ${context.time}?`\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Can you please repeat that\"),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n            }\n        },\n\t\tconfirm_full_day: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [\n\t\t\t\t{\n\t\t\t\t\tcond: (context) => \"bool_val\" in (grammar[context.recResult] || {}) && (grammar[context.recResult].bool_val == false),\n                    actions: assign((context) => { return { bool_val: grammar[context.recResult].bool_val } }),\n                    target: \"init\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tcond: (context) => \"bool_val\" in (grammar[context.recResult] || {}) && (grammar[context.recResult].bool_val == true),\n                    actions: assign((context) => { return { bool_val: grammar[context.recResult].bool_val } }),\n                    target: \"finalise\"\n\t\t\t\t},\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Do you want to create an appointment with ${context.person} on ${context.day} for the whole day?`\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Can you please repeat that\"),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n            }\n        },\n\t\tfinalise: {\n\t\t\tentry: say(\"Your appointment has been created.\"),\n\t\t\ton: { ENDSPEECH: \"init\" }\n\t\t},\n\t\tsay_error: {\n\t\t\ttarget: 'init',\n\t\t\tactions: say(\"Sorry, there was an error. \")\n\t\t},\n\t\tstop: {\n\t\t\tentry: say(\"Ok, program stopped\"),\n\t\t\ttarget: '#init'\n\t\t},\n\t\thelp: {\n\t\t\tentry: say(\"I'm supposed to help you but I won't\"),\n\t\t\ttarget: '#init'\n\t\t}\n\n    }\n})\n\n\n\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}