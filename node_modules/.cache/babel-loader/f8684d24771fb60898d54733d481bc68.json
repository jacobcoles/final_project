{"ast":null,"code":"import _objectSpread from \"/Users/jacobcoles/Desktop/LT2216/final_project/final_project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { actions, assign } from \"xstate\";\nconst send = actions.send,\n      cancel = actions.cancel;\n\nfunction say(text) {\n  return send(_context => ({\n    type: \"SPEAK\",\n    value: text\n  }));\n}\n\nfunction listen() {\n  return send('LISTEN');\n}\n\nconst grammar = {\n  //~ \"john\": { person: \"John Appleseed\" },\n  //~ \"sarah\": { person: \"Sarah Swiggity\" },\n  //~ \"daddy\": { person: \"The big lad\" },\n  //~ \"on monday\": { day: \"Friday\" },\n  //~ \"on tuesday\": { day: \"Thursday\" },\n  //~ \"on wednesday\": { day: \"Friday\" },\n  //~ \"on thursday\": { day: \"Thursday\" },\n  //~ \"on friday\": { day: \"Friday\" },\n  //~ \"on saturday\": { day: \"Thursday\" },\n  //~ \"on sunday\": { day: \"Friday\" },\n  //~ \"at 8\": { time: \"8:00\" },\n  //~ \"at 9\": { time: \"9:00\" },\n  //~ \"at 10\": { time: \"10:00\" },\n  //~ \"at 11\": { time: \"11:00\" },\n  //~ \"at 12\": { time: \"12:00\" },\n  //~ \"at 13\": { time: \"13:00\" },\n  //~ \"at 14\": { time: \"14:00\" },\n  //~ \"at 15\": { time: \"15:00\" },\n  //~ \"at 16\": { time: \"16:00\" },\n  //~ \"8\": { time: \"8:00\" },\n  //~ \"9\": { time: \"9:00\" },\n  //~ \"10\": { time: \"10:00\" },\n  //~ \"11\": { time: \"11:00\" },\n  //~ \"12\": { time: \"12:00\" },\n  //~ \"13\": { time: \"13:00\" },\n  //~ \"14\": { time: \"14:00\" },\n  //~ \"15\": { time: \"15:00\" },\n  //~ \"16\": { time: \"16:00\" },\n  //~ \"yes\": { bool_val: true },\n  //~ \"yeah\": { bool_val: true },\n  //~ \"ok\": { bool_val: true },\n  //~ \"sure\": { bool_val: true },\n  //~ \"ja\": { bool_val: true },\n  //~ \"no\": { bool_val: false },\n  //~ \"nope\": { bool_val: false },\n  //~ \"nein\": { bool_val: false },\n  //~ \"nej\": { bool_val: false },\n  //~ \"appointment\": { initial_function: \"appt\" },\n  //~ \"an appointment\": { initial_function: \"appt\" },\n  //~ \"set up an appointment\": { initial_function: \"appt\" },\n  //~ \"make an appointment\": { initial_function: \"appt\" },\n  //~ \"to do\": { initial_function: \"todo\" },\n  //~ \"set up a to do\": { initial_function: \"todo\" },\n  //~ \"make to do\": { initial_function: \"todo\" },\n  //~ \"make a to do\": { initial_function: \"todo\" },\n  //~ \"timer\": { initial_function: \"timer\" },\n  //~ \"make a timer\": { initial_function: \"timer\" },\n  //~ \"set a timer\": { initial_function: \"timer\" },\n  //~ \"set timer\": { initial_function: \"timer\" },\n  \"quick math\": {\n    quick_math: null\n  },\n  \"quick maths\": {\n    quick_math: null\n  },\n  \"play quick math\": {\n    quick_math: null\n  },\n  \"play quick maths\": {\n    quick_math: null\n  },\n  \"riddles\": {\n    riddles: null\n  },\n  \"play riddles\": {\n    riddles: null\n  },\n  \"chimp test\": {\n    chimp_test: null\n  },\n  \"play chimp test\": {\n    chimp_test: null\n  },\n  \"play the chimp test\": {\n    chimp_test: null\n  },\n  \"the chimp test\": {\n    chimp_test: null\n  }\n};\nconst riddles_store = {\n  0: {\n    riddle: \"What has to be broken before you can use it?\",\n    answers: [\"egg\", \"an egg\"],\n    hint: \"I like them scrambled. \"\n  },\n  1: {\n    riddle: \"What gets wet while drying?\",\n    answers: [\"towel\", \"a towel\", \"towels\"],\n    hint: \"You'll have to take one to the beach if you want to take a swim. \"\n  },\n  2: {\n    riddle: \"What can you give and still hold on to?\",\n    answers: [\"promise\", \"a promise\", \"promises\", \"your word\"],\n    hint: \"Relationships are more secure with these. \"\n  },\n  3: {\n    riddle: \"The more of this there is, the less you see. What is it?\",\n    answers: [\"darkness\", \"the dark\"],\n    hint: \"This descibes the absence rather than the presence of something. \"\n  },\n  4: {\n    riddle: \"This is as light as a feather, but you can't hold it too long. \",\n    answers: [\"your breath\", \"breath\", \"the breath\", \"a breath\"],\n    hint: \"Don't forget to do this or you'll die.\"\n  },\n  5: {\n    riddle: \"Before Mount Everest was discovered, what was the highest mountain on Earth?\",\n    answers: [\"everest\", \"mount everest\"],\n    hint: \"If nobody is there to observe it does that mean it is not true?\"\n  },\n  6: {\n    riddle: \"What runs around the whole yard without moving?\",\n    answers: [\"a fence\", \"fence\", \"fences\"],\n    hint: \"Some things described as running may be static. \"\n  },\n  7: {\n    riddle: \"What can you catch, but never throw?\",\n    answers: [\"a cold\", \"a virus\", \"a sickness\", \"a disease\", \"cold\", \"virus\", \"sickness\", \"disease\", \"colds\", \"viruses\", \"sicknesses\", \"diseases\"],\n    hint: \"Covid 19 has not been a great thing for the world. \"\n  }\n};\n\nfunction promptAndAsk(prompt) {\n  return {\n    initial: 'prompt',\n    states: {\n      prompt: {\n        entry: say(prompt),\n        on: {\n          ENDSPEECH: 'ask'\n        }\n      },\n      ask: {\n        entry: [send('LISTEN'), send('MAXSPEECH', {\n          delay: 4000,\n          id: 'maxspeech_cancel'\n        })]\n      }\n    }\n  };\n}\n\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\"; // can try instead \"https://boiling-depths-26621.herokuapp.com/\"\n\nconst rasaurl = 'https://rasajacobcoles.herokuapp.com/model/parse';\n\nfunction nluRequest() {\n  return {\n    initial: 'http_timeout',\n    invoke: {\n      id: \"rasaquery\",\n      src: (context, event) => {\n        return fetch(new Request(proxyurl + rasaurl, {\n          method: 'POST',\n          headers: {\n            'Origin': 'http://localhost:3000/'\n          },\n          // only required with proxy\n          body: \"{\\\"text\\\": \\\"\".concat(context.query, \"\\\"}\")\n        })).then(data => data.json());\n      },\n      onDone: [{\n        target: '.invalid_query',\n        cond: (context, event) => {\n          return event.data.intent.confidence < 0.7;\n        }\n      }, {\n        target: '.valid_query',\n        actions: [assign((context, event) => {\n          return {\n            snippet: event.data.intent.name\n          };\n        }), (context, event) => console.log(event.data)]\n      }],\n      onError: {\n        target: '#root.dm',\n        actions: say(\"Sorry, there was an error. \")\n      }\n    },\n    states: {\n      http_timeout: {\n        invoke: {\n          src: (context, event) => {\n            return new Promise(resolve => {\n              setTimeout(() => {\n                resolve();\n              }, 2000);\n            });\n          }\n        },\n        onDone: send('HTTP_TIMEOUT')\n      },\n      invalid_query: {\n        entry: send('INVALID_QUERY')\n      },\n      valid_query: {\n        entry: send('VALID_QUERY')\n      }\n    }\n  };\n}\n\nconst commands = ['stop', 'help'];\nexport const dmMachine = {\n  initial: 'main',\n  id: 'init',\n  on: {\n    MAXSPEECH: '.maxspeech',\n    RECOGNISED: [{\n      target: \".stop\",\n      cond: context => context.recResult === 'stop'\n    }, {\n      target: \".help\",\n      cond: context => context.recResult === 'help'\n    }]\n  },\n  states: {\n    main: {\n      initial: 'clicky',\n      states: {\n        hist: {\n          type: 'history',\n          history: 'shallow'\n        },\n        clicky: {\n          on: {\n            CLICK: 'begin'\n          }\n        },\n        begin: {\n          initial: \"prompt\",\n          id: \"welcome\",\n          on: {\n            RECOGNISED: [{\n              cond: context => \"quick_math\" in (grammar[context.recResult] || {}),\n              //actions: assign((context) => { return { quick_math: grammar[context.recResult].quick_math }}),\n              target: \"quick_math\"\n            }, {\n              target: \"riddles.hist\",\n              cond: context => \"riddles\" in (grammar[context.recResult] || {})\n            }, {\n              target: \"chimp_test\",\n              cond: context => \"chimp_test\" in (grammar[context.recResult] || {})\n            }, {\n              target: \"please_repeat\",\n              cond: context => !commands.includes(context.recResult)\n            }]\n          },\n          states: {\n            prompt: _objectSpread({}, promptAndAsk(\"Hellooo. You have a selection of one of the following mini games. You can choose between quick maths, riddles, or the chimp test. You can also tell me to stop or ask for help at any time. \"))\n          }\n        },\n        quick_math: {\n          id: \"todo\",\n          initial: \"prompt\",\n          on: {\n            ENDSPEECH: \"#init\"\n          },\n          states: {\n            prompt: {\n              entry: say(\"You are in the to do thing.\")\n            }\n          }\n        },\n        riddles: {\n          id: \"riddles\",\n          initial: \"prompt\",\n          on: {\n            //~ MAXSPEECH: {\n            //~ actions: say(\"Sorry, you have taken too\")\n            //~ },\n            RECOGNISED: [{\n              cond: context => riddles_store[context.riddle_id].answers.includes(context.recResult),\n              actions: say(\"Well done, that is correct!\"),\n              target: '#init'\n            }, {\n              cond: context => context.recResult == 'hint',\n              target: '.hint'\n            }, {\n              target: \".wrong_answer\",\n              cond: context => !commands.includes(context.recResult)\n            }]\n          },\n          states: {\n            hist: {\n              type: 'history',\n              history: 'shallow'\n            },\n            prompt: {\n              entry: say(\"Here is your riddle\"),\n              on: {\n                ENDSPEECH: {\n                  target: \"ask_riddle\",\n                  actions: assign(context => {\n                    if (\"riddle_id\" in context) {\n                      return {\n                        riddle_id: Math.floor(Math.random() * 7)\n                      };\n                    }\n\n                    return {};\n                  })\n                }\n              }\n            },\n            hint: {\n              entry: send(context => ({\n                type: \"SPEAK\",\n                value: \"The hint is \".concat(riddles_store[context.riddle_id].hint, \". So\")\n              }))\n            },\n            ask_riddle: {\n              entry: send(context => ({\n                type: \"SPEAK\",\n                value: \"\".concat(riddles_store[context.riddle_id].riddle, \".\")\n              })),\n              on: {\n                ENDSPEECH: \"ask\"\n              }\n            },\n            wrong_answer: {\n              entry: say(\"Sorry, that isn't right, try again. \"),\n              on: {\n                ENDSPEECH: \"ask\"\n              }\n            },\n            ask: {\n              entry: [send('LISTEN'), send('MAXSPEECH', {\n                delay: 5000,\n                id: 'maxspeech_cancel'\n              })]\n            }\n          }\n        },\n        chimp_test: {\n          id: \"timer\",\n          initial: \"prompt\",\n          on: {\n            ENDSPEECH: \"#init\"\n          },\n          states: {\n            prompt: {\n              entry: say(\"You are in the timer thing.\")\n            }\n          }\n        },\n        please_repeat: {\n          id: \"please_repeat\",\n          initial: \"prompt\",\n          on: {\n            ENDSPEECH: \"#init\"\n          },\n          states: {\n            prompt: {\n              entry: say(\"Sorry, I didn't get that. \")\n            }\n          },\n          on: {\n            ENDSPEECH: \"#init.main.hist\"\n          }\n        }\n      }\n    },\n    maxspeech: {\n      entry: say(\"Sorry,\"),\n      on: {\n        ENDSPEECH: [{\n          cond: context => context.maxspeech_count < 3,\n          target: 'main.hist'\n        }, {\n          actions: [assign(context => {\n            return {\n              maxspeech_count: 0\n            };\n          }), say(\"Cancelled because you don't say nutting\")],\n          target: '#init'\n        }]\n      }\n    },\n    stop: {\n      entry: say(\"Ok, program stopped\"),\n      on: {\n        ENDSPEECH: {\n          target: '#init'\n        }\n      }\n    },\n    help: {\n      entry: say(\"I'm supposed to help you but I won't\"),\n      on: {\n        ENDSPEECH: {\n          target: '#init'\n        }\n      }\n    }\n  }\n}; //~ export const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n//~ initial: 'init',\n//~ states: {\n//~ init: {\n//~ on: {\n//~ CLICK: 'welcome'\n//~ }\n//~ },\n//~ welcome: {\n//~ on: {\n//~ RECOGNISED: [\n//~ { target: 'stop', cond: (context) => context.recResult === 'stop' },\n//~ { target: 'repaint' }]\n//~ },\n//~ ...promptAndAsk(\"Tell me the colour\")\n//~ },\n//~ stop: {\n//~ entry: say(\"Ok\"),\n//~ always: 'init'\n//~ },\n//~ repaint: {\n//~ initial: 'prompt',\n//~ states: {\n//~ prompt: {\n//~ entry: sayColour,\n//~ on: { ENDSPEECH: 'repaint' }\n//~ },\n//~ repaint: {\n//~ entry: 'changeColour',\n//~ always: '#root.dm.welcome'\n//~ }\n//~ }\n//~ }\n//~ }\n//~ })","map":{"version":3,"sources":["/Users/jacobcoles/Desktop/LT2216/final_project/final_project/src/final_project.ts"],"names":["actions","assign","send","cancel","say","text","_context","type","value","listen","grammar","quick_math","riddles","chimp_test","riddles_store","riddle","answers","hint","promptAndAsk","prompt","initial","states","entry","on","ENDSPEECH","ask","delay","id","proxyurl","rasaurl","nluRequest","invoke","src","context","event","fetch","Request","method","headers","body","query","then","data","json","onDone","target","cond","intent","confidence","snippet","name","console","log","onError","http_timeout","Promise","resolve","setTimeout","invalid_query","valid_query","commands","dmMachine","MAXSPEECH","RECOGNISED","recResult","main","hist","history","clicky","CLICK","begin","includes","riddle_id","Math","floor","random","ask_riddle","wrong_answer","please_repeat","maxspeech","maxspeech_count","stop","help"],"mappings":"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","sourcesContent":["import { MachineConfig, actions, Action, assign } from \"xstate\";\nconst { send, cancel } = actions;\n\n\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string, bool_val?: boolean, initial_function: string } } = {\n    //~ \"john\": { person: \"John Appleseed\" },\n    //~ \"sarah\": { person: \"Sarah Swiggity\" },\n    //~ \"daddy\": { person: \"The big lad\" },\n    //~ \"on monday\": { day: \"Friday\" },\n    //~ \"on tuesday\": { day: \"Thursday\" },\n    //~ \"on wednesday\": { day: \"Friday\" },\n    //~ \"on thursday\": { day: \"Thursday\" },\n    //~ \"on friday\": { day: \"Friday\" },\n    //~ \"on saturday\": { day: \"Thursday\" },\n    //~ \"on sunday\": { day: \"Friday\" },\n    //~ \"at 8\": { time: \"8:00\" },\n    //~ \"at 9\": { time: \"9:00\" },\n    //~ \"at 10\": { time: \"10:00\" },\n    //~ \"at 11\": { time: \"11:00\" },\n    //~ \"at 12\": { time: \"12:00\" },\n    //~ \"at 13\": { time: \"13:00\" },\n    //~ \"at 14\": { time: \"14:00\" },\n    //~ \"at 15\": { time: \"15:00\" },\n    //~ \"at 16\": { time: \"16:00\" },\n    //~ \"8\": { time: \"8:00\" },\n    //~ \"9\": { time: \"9:00\" },\n    //~ \"10\": { time: \"10:00\" },\n    //~ \"11\": { time: \"11:00\" },\n    //~ \"12\": { time: \"12:00\" },\n    //~ \"13\": { time: \"13:00\" },\n    //~ \"14\": { time: \"14:00\" },\n    //~ \"15\": { time: \"15:00\" },\n    //~ \"16\": { time: \"16:00\" },\n    //~ \"yes\": { bool_val: true },\n\t//~ \"yeah\": { bool_val: true },\n\t//~ \"ok\": { bool_val: true },\n\t//~ \"sure\": { bool_val: true },\n\t//~ \"ja\": { bool_val: true },\n    //~ \"no\": { bool_val: false },\n\t//~ \"nope\": { bool_val: false },\n\t//~ \"nein\": { bool_val: false },\n\t//~ \"nej\": { bool_val: false },\n\t//~ \"appointment\": { initial_function: \"appt\" },\n\t//~ \"an appointment\": { initial_function: \"appt\" },\n\t//~ \"set up an appointment\": { initial_function: \"appt\" },\n\t//~ \"make an appointment\": { initial_function: \"appt\" },\n\t//~ \"to do\": { initial_function: \"todo\" },\n\t//~ \"set up a to do\": { initial_function: \"todo\" },\n\t//~ \"make to do\": { initial_function: \"todo\" },\n\t//~ \"make a to do\": { initial_function: \"todo\" },\n\t//~ \"timer\": { initial_function: \"timer\" },\n\t//~ \"make a timer\": { initial_function: \"timer\" },\n\t//~ \"set a timer\": { initial_function: \"timer\" },\n\t//~ \"set timer\": { initial_function: \"timer\" },\n\n\t\"quick math\": { quick_math: null },\n\t\"quick maths\": { quick_math: null },\n\t\"play quick math\": { quick_math: null },\n\t\"play quick maths\": { quick_math: null },\n\t\n\t\"riddles\": { riddles: null },\n\t\"play riddles\": { riddles: null },\n\t\n\t\"chimp test\": { chimp_test: null },\n\t\"play chimp test\": { chimp_test: null },\n\t\"play the chimp test\": { chimp_test: null },\n\t\"the chimp test\": { chimp_test: null },\n\t\t\n\t\n}\n\nconst riddles_store = {\n\t0: {\n\t\triddle: \"What has to be broken before you can use it?\",\n\t\tanswers: [\n\t\t\t\"egg\",\n\t\t\t\"an egg\",\n\t\t],\n\t\thint: \"I like them scrambled. \"\n\t},\n\t1: {\n\t\triddle: \"What gets wet while drying?\",\n\t\tanswers: [\n\t\t\t\"towel\",\n\t\t\t\"a towel\",\n\t\t\t\"towels\",\n\t\t],\n\t\thint: \"You'll have to take one to the beach if you want to take a swim. \"\n\t},\n\t2: {\n\t\triddle: \"What can you give and still hold on to?\",\n\t\tanswers: [\n\t\t\t\"promise\",\n\t\t\t\"a promise\",\n\t\t\t\"promises\",\n\t\t\t\"your word\"\n\t\t],\n\t\thint: \"Relationships are more secure with these. \"\n\t},\n\t3: {\n\t\triddle: \"The more of this there is, the less you see. What is it?\",\n\t\tanswers: [\n\t\t\t\"darkness\",\n\t\t\t\"the dark\",\n\t\t],\n\t\thint: \"This descibes the absence rather than the presence of something. \"\n\t},\n\t4: {\n\t\triddle: \"This is as light as a feather, but you can't hold it too long. \",\n\t\tanswers: [\n\t\t\t\"your breath\",\n\t\t\t\"breath\",\n\t\t\t\"the breath\",\n\t\t\t\"a breath\"\n\t\t],\n\t\thint: \"Don't forget to do this or you'll die.\"\n\t},\n\t5: {\n\t\triddle: \"Before Mount Everest was discovered, what was the highest mountain on Earth?\",\n\t\tanswers: [\n\t\t\t\"everest\",\n\t\t\t\"mount everest\"\n\t\t],\n\t\thint: \"If nobody is there to observe it does that mean it is not true?\"\n\t},\n\t6: {\n\t\triddle: \"What runs around the whole yard without moving?\",\n\t\tanswers: [\n\t\t\t\"a fence\",\n\t\t\t\"fence\",\n\t\t\t\"fences\",\n\t\t],\n\t\thint: \"Some things described as running may be static. \"\n\t},\n\t7: {\n\t\triddle: \"What can you catch, but never throw?\",\n\t\tanswers: [\n\t\t\t\"a cold\",\n\t\t\t\"a virus\",\n\t\t\t\"a sickness\",\n\t\t\t\"a disease\",\n\t\t\t\"cold\",\n\t\t\t\"virus\",\n\t\t\t\"sickness\",\n\t\t\t\"disease\",\n\t\t\t\"colds\",\n\t\t\t\"viruses\",\n\t\t\t\"sicknesses\",\n\t\t\t\"diseases\",\n\t\t],\n\t\thint: \"Covid 19 has not been a great thing for the world. \"\n\t},\n\t\n}\n\nfunction promptAndAsk(prompt: string): MachineConfig<SDSContext, any, SDSEvent> {\n\t\n    return ({\n        initial: 'prompt',\n        states: {\n            prompt: {\n                entry: say(prompt),\n                on: { ENDSPEECH: 'ask' }\n            },\n            ask: {\n                entry: [\n\t\t\t\t\tsend('LISTEN'),\n\t\t\t\t\tsend( 'MAXSPEECH', { delay: 4000, id: 'maxspeech_cancel' } )\n\t\t\t\t]\n            },\n        }\n    })\n}\n\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\" // can try instead \"https://boiling-depths-26621.herokuapp.com/\"\nconst rasaurl = 'https://rasajacobcoles.herokuapp.com/model/parse'\nfunction nluRequest(): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n\t\tinitial: 'http_timeout',\n\t\tinvoke: {\n\t\t\tid: \"rasaquery\",\n\t\t\tsrc: (context, event) => {\n\t\t\t\t\n\t\t\t\treturn fetch(new Request(proxyurl + rasaurl, {\n\t\t        method: 'POST',\n\t\t        headers: { 'Origin': 'http://localhost:3000/' }, // only required with proxy\n\t\t        body: `{\"text\": \"${context.query}\"}`\n\t\t\t\t}))\n\t\t        .then(data => data.json());\n\n\t\t\t},\n\t\t\tonDone: [\n\t\t\t\t{\n\t\t\t\t\ttarget: '.invalid_query',\n\t\t\t\t\tcond: (context, event)=> { return ((event.data.intent.confidence) < 0.7) }\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttarget: '.valid_query',\n                    actions: [\n\t\t\t\t\t\tassign((context, event) => { return {snippet: event.data.intent.name }}),\n\t\t\t\t\t\t(context:SDSContext, event:any) => console.log(event.data),\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t],\n\t\t\tonError: {\n\t\t\t\t\ttarget: '#root.dm',\n\t\t\t\t\tactions: say(\"Sorry, there was an error. \")\n\t\t\t\t},\n\t\t},\n\t\tstates: {\n\t\t\thttp_timeout: {\n\t\t\t\tinvoke: {\n\t\t\t\t\tsrc: (context, event) => {\n\t\t\t\t\t\treturn new Promise((resolve) => {\n\t\t\t\t\t\t\t\tsetTimeout(() => { resolve() }, 2000) \n\t\t\t\t\t\t\t})\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tonDone: send('HTTP_TIMEOUT')\n\t\t\t},\n\t\t\tinvalid_query: {\n\t\t\t\tentry: send('INVALID_QUERY'),\n\t\t\t},\n\t\t\tvalid_query: {\n\t\t\t\tentry: send('VALID_QUERY'),\n\t\t\t},\n\t\t},\n\t})\n}\n\nconst commands = ['stop', 'help']\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'main',\n    id: 'init',\n    on: {\n\t\tMAXSPEECH: '.maxspeech',\n\t\tRECOGNISED: \n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\ttarget: \".stop\",\n\t\t\t\t\tcond: (context) => context.recResult === 'stop' ,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttarget: \".help\",\n\t\t\t\t\tcond: (context) => context.recResult === 'help' ,\n\t\t\t\t}\n\t\t\t],\n\t},\n    states: {\n        main: {\n\t\t\tinitial: 'clicky',\n\t\t\tstates: {\n\t\t\t\thist: {\n\t\t\t\t\ttype: 'history',\n\t\t\t\t\thistory: 'shallow',\n\t\t\t\t },\n\t\t\t\tclicky: {\n\t\t\t\t\ton: {\n\t\t\t\t\t\tCLICK: 'begin'\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tbegin:{\n\t\t\t\t\tinitial: \"prompt\",\n\t\t\t\t\tid: \"welcome\",\n\t\t\t\t\ton: {\n\t\t\t\t\t\tRECOGNISED: [\n\t\t\t\t\t\t\t{\n\t\t\t                    cond: (context) => \"quick_math\" in (grammar[context.recResult] || {}),\n\t\t\t                    //actions: assign((context) => { return { quick_math: grammar[context.recResult].quick_math }}),\n\t\t\t                    target: \"quick_math\"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttarget: \"riddles.hist\",\n\t\t\t\t\t\t\t\tcond: (context) => \"riddles\" in (grammar[context.recResult] || {}),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttarget: \"chimp_test\",\n\t\t\t\t\t\t\t\tcond: (context) => \"chimp_test\" in (grammar[context.recResult] || {}),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttarget: \"please_repeat\",\n\t\t\t\t\t\t\t\tcond: (context) => !commands.includes(context.recResult)\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\tstates: {\n\t\t\t\t\t\tprompt: {\n\t\t\t\t\t\t\t...promptAndAsk(\"Hellooo. You have a selection of one of the following mini games. You can choose between quick maths, riddles, or the chimp test. You can also tell me to stop or ask for help at any time. \")\n\t\t\t\t\t\t}\n\t\t            }\n\t\t\t\t},\n\t\t\t\tquick_math: {\n\t\t            id: \"todo\",\n\t\t\t\t\tinitial: \"prompt\",\n\t\t\t\t\ton: {\n\t\t\t\t\t\tENDSPEECH: \"#init\"\n\t\t\t\t\t},\n\t\t\t\t\tstates: {\n\t\t\t\t\t\tprompt: {\n\t\t\t\t\t\t\tentry: say(\"You are in the to do thing.\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\triddles: {\n\t\t            id: \"riddles\",\n\t\t\t\t\tinitial: \"prompt\",\n\t\t\t\t\ton: {\n\t\t\t\t\t\t//~ MAXSPEECH: {\n\t\t\t\t\t\t\t//~ actions: say(\"Sorry, you have taken too\")\n\t\t\t\t\t\t//~ },\n\t\t\t\t\t\tRECOGNISED: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcond: context => riddles_store[context.riddle_id].answers.includes(context.recResult),\n\t\t\t\t\t\t\t\tactions: say(\"Well done, that is correct!\"),\n\t\t\t\t\t\t\t\ttarget: '#init'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcond: context => context.recResult == 'hint',\n\t\t\t                    target: '.hint'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{ \n\t\t\t\t\t\t\t\ttarget: \".wrong_answer\" ,\n\t\t\t\t\t\t\t\tcond: (context) => !commands.includes(context.recResult)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\tstates: {\t\n\t\t\t\t\t\thist: {\n\t\t\t\t\t\t\ttype: 'history',\n\t\t\t\t\t\t\thistory: 'shallow',\n\t\t\t\t\t\t },\n\t\t\t\t\t\tprompt: {\n\t\t\t\t\t\t\tentry: say(\"Here is your riddle\"),\n\t\t\t\t\t\t\ton: {\n\t\t\t\t\t\t\t\tENDSPEECH: {\n\t\t\t\t\t\t\t\t\ttarget: \"ask_riddle\",\n\t\t\t\t\t\t\t\t\tactions: assign((context) => {\n\t\t\t\t\t\t\t\t\t\tif (\"riddle_id\" in context){\n\t\t\t\t\t\t\t\t\t\t\treturn { riddle_id: Math.floor(Math.random() * 7) }\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\treturn {}\n\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\thint: {\n\t\t\t\t\t\t\tentry: send((context) => ({\n\t\t                        type: \"SPEAK\",\n\t\t                        value: `The hint is ${riddles_store[context.riddle_id].hint}. So`\n\t\t                    })),\n\t\t\t\t\t\t},\n\t\t\t\t\t\task_riddle: {\n\t\t\t\t\t\t\tentry: send((context) => ({\n\t\t                        type: \"SPEAK\",\n\t\t                        value: `${riddles_store[context.riddle_id].riddle}.`\n\t\t                    })),\n\t\t                    on: { ENDSPEECH: \"ask\" }\n\t\t\t\t\t\t},\n\t\t\t\t\t\twrong_answer: {\n\t\t\t\t\t\t\tentry: say(\"Sorry, that isn't right, try again. \"),\n\t\t\t\t\t\t\ton: { ENDSPEECH: \"ask\" }\n\t\t\t\t\t\t},\n\t\t\t\t\t\task: {\n\t\t\t                entry: [\n\t\t\t\t\t\t\t\tsend('LISTEN'),\n\t\t\t\t\t\t\t\tsend( 'MAXSPEECH', { delay: 5000, id: 'maxspeech_cancel' } )\n\t\t\t\t\t\t\t],\n\t\t\t            },\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tchimp_test: {\n\t\t            id: \"timer\",\n\t\t\t\t\tinitial: \"prompt\",\n\t\t\t\t\ton: {\n\t\t\t\t\t\tENDSPEECH: \"#init\"\n\t\t\t\t\t},\n\t\t\t\t\tstates: {\n\t\t\t\t\t\tprompt: {\n\t\t\t\t\t\t\tentry: say(\"You are in the timer thing.\")\n\t\t\t\t\t\t},\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tplease_repeat: {\n\t\t            id: \"please_repeat\",\n\t\t\t\t\tinitial: \"prompt\",\n\t\t\t\t\ton: {\n\t\t\t\t\t\tENDSPEECH: \"#init\"\n\t\t\t\t\t},\n\t\t\t\t\tstates: {\n\t\t\t\t\t\tprompt: {\n\t\t\t\t\t\t\tentry: say(\"Sorry, I didn't get that. \")\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\ton: { ENDSPEECH: \"#init.main.hist\" }\n\t\t\t\t},\n\t\t    },\n\t\t},\n\t\tmaxspeech: {\n\t\t\tentry: say(\"Sorry,\"),\n\t\t\ton: {\n\t\t\t\tENDSPEECH: [\n\t\t\t\t\t{\n\t\t\t\t\t\tcond: (context)=> context.maxspeech_count < 3,\n\t\t\t\t\t\ttarget: 'main.hist'\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tactions: [\n\t\t\t\t\t\t\tassign((context) => { return { maxspeech_count: 0 } }),\n\t\t\t\t\t\t\tsay(\"Cancelled because you don't say nutting\")\n\t\t\t\t\t\t],\n\t\t\t\t\t\ttarget: '#init'\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t},\n\t\tstop: {\n\t\t\tentry: say(\"Ok, program stopped\"),\n\t\t\ton: {\n\t\t\t\tENDSPEECH: {\n\t\t\t\t\ttarget: '#init'\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\thelp: {\n\t\t\tentry: say(\"I'm supposed to help you but I won't\"),\n\t\t\ton: {\n\t\t\t\tENDSPEECH: {\n\t\t\t\t\ttarget: '#init'\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n})\n\n\n\n\n\n\n\n\n\n\n//~ export const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    //~ initial: 'init',\n    //~ states: {\n        //~ init: {\n            //~ on: {\n                //~ CLICK: 'welcome'\n            //~ }\n        //~ },\n        //~ welcome: {\n            //~ on: {\n                //~ RECOGNISED: [\n                    //~ { target: 'stop', cond: (context) => context.recResult === 'stop' },\n                    //~ { target: 'repaint' }]\n            //~ },\n            //~ ...promptAndAsk(\"Tell me the colour\")\n        //~ },\n        //~ stop: {\n            //~ entry: say(\"Ok\"),\n            //~ always: 'init'\n        //~ },\n        //~ repaint: {\n            //~ initial: 'prompt',\n            //~ states: {\n                //~ prompt: {\n                    //~ entry: sayColour,\n                    //~ on: { ENDSPEECH: 'repaint' }\n                //~ },\n                //~ repaint: {\n                    //~ entry: 'changeColour',\n                    //~ always: '#root.dm.welcome'\n                //~ }\n            //~ }\n        //~ }\n    //~ }\n//~ })\n"]},"metadata":{},"sourceType":"module"}