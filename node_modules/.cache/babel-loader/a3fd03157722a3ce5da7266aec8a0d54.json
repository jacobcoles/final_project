{"ast":null,"code":"import { send, assign } from \"xstate\";\n\nfunction say(text) {\n  return send(_context => ({\n    type: \"SPEAK\",\n    value: text\n  }));\n}\n\nfunction listen() {\n  return send('LISTEN');\n}\n\nconst grammar = {\n  \"John\": {\n    person: \"John Appleseed\"\n  },\n  \"Sarah\": {\n    person: \"Sarah Swiggity\"\n  },\n  \"Laddie\": {\n    person: \"The big lad\"\n  },\n  \"on monday\": {\n    day: \"Friday\"\n  },\n  \"on tuesday\": {\n    day: \"Thursday\"\n  },\n  \"on wednesday\": {\n    day: \"Friday\"\n  },\n  \"on thursday\": {\n    day: \"Thursday\"\n  },\n  \"on friday\": {\n    day: \"Friday\"\n  },\n  \"on saturday\": {\n    day: \"Thursday\"\n  },\n  \"on sunday\": {\n    day: \"Friday\"\n  },\n  \"at eight\": {\n    time: \"8:00\"\n  },\n  \"at nine\": {\n    time: \"9:00\"\n  },\n  \"at ten\": {\n    time: \"10:00\"\n  },\n  \"at eleven\": {\n    time: \"11:00\"\n  },\n  \"at twelve\": {\n    time: \"12:00\"\n  },\n  \"at thirteen\": {\n    time: \"13:00\"\n  },\n  \"at fourteen\": {\n    time: \"14:00\"\n  },\n  \"at fifteen\": {\n    time: \"15:00\"\n  },\n  \"at sixteen\": {\n    time: \"16:00\"\n  },\n  \"yes\": {\n    bool_val: true\n  },\n  \"no\": {\n    bool_val: false\n  }\n};\nexport const dmMachine = {\n  initial: 'init',\n  states: {\n    init: {\n      on: {\n        CLICK: 'welcome'\n      }\n    },\n    welcome: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"who\"\n      },\n      states: {\n        prompt: {\n          entry: say(\"Let's create an appointment\")\n        }\n      }\n    },\n    who: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"person\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              person: grammar[context.recResult].person\n            };\n          }),\n          target: \"day\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: say(\"Who are you meeting with?\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry I don't know them\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    day: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"day\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              day: grammar[context.recResult].day\n            };\n          }),\n          target: \"whole_day_query\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"OK. \".concat(context.person, \". On which day is your meeting?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Can you please repeat that\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        }\n      }\n    },\n    whole_day_query: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => grammar[context.recResult].bool_val == false,\n          actions: assign(context => {\n            return {\n              bool_val: grammar[context.recResult].bool_val\n            };\n          }),\n          target: \"meeting_time_query\"\n        }, {\n          cond: context => grammar[context.recResult].bool_val == true,\n          actions: assign(context => {\n            return {\n              bool_val: grammar[context.recResult].bool_val\n            };\n          }),\n          target: \"init\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Will the meeting take the whole day?\"\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Can you please repeat that\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        }\n      }\n    },\n    meeting_time_query: {\n      initial: \"prompt\",\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"potato\"\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Can you please repeat that\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        }\n      }\n    }\n  }\n}; //OLD\n//meeting_time: {\n//initial: \"prompt\",\n//on: {\n//RECOGNISED: [{\n//cond: (context) => true == ( (grammar[context.recResult][\"whole_day_bool\"]) || false ),\n//actions: assign((context) => { return { day: grammar[context.recResult].day, name, time } }),\n//target: \"init\"\n//},\n//{\n//cond: (context) => false == ( (grammar[context.recResult][\"whole_day_bool\"]) || true ),\n//actions: assign((context) => { return { day: grammar[context.recResult].day } }),\n//target: \"meeting_time\"\n//},\n//{ target: \".nomatch\" }]\n//},\n//states: {\n//prompt: {\n//entry: send((context) => ({\n//type: \"SPEAK\",\n//value: `Will the meeting take the whole day?`\n//})),\n//on: { ENDSPEECH: \"ask\" }\n//},\n//ask: {\n//entry: listen()\n//},\n//nomatch: {\n//entry: say(\"Can you please repeat that\"),\n//on: { ENDSPEECH: \"ask\" }\n//}\n//}\n//},\n//create_appt_query: {\n//initial: \"prompt\",\n//on: {\n//RECOGNISED: [{\n//cond: (context) => true == ( (grammar[context.recResult][\"whole_day_bool\"]) || false ),\n//actions: assign((context) => { return { day: grammar[context.recResult].day, name, time } }),\n//target: \"init\"\n//},\n//{\n//cond: (context) => false == ( (grammar[context.recResult][\"whole_day_bool\"]) || true ),\n//actions: assign((context) => { return { day: grammar[context.recResult].day } }),\n//target: \"meeting_time\"\n//},\n//{ target: \".nomatch\" }]\n//},\n//states: {\n//prompt: {\n//entry: send((context) => ({\n//type: \"SPEAK\",\n//value: `Will the meeting take the whole day?`\n//})),\n//on: { ENDSPEECH: \"ask\" }\n//},\n//ask: {\n//entry: listen()\n//},\n//nomatch: {\n//entry: say(\"Can you please repeat that\"),\n//on: { ENDSPEECH: \"ask\" }\n//}\n//}\n//},","map":{"version":3,"sources":["/Users/jacobcoles/Desktop/LT2216/Lab2/react-xstate-colourchanger/src/dmAppointment.ts"],"names":["send","assign","say","text","_context","type","value","listen","grammar","person","day","time","bool_val","dmMachine","initial","states","init","on","CLICK","welcome","ENDSPEECH","prompt","entry","who","RECOGNISED","cond","context","recResult","actions","target","ask","nomatch","whole_day_query","meeting_time_query"],"mappings":"AAAA,SAAwBA,IAAxB,EAAsCC,MAAtC,QAAoD,QAApD;;AAGA,SAASC,GAAT,CAAaC,IAAb,EAAyD;AACrD,SAAOH,IAAI,CAAEI,QAAD,KAA2B;AAAEC,IAAAA,IAAI,EAAE,OAAR;AAAiBC,IAAAA,KAAK,EAAEH;AAAxB,GAA3B,CAAD,CAAX;AACH;;AAED,SAASI,MAAT,GAAgD;AAC5C,SAAOP,IAAI,CAAC,QAAD,CAAX;AACH;;AAED,MAAMQ,OAA6F,GAAG;AAClG,UAAQ;AAAEC,IAAAA,MAAM,EAAE;AAAV,GAD0F;AAElG,WAAS;AAAEA,IAAAA,MAAM,EAAE;AAAV,GAFyF;AAGlG,YAAU;AAAEA,IAAAA,MAAM,EAAE;AAAV,GAHwF;AAIlG,eAAa;AAAEC,IAAAA,GAAG,EAAE;AAAP,GAJqF;AAKlG,gBAAc;AAAEA,IAAAA,GAAG,EAAE;AAAP,GALoF;AAMlG,kBAAgB;AAAEA,IAAAA,GAAG,EAAE;AAAP,GANkF;AAOlG,iBAAe;AAAEA,IAAAA,GAAG,EAAE;AAAP,GAPmF;AAQlG,eAAa;AAAEA,IAAAA,GAAG,EAAE;AAAP,GARqF;AASlG,iBAAe;AAAEA,IAAAA,GAAG,EAAE;AAAP,GATmF;AAUlG,eAAa;AAAEA,IAAAA,GAAG,EAAE;AAAP,GAVqF;AAWlG,cAAY;AAAEC,IAAAA,IAAI,EAAE;AAAR,GAXsF;AAYlG,aAAW;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAZuF;AAalG,YAAU;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAbwF;AAclG,eAAa;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAdqF;AAelG,eAAa;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAfqF;AAgBlG,iBAAe;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAhBmF;AAiBlG,iBAAe;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAjBmF;AAkBlG,gBAAc;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAlBoF;AAmBlG,gBAAc;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAnBoF;AAoBlG,SAAO;AAAEC,IAAAA,QAAQ,EAAE;AAAZ,GApB2F;AAqBlG,QAAM;AAAEA,IAAAA,QAAQ,EAAE;AAAZ;AArB4F,CAAtG;AAyBA,OAAO,MAAMC,SAAmD,GAAI;AAChEC,EAAAA,OAAO,EAAE,MADuD;AAEhEC,EAAAA,MAAM,EAAE;AACJC,IAAAA,IAAI,EAAE;AACFC,MAAAA,EAAE,EAAE;AACAC,QAAAA,KAAK,EAAE;AADP;AADF,KADF;AAMJC,IAAAA,OAAO,EAAE;AACLL,MAAAA,OAAO,EAAE,QADJ;AAELG,MAAAA,EAAE,EAAE;AAAEG,QAAAA,SAAS,EAAE;AAAb,OAFC;AAGLL,MAAAA,MAAM,EAAE;AACJM,QAAAA,MAAM,EAAE;AAAEC,UAAAA,KAAK,EAAEpB,GAAG,CAAC,6BAAD;AAAZ;AADJ;AAHH,KANL;AAaJqB,IAAAA,GAAG,EAAE;AACDT,MAAAA,OAAO,EAAE,QADR;AAEDG,MAAAA,EAAE,EAAE;AACAO,QAAAA,UAAU,EAAE,CAAC;AACTC,UAAAA,IAAI,EAAGC,OAAD,IAAa,aAAalB,OAAO,CAACkB,OAAO,CAACC,SAAT,CAAP,IAA8B,EAA3C,CADV;AAETC,UAAAA,OAAO,EAAE3B,MAAM,CAAEyB,OAAD,IAAa;AAAE,mBAAO;AAAEjB,cAAAA,MAAM,EAAED,OAAO,CAACkB,OAAO,CAACC,SAAT,CAAP,CAA2BlB;AAArC,aAAP;AAAqD,WAArE,CAFN;AAGToB,UAAAA,MAAM,EAAE;AAHC,SAAD,EAKZ;AAAEA,UAAAA,MAAM,EAAE;AAAV,SALY;AADZ,OAFH;AAUDd,MAAAA,MAAM,EAAE;AACJM,QAAAA,MAAM,EAAE;AACJC,UAAAA,KAAK,EAAEpB,GAAG,CAAC,2BAAD,CADN;AAEJe,UAAAA,EAAE,EAAE;AAAEG,YAAAA,SAAS,EAAE;AAAb;AAFA,SADJ;AAKJU,QAAAA,GAAG,EAAE;AACDR,UAAAA,KAAK,EAAEf,MAAM;AADZ,SALD;AAQJwB,QAAAA,OAAO,EAAE;AACLT,UAAAA,KAAK,EAAEpB,GAAG,CAAC,yBAAD,CADL;AAELe,UAAAA,EAAE,EAAE;AAAEG,YAAAA,SAAS,EAAE;AAAb;AAFC;AARL;AAVP,KAbD;AAqCJV,IAAAA,GAAG,EAAE;AACDI,MAAAA,OAAO,EAAE,QADR;AAEDG,MAAAA,EAAE,EAAE;AACAO,QAAAA,UAAU,EAAE,CAAC;AACTC,UAAAA,IAAI,EAAGC,OAAD,IAAa,UAAUlB,OAAO,CAACkB,OAAO,CAACC,SAAT,CAAP,IAA8B,EAAxC,CADV;AAETC,UAAAA,OAAO,EAAE3B,MAAM,CAAEyB,OAAD,IAAa;AAAE,mBAAO;AAAEhB,cAAAA,GAAG,EAAEF,OAAO,CAACkB,OAAO,CAACC,SAAT,CAAP,CAA2BjB;AAAlC,aAAP;AAAgD,WAAhE,CAFN;AAGTmB,UAAAA,MAAM,EAAE;AAHC,SAAD,EAMZ;AAAEA,UAAAA,MAAM,EAAE;AAAV,SANY;AADZ,OAFH;AAWDd,MAAAA,MAAM,EAAE;AACJM,QAAAA,MAAM,EAAE;AACJC,UAAAA,KAAK,EAAEtB,IAAI,CAAE0B,OAAD,KAAc;AACtBrB,YAAAA,IAAI,EAAE,OADgB;AAEtBC,YAAAA,KAAK,gBAASoB,OAAO,CAACjB,MAAjB;AAFiB,WAAd,CAAD,CADP;AAKJQ,UAAAA,EAAE,EAAE;AAAEG,YAAAA,SAAS,EAAE;AAAb;AALA,SADJ;AAQJU,QAAAA,GAAG,EAAE;AACDR,UAAAA,KAAK,EAAEf,MAAM;AADZ,SARD;AAWJwB,QAAAA,OAAO,EAAE;AACLT,UAAAA,KAAK,EAAEpB,GAAG,CAAC,4BAAD,CADL;AAELe,UAAAA,EAAE,EAAE;AAAEG,YAAAA,SAAS,EAAE;AAAb;AAFC;AAXL;AAXP,KArCD;AAiEJY,IAAAA,eAAe,EAAE;AACblB,MAAAA,OAAO,EAAE,QADI;AAEbG,MAAAA,EAAE,EAAE;AACAO,QAAAA,UAAU,EAAE,CACxB;AACCC,UAAAA,IAAI,EAAGC,OAAD,IAAalB,OAAO,CAACkB,OAAO,CAACC,SAAT,CAAP,CAA2Bf,QAA3B,IAAuC,KAD3D;AAEgBgB,UAAAA,OAAO,EAAE3B,MAAM,CAAEyB,OAAD,IAAa;AAAE,mBAAO;AAAEd,cAAAA,QAAQ,EAAEJ,OAAO,CAACkB,OAAO,CAACC,SAAT,CAAP,CAA2Bf;AAAvC,aAAP;AAA0D,WAA1E,CAF/B;AAGgBiB,UAAAA,MAAM,EAAE;AAHxB,SADwB,EAMxB;AACCJ,UAAAA,IAAI,EAAGC,OAAD,IAAalB,OAAO,CAACkB,OAAO,CAACC,SAAT,CAAP,CAA2Bf,QAA3B,IAAuC,IAD3D;AAEgBgB,UAAAA,OAAO,EAAE3B,MAAM,CAAEyB,OAAD,IAAa;AAAE,mBAAO;AAAEd,cAAAA,QAAQ,EAAEJ,OAAO,CAACkB,OAAO,CAACC,SAAT,CAAP,CAA2Bf;AAAvC,aAAP;AAA0D,WAA1E,CAF/B;AAGgBiB,UAAAA,MAAM,EAAE;AAHxB,SANwB,EAWZ;AAAEA,UAAAA,MAAM,EAAE;AAAV,SAXY;AADZ,OAFS;AAgBbd,MAAAA,MAAM,EAAE;AACJM,QAAAA,MAAM,EAAE;AACJC,UAAAA,KAAK,EAAEtB,IAAI,CAAE0B,OAAD,KAAc;AACtBrB,YAAAA,IAAI,EAAE,OADgB;AAEtBC,YAAAA,KAAK;AAFiB,WAAd,CAAD,CADP;AAKJW,UAAAA,EAAE,EAAE;AAAEG,YAAAA,SAAS,EAAE;AAAb;AALA,SADJ;AAQJU,QAAAA,GAAG,EAAE;AACDR,UAAAA,KAAK,EAAEf,MAAM;AADZ,SARD;AAWJwB,QAAAA,OAAO,EAAE;AACLT,UAAAA,KAAK,EAAEpB,GAAG,CAAC,4BAAD,CADL;AAELe,UAAAA,EAAE,EAAE;AAAEG,YAAAA,SAAS,EAAE;AAAb;AAFC;AAXL;AAhBK,KAjEb;AAkGVa,IAAAA,kBAAkB,EAAE;AACVnB,MAAAA,OAAO,EAAE,QADC;AAEVC,MAAAA,MAAM,EAAE;AACJM,QAAAA,MAAM,EAAE;AACJC,UAAAA,KAAK,EAAEtB,IAAI,CAAE0B,OAAD,KAAc;AACtBrB,YAAAA,IAAI,EAAE,OADgB;AAEtBC,YAAAA,KAAK;AAFiB,WAAd,CAAD,CADP;AAKJW,UAAAA,EAAE,EAAE;AAAEG,YAAAA,SAAS,EAAE;AAAb;AALA,SADJ;AAQJU,QAAAA,GAAG,EAAE;AACDR,UAAAA,KAAK,EAAEf,MAAM;AADZ,SARD;AAWJwB,QAAAA,OAAO,EAAE;AACLT,UAAAA,KAAK,EAAEpB,GAAG,CAAC,4BAAD,CADL;AAELe,UAAAA,EAAE,EAAE;AAAEG,YAAAA,SAAS,EAAE;AAAb;AAFC;AAXL;AAFE;AAlGV;AAFwD,CAA7D,C,CA2IP;AACQ;AACI;AACA;AACI;AACI;AACA;AACA;AAEJ;AACA;AACI;AACA;AACA;AAEJ;AACA;AACJ;AACA;AACI;AACI;AACI;AACA;AACJ;AACA;AACJ;AACA;AACI;AACJ;AACA;AACI;AACA;AACJ;AACJ;AACJ;AACA;AACI;AACA;AACI;AACI;AACA;AACA;AAEJ;AACA;AACI;AACA;AACA;AAEJ;AACA;AACJ;AACA;AACI;AACI;AACI;AACA;AACJ;AACA;AACJ;AACA;AACI;AACJ;AACA;AACI;AACA;AACJ;AACJ;AACJ","sourcesContent":["import { MachineConfig, send, Action, assign } from \"xstate\";\n\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string, yes?: boolean } } = {\n    \"John\": { person: \"John Appleseed\" },\n    \"Sarah\": { person: \"Sarah Swiggity\" },\n    \"Laddie\": { person: \"The big lad\" },\n    \"on monday\": { day: \"Friday\" },\n    \"on tuesday\": { day: \"Thursday\" },\n    \"on wednesday\": { day: \"Friday\" },\n    \"on thursday\": { day: \"Thursday\" },\n    \"on friday\": { day: \"Friday\" },\n    \"on saturday\": { day: \"Thursday\" },\n    \"on sunday\": { day: \"Friday\" },\n    \"at eight\": { time: \"8:00\" },\n    \"at nine\": { time: \"9:00\" },\n    \"at ten\": { time: \"10:00\" },\n    \"at eleven\": { time: \"11:00\" },\n    \"at twelve\": { time: \"12:00\" },\n    \"at thirteen\": { time: \"13:00\" },\n    \"at fourteen\": { time: \"14:00\" },\n    \"at fifteen\": { time: \"15:00\" },\n    \"at sixteen\": { time: \"16:00\" },\n    \"yes\": { bool_val: true },\n    \"no\": { bool_val: false }\n}\n\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'init',\n    states: {\n        init: {\n            on: {\n                CLICK: 'welcome'\n            }\n        },\n        welcome: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"who\" },\n            states: {\n                prompt: { entry: say(\"Let's create an appointment\") }\n            }\n        },\n        who: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"person\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { person: grammar[context.recResult].person }}),\n                    target: \"day\"\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: say(\"Who are you meeting with?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry I don't know them\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        day: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"day\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { day: grammar[context.recResult].day } }),\n                    target: \"whole_day_query\"\n\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person}. On which day is your meeting?`\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Can you please repeat that\"),\n                    on: { ENDSPEECH: \"ask\" }\n                }\n            }\n        },\n        whole_day_query: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [\n\t\t\t\t{\n\t\t\t\t\tcond: (context) => grammar[context.recResult].bool_val == false,\n                    actions: assign((context) => { return { bool_val: grammar[context.recResult].bool_val } }),\n                    target: \"meeting_time_query\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tcond: (context) => grammar[context.recResult].bool_val == true,\n                    actions: assign((context) => { return { bool_val: grammar[context.recResult].bool_val } }),\n                    target: \"init\"\n\t\t\t\t},\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Will the meeting take the whole day?`\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Can you please repeat that\"),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n            }\n        },\n\t\tmeeting_time_query: {\n            initial: \"prompt\",\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `potato`\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Can you please repeat that\"),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n            }\n        },\n\n    }\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//OLD\n        //meeting_time: {\n            //initial: \"prompt\",\n            //on: {\n                //RECOGNISED: [{\n                    //cond: (context) => true == ( (grammar[context.recResult][\"whole_day_bool\"]) || false ),\n                    //actions: assign((context) => { return { day: grammar[context.recResult].day, name, time } }),\n                    //target: \"init\"\n\n                //},\n                //{\n                    //cond: (context) => false == ( (grammar[context.recResult][\"whole_day_bool\"]) || true ),\n                    //actions: assign((context) => { return { day: grammar[context.recResult].day } }),\n                    //target: \"meeting_time\"\n\n                //},\n                //{ target: \".nomatch\" }]\n            //},\n            //states: {\n                //prompt: {\n                    //entry: send((context) => ({\n                        //type: \"SPEAK\",\n                        //value: `Will the meeting take the whole day?`\n                    //})),\n                    //on: { ENDSPEECH: \"ask\" }\n                //},\n                //ask: {\n                    //entry: listen()\n                //},\n                //nomatch: {\n                    //entry: say(\"Can you please repeat that\"),\n                    //on: { ENDSPEECH: \"ask\" }\n                //}\n            //}\n        //},\n        //create_appt_query: {\n            //initial: \"prompt\",\n            //on: {\n                //RECOGNISED: [{\n                    //cond: (context) => true == ( (grammar[context.recResult][\"whole_day_bool\"]) || false ),\n                    //actions: assign((context) => { return { day: grammar[context.recResult].day, name, time } }),\n                    //target: \"init\"\n\n                //},\n                //{\n                    //cond: (context) => false == ( (grammar[context.recResult][\"whole_day_bool\"]) || true ),\n                    //actions: assign((context) => { return { day: grammar[context.recResult].day } }),\n                    //target: \"meeting_time\"\n\n                //},\n                //{ target: \".nomatch\" }]\n            //},\n            //states: {\n                //prompt: {\n                    //entry: send((context) => ({\n                        //type: \"SPEAK\",\n                        //value: `Will the meeting take the whole day?`\n                    //})),\n                    //on: { ENDSPEECH: \"ask\" }\n                //},\n                //ask: {\n                    //entry: listen()\n                //},\n                //nomatch: {\n                    //entry: say(\"Can you please repeat that\"),\n                    //on: { ENDSPEECH: \"ask\" }\n                //}\n            //}\n        //},\n"]},"metadata":{},"sourceType":"module"}