{"ast":null,"code":"import _objectSpread from \"/Users/jacobcoles/Desktop/LT2216/Lab2and4/react-xstate-colourchanger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { send, assign } from \"xstate\"; // SRGS parser and example (logs the results to console on page load)\n\nimport { loadGrammar } from './runparser';\nimport { parse } from './chartparser';\nimport { grammar } from './grammars/quotesGrammar'; //'./grammars/pizzaGrammar'\n\nconst gram = loadGrammar(grammar);\nconst input = \"please open the window\";\nconst prs = parse(input.split(/\\s+/), gram);\nconst result = prs.resultsForRule(gram.$root)[0];\nconsole.log(result);\nconst sayColour = send(context => ({\n  type: \"SPEAK\",\n  value: \"Repainting to \".concat(context.recResult)\n}));\n\nfunction say(text) {\n  return send(_context => ({\n    type: \"SPEAK\",\n    value: text\n  }));\n}\n\nfunction parse_text(input_text) {\n  const gram = loadGrammar(grammar);\n  const prs = parse(input_text.toLowerCase().split(/\\s+/), gram);\n  const result = prs.resultsForRule(gram.$root)[0];\n  return result;\n}\n\nfunction promptAndAsk(prompt) {\n  return {\n    initial: 'prompt',\n    states: {\n      prompt: {\n        entry: say(prompt),\n        on: {\n          ENDSPEECH: 'ask'\n        }\n      },\n      ask: {\n        entry: send('LISTEN')\n      }\n    }\n  };\n}\n\nexport const dmMachine = {\n  initial: 'init',\n  id: 'init',\n  states: {\n    init: {\n      on: {\n        CLICK: 'ask'\n      }\n    },\n    ask: _objectSpread({\n      id: 'ask',\n      on: {\n        RECOGNISED: [{\n          target: 'select_task',\n          actions: assign(context => {\n            let queryResp = typeof parse_text(context.recResult) === 'undefined' ? {\n              action: \"\",\n              object: \"\"\n            } : parse_text(context.recResult);\n            return {\n              queryResp\n            };\n          })\n        }]\n      }\n    }, promptAndAsk(\"What can I do for you?\")),\n    select_task: {\n      id: 'select_task',\n      initial: 'select',\n      states: {\n        select: {\n          always: [{\n            cond: context => context.queryResp.object === \"light\",\n            target: \"#init.light\"\n          }, {\n            cond: context => context.queryResp.object === \"heat\",\n            target: \"#init.heat\"\n          }, {\n            cond: context => context.queryResp.object === \"window\",\n            target: \"#init.window\"\n          }, {\n            cond: context => context.queryResp.object === \"door\",\n            target: \"#init.door\"\n          }, {\n            target: \"#init.invalid_prompt\"\n          }]\n        }\n      }\n    },\n    light: {\n      id: 'light',\n      initial: 'select',\n      states: {\n        select: {\n          always: [{\n            cond: context => context.queryResp.action === \"on\",\n            target: \"turn_light_on\"\n          }, {\n            cond: context => context.queryResp.action === \"off\",\n            target: \"turn_light_off\"\n          }, {\n            target: \"#init.invalid_prompt\"\n          }]\n        },\n        turn_light_on: {\n          always: {\n            target: \"#init\",\n            actions: say(\"Turning the light on\")\n          }\n        },\n        turn_light_off: {\n          always: {\n            target: \"#init\",\n            actions: say(\"Turning the light off\")\n          }\n        }\n      }\n    },\n    heat: {\n      id: 'heat',\n      initial: 'select',\n      states: {\n        select: {\n          always: [{\n            cond: context => context.queryResp.action === \"on\",\n            target: \"turn_heat_on\"\n          }, {\n            cond: context => context.queryResp.action === \"off\",\n            target: \"turn_heat_off\"\n          }, {\n            target: \"invalid_prompt\"\n          }]\n        },\n        turn_heat_on: {\n          always: {\n            target: \"#init\",\n            actions: say(\"Turning the heating on\")\n          }\n        },\n        turn_heat_off: {\n          always: {\n            target: \"#init\",\n            actions: say(\"Turning the heating off\")\n          }\n        }\n      }\n    },\n    window: {\n      id: 'window',\n      initial: 'select',\n      states: {\n        select: {\n          always: [{\n            cond: context => context.queryResp.action === \"open\",\n            target: \"open_window\"\n          }, {\n            cond: context => context.queryResp.action === \"close\",\n            target: \"close_window\"\n          }, {\n            target: \"invalid_prompt\"\n          }]\n        },\n        open_window: {\n          always: {\n            target: \"#init\",\n            actions: say(\"Opening the window\")\n          }\n        },\n        close_window: {\n          always: {\n            target: \"#init\",\n            actions: say(\"Closing the window\")\n          }\n        }\n      }\n    },\n    door: {\n      id: 'door',\n      initial: 'select',\n      states: {\n        select: {\n          always: [{\n            cond: context => context.queryResp.action === \"open\",\n            target: \"open_door\"\n          }, {\n            cond: context => context.queryResp.action === \"close\",\n            target: \"close_door\"\n          }, {\n            target: \"invalid_prompt\"\n          }]\n        },\n        open_door: {\n          always: {\n            target: \"#init\",\n            actions: say(\"Opening the door\")\n          }\n        },\n        close_door: {\n          always: {\n            target: \"#init\",\n            actions: say(\"Closing the door\")\n          }\n        }\n      }\n    },\n    invalid_prompt: {\n      entry: say(\"Sorry, that isn't a valid answer\"),\n      on: {\n        ENDSPEECH: \"#init\"\n      }\n    }\n  }\n};","map":{"version":3,"sources":["/Users/jacobcoles/Desktop/LT2216/Lab2and4/react-xstate-colourchanger/src/dmSmartHome.ts"],"names":["send","assign","loadGrammar","parse","grammar","gram","input","prs","split","result","resultsForRule","$root","console","log","sayColour","context","type","value","recResult","say","text","_context","parse_text","input_text","toLowerCase","promptAndAsk","prompt","initial","states","entry","on","ENDSPEECH","ask","dmMachine","id","init","CLICK","RECOGNISED","target","actions","queryResp","action","object","select_task","select","always","cond","light","turn_light_on","turn_light_off","heat","turn_heat_on","turn_heat_off","window","open_window","close_window","door","open_door","close_door","invalid_prompt"],"mappings":"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","sourcesContent":["import { MachineConfig, send, Action, assign } from \"xstate\";\n\n// SRGS parser and example (logs the results to console on page load)\nimport { loadGrammar } from './runparser'\nimport { parse } from './chartparser'\nimport { grammar } from './grammars/quotesGrammar' //'./grammars/pizzaGrammar'\n\nconst gram = loadGrammar(grammar)\nconst input = \"please open the window\"\nconst prs = parse(input.split(/\\s+/), gram)\nconst result = prs.resultsForRule(gram.$root)[0]\n\nconsole.log(result)\n\nconst sayColour: Action<SDSContext, SDSEvent> = send((context: SDSContext) => ({\n    type: \"SPEAK\", value: `Repainting to ${context.recResult}`\n}))\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction parse_text(input_text: string): Action<SDSContext, SDSEvent> {\n\tconst gram = loadGrammar(grammar)\n\tconst prs = parse(input_text.toLowerCase().split(/\\s+/), gram)\n\tconst result = prs.resultsForRule(gram.$root)[0]\n\treturn result\n}\n\nfunction promptAndAsk(prompt: string): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n        initial: 'prompt',\n        states: {\n            prompt: {\n                entry: say(prompt),\n                on: { ENDSPEECH: 'ask' }\n            },\n            ask: {\n                entry: send('LISTEN'),\n            },\n        }\n    })\n}\n\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'init',\n\tid: 'init',\n    states: {\n        init: {\n            on: {\n                CLICK: 'ask'\n            }\n        },\n\t\task: {\n\t\t\tid: 'ask',\n\t\t\ton: {\t\n\t\t\t\tRECOGNISED: [\n                    { \n\t\t\t\t\t\ttarget: 'select_task',\n\t\t\t\t\t\tactions: assign((context) => {\n\t\t\t\t\t\t\tlet queryResp = (typeof parse_text(context.recResult) === 'undefined')? {action: \"\", object: \"\"} : parse_text(context.recResult)\n\t\t\t\t\t\t\treturn { queryResp }\n\t\t\t\t\t\t})\n\t\t\t\t\t},\n\t            ]\n\t        },\n\t        ...promptAndAsk(\"What can I do for you?\")\n\t\t},\n\t\tselect_task: {\n\t\t\tid: 'select_task',\n\t\t\tinitial: 'select',\n\t\t\tstates: {\n\t\t\t\tselect: { \n\t\t\t\t\talways: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcond: (context) => (context.queryResp.object ===  \"light\"),\n\t\t\t\t\t\t\ttarget: \"#init.light\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcond: (context) => (context.queryResp.object ===  \"heat\"),\n\t\t\t\t\t\t\ttarget: \"#init.heat\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcond: (context) => (context.queryResp.object ===  \"window\"),\n\t\t\t\t\t\t\ttarget: \"#init.window\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcond: (context) => (context.queryResp.object ===  \"door\"),\n\t\t\t\t\t\t\ttarget: \"#init.door\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttarget: \"#init.invalid_prompt\"\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tlight: {\n\t\t\tid: 'light',\n\t\t\tinitial: 'select',\n\t\t\tstates: {\n\t\t\t\tselect: {\n\t\t\t\t\talways: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcond: (context) => (context.queryResp.action ===  \"on\"),\n\t\t\t\t\t\t\ttarget: \"turn_light_on\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcond: (context) => (context.queryResp.action ===  \"off\"),\n\t\t\t\t\t\t\ttarget: \"turn_light_off\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttarget: \"#init.invalid_prompt\"\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\tturn_light_on: {\n\t\t\t\t\talways: {\n\t\t\t\t\t\ttarget: \"#init\",\n\t\t\t\t\t\tactions: say(\"Turning the light on\")\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tturn_light_off: {\n\t\t\t\t\talways: {\n\t\t\t\t\t\ttarget: \"#init\",\n\t\t\t\t\t\tactions: say(\"Turning the light off\"),\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t},\n\t\t\t\n\t\t},\n\t\theat: {\n\t\t\tid: 'heat',\n\t\t\tinitial: 'select',\n\t\t\tstates: {\n\t\t\t\tselect: {\n\t\t\t\t\talways: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcond: (context) => (context.queryResp.action ===  \"on\"),\n\t\t\t\t\t\t\ttarget: \"turn_heat_on\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcond: (context) => (context.queryResp.action ===  \"off\"),\n\t\t\t\t\t\t\ttarget: \"turn_heat_off\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttarget: \"invalid_prompt\"\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\tturn_heat_on: {\n\t\t\t\t\talways: {\n\t\t\t\t\t\ttarget: \"#init\",\n\t\t\t\t\t\tactions: say(\"Turning the heating on\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tturn_heat_off: {\n\t\t\t\t\talways: {\n\t\t\t\t\t\ttarget: \"#init\",\n\t\t\t\t\t\tactions: say(\"Turning the heating off\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\twindow: {\n\t\t\tid: 'window',\n\t\t\tinitial: 'select',\n\t\t\tstates: {\n\t\t\t\tselect: {\n\t\t\t\t\talways:[\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcond: (context) => (context.queryResp.action ===  \"open\"),\n\t\t\t\t\t\t\ttarget: \"open_window\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcond: (context) => (context.queryResp.action ===  \"close\"),\n\t\t\t\t\t\t\ttarget: \"close_window\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttarget: \"invalid_prompt\"\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\topen_window: {\n\t\t\t\t\talways: {\n\t\t\t\t\t\ttarget: \"#init\",\n\t\t\t\t\t\tactions: say(\"Opening the window\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tclose_window: {\n\t\t\t\t\talways: {\n\t\t\t\t\t\ttarget: \"#init\",\n\t\t\t\t\t\tactions: say(\"Closing the window\"),\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tdoor: {\n\t\t\tid: 'door',\n\t\t\tinitial: 'select',\n\t\t\tstates: {\n\t\t\t\tselect: {\n\t\t\t\t\talways: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcond: (context) => (context.queryResp.action ===  \"open\"),\n\t\t\t\t\t\t\ttarget: \"open_door\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcond: (context) => (context.queryResp.action ===  \"close\"),\n\t\t\t\t\t\t\ttarget: \"close_door\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttarget: \"invalid_prompt\"\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\topen_door: {\n\t\t\t\t\talways: {\n\t\t\t\t\t\ttarget: \"#init\",\n\t\t\t\t\t\tactions: say(\"Opening the door\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tclose_door: {\n\t\t\t\t\talways: {\n\t\t\t\t\t\ttarget: \"#init\",\n\t\t\t\t\t\tactions: say(\"Closing the door\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tinvalid_prompt: { \n\t\t\tentry: say(\"Sorry, that isn't a valid answer\"),\n\t\t\ton: { ENDSPEECH: \"#init\"} \n\t\t},\n\t}\n\n})\n"]},"metadata":{},"sourceType":"module"}