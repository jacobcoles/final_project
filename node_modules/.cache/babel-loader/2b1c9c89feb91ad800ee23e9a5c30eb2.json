{"ast":null,"code":"\"use strict\"; // Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar _regeneratorRuntime = require(\"/Users/jacobcoles/Desktop/LT2216/final_project/final_project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/jacobcoles/Desktop/LT2216/final_project/final_project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StsCredentials = void 0;\n\nconst querystring = require(\"querystring\");\n\nconst transporters_1 = require(\"../transporters\");\n\nconst oauth2common_1 = require(\"./oauth2common\");\n/**\n * Implements the OAuth 2.0 token exchange based on\n * https://tools.ietf.org/html/rfc8693\n */\n\n\nclass StsCredentials extends oauth2common_1.OAuthClientAuthHandler {\n  /**\n   * Initializes an STS credentials instance.\n   * @param tokenExchangeEndpoint The token exchange endpoint.\n   * @param clientAuthentication The client authentication credentials if\n   *   available.\n   */\n  constructor(tokenExchangeEndpoint, clientAuthentication) {\n    super(clientAuthentication);\n    this.tokenExchangeEndpoint = tokenExchangeEndpoint;\n    this.transporter = new transporters_1.DefaultTransporter();\n  }\n  /**\n   * Exchanges the provided token for another type of token based on the\n   * rfc8693 spec.\n   * @param stsCredentialsOptions The token exchange options used to populate\n   *   the token exchange request.\n   * @param additionalHeaders Optional additional headers to pass along the\n   *   request.\n   * @param options Optional additional GCP-specific non-spec defined options\n   *   to send with the request.\n   *   Example: `&options=${encodeUriComponent(JSON.stringified(options))}`\n   * @return A promise that resolves with the token exchange response containing\n   *   the requested token and its expiration time.\n   */\n\n\n  exchangeToken(stsCredentialsOptions, additionalHeaders, // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  options) {\n    var _this = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var _a, _b, _c, values, headers, opts, response, stsSuccessfulResponse;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            values = {\n              grant_type: stsCredentialsOptions.grantType,\n              resource: stsCredentialsOptions.resource,\n              audience: stsCredentialsOptions.audience,\n              scope: (_a = stsCredentialsOptions.scope) === null || _a === void 0 ? void 0 : _a.join(' '),\n              requested_token_type: stsCredentialsOptions.requestedTokenType,\n              subject_token: stsCredentialsOptions.subjectToken,\n              subject_token_type: stsCredentialsOptions.subjectTokenType,\n              actor_token: (_b = stsCredentialsOptions.actingParty) === null || _b === void 0 ? void 0 : _b.actorToken,\n              actor_token_type: (_c = stsCredentialsOptions.actingParty) === null || _c === void 0 ? void 0 : _c.actorTokenType,\n              // Non-standard GCP-specific options.\n              options: options && JSON.stringify(options)\n            }; // Remove undefined fields.\n\n            Object.keys(values).forEach(key => {\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              if (typeof values[key] === 'undefined') {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                delete values[key];\n              }\n            });\n            headers = {\n              'Content-Type': 'application/x-www-form-urlencoded'\n            }; // Inject additional STS headers if available.\n\n            Object.assign(headers, additionalHeaders || {});\n            opts = {\n              url: _this.tokenExchangeEndpoint,\n              method: 'POST',\n              headers,\n              data: querystring.stringify(values),\n              responseType: 'json'\n            }; // Apply OAuth client authentication.\n\n            _this.applyClientAuthenticationOptions(opts);\n\n            _context.prev = 6;\n            _context.next = 9;\n            return _this.transporter.request(opts);\n\n          case 9:\n            response = _context.sent;\n            // Successful response.\n            stsSuccessfulResponse = response.data;\n            stsSuccessfulResponse.res = response;\n            return _context.abrupt(\"return\", stsSuccessfulResponse);\n\n          case 15:\n            _context.prev = 15;\n            _context.t0 = _context[\"catch\"](6);\n\n            if (!_context.t0.response) {\n              _context.next = 19;\n              break;\n            }\n\n            throw oauth2common_1.getErrorFromOAuthErrorResponse(_context.t0.response.data, // Preserve other fields from the original error.\n            _context.t0);\n\n          case 19:\n            throw _context.t0;\n\n          case 20:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee, null, [[6, 15]]);\n    }))();\n  }\n\n}\n\nexports.StsCredentials = StsCredentials;","map":{"version":3,"sources":["/Users/jacobcoles/Desktop/LT2216/final_project/final_project/node_modules/google-auth-library/build/src/auth/stscredentials.js"],"names":["Object","defineProperty","exports","value","StsCredentials","querystring","require","transporters_1","oauth2common_1","OAuthClientAuthHandler","constructor","tokenExchangeEndpoint","clientAuthentication","transporter","DefaultTransporter","exchangeToken","stsCredentialsOptions","additionalHeaders","options","values","grant_type","grantType","resource","audience","scope","_a","join","requested_token_type","requestedTokenType","subject_token","subjectToken","subject_token_type","subjectTokenType","actor_token","_b","actingParty","actorToken","actor_token_type","_c","actorTokenType","JSON","stringify","keys","forEach","key","headers","assign","opts","url","method","data","responseType","applyClientAuthenticationOptions","request","response","stsSuccessfulResponse","res","getErrorFromOAuthErrorResponse"],"mappings":"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","sourcesContent":["\"use strict\";\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StsCredentials = void 0;\nconst querystring = require(\"querystring\");\nconst transporters_1 = require(\"../transporters\");\nconst oauth2common_1 = require(\"./oauth2common\");\n/**\n * Implements the OAuth 2.0 token exchange based on\n * https://tools.ietf.org/html/rfc8693\n */\nclass StsCredentials extends oauth2common_1.OAuthClientAuthHandler {\n    /**\n     * Initializes an STS credentials instance.\n     * @param tokenExchangeEndpoint The token exchange endpoint.\n     * @param clientAuthentication The client authentication credentials if\n     *   available.\n     */\n    constructor(tokenExchangeEndpoint, clientAuthentication) {\n        super(clientAuthentication);\n        this.tokenExchangeEndpoint = tokenExchangeEndpoint;\n        this.transporter = new transporters_1.DefaultTransporter();\n    }\n    /**\n     * Exchanges the provided token for another type of token based on the\n     * rfc8693 spec.\n     * @param stsCredentialsOptions The token exchange options used to populate\n     *   the token exchange request.\n     * @param additionalHeaders Optional additional headers to pass along the\n     *   request.\n     * @param options Optional additional GCP-specific non-spec defined options\n     *   to send with the request.\n     *   Example: `&options=${encodeUriComponent(JSON.stringified(options))}`\n     * @return A promise that resolves with the token exchange response containing\n     *   the requested token and its expiration time.\n     */\n    async exchangeToken(stsCredentialsOptions, additionalHeaders, \n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    options) {\n        var _a, _b, _c;\n        const values = {\n            grant_type: stsCredentialsOptions.grantType,\n            resource: stsCredentialsOptions.resource,\n            audience: stsCredentialsOptions.audience,\n            scope: (_a = stsCredentialsOptions.scope) === null || _a === void 0 ? void 0 : _a.join(' '),\n            requested_token_type: stsCredentialsOptions.requestedTokenType,\n            subject_token: stsCredentialsOptions.subjectToken,\n            subject_token_type: stsCredentialsOptions.subjectTokenType,\n            actor_token: (_b = stsCredentialsOptions.actingParty) === null || _b === void 0 ? void 0 : _b.actorToken,\n            actor_token_type: (_c = stsCredentialsOptions.actingParty) === null || _c === void 0 ? void 0 : _c.actorTokenType,\n            // Non-standard GCP-specific options.\n            options: options && JSON.stringify(options),\n        };\n        // Remove undefined fields.\n        Object.keys(values).forEach(key => {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            if (typeof values[key] === 'undefined') {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                delete values[key];\n            }\n        });\n        const headers = {\n            'Content-Type': 'application/x-www-form-urlencoded',\n        };\n        // Inject additional STS headers if available.\n        Object.assign(headers, additionalHeaders || {});\n        const opts = {\n            url: this.tokenExchangeEndpoint,\n            method: 'POST',\n            headers,\n            data: querystring.stringify(values),\n            responseType: 'json',\n        };\n        // Apply OAuth client authentication.\n        this.applyClientAuthenticationOptions(opts);\n        try {\n            const response = await this.transporter.request(opts);\n            // Successful response.\n            const stsSuccessfulResponse = response.data;\n            stsSuccessfulResponse.res = response;\n            return stsSuccessfulResponse;\n        }\n        catch (error) {\n            // Translate error to OAuthError.\n            if (error.response) {\n                throw oauth2common_1.getErrorFromOAuthErrorResponse(error.response.data, \n                // Preserve other fields from the original error.\n                error);\n            }\n            // Request could fail before the server responds.\n            throw error;\n        }\n    }\n}\nexports.StsCredentials = StsCredentials;\n//# sourceMappingURL=stscredentials.js.map"]},"metadata":{},"sourceType":"script"}