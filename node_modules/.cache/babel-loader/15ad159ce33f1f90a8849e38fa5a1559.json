{"ast":null,"code":"\"use strict\"; // Copyright 2020 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar _regeneratorRuntime = require(\"/Users/jacobcoles/Desktop/LT2216/final_project/final_project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/jacobcoles/Desktop/LT2216/final_project/final_project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.IdTokenClient = void 0;\n\nconst oauth2client_1 = require(\"./oauth2client\");\n\nclass IdTokenClient extends oauth2client_1.OAuth2Client {\n  /**\n   * Google ID Token client\n   *\n   * Retrieve access token from the metadata server.\n   * See: https://developers.google.com/compute/docs/authentication\n   */\n  constructor(options) {\n    super();\n    this.targetAudience = options.targetAudience;\n    this.idTokenProvider = options.idTokenProvider;\n  }\n\n  getRequestMetadataAsync( // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  url) {\n    var _this = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var idToken, headers;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            if (!(!_this.credentials.id_token || (_this.credentials.expiry_date || 0) < Date.now())) {\n              _context.next = 5;\n              break;\n            }\n\n            _context.next = 3;\n            return _this.idTokenProvider.fetchIdToken(_this.targetAudience);\n\n          case 3:\n            idToken = _context.sent;\n            _this.credentials = {\n              id_token: idToken,\n              expiry_date: _this.getIdTokenExpiryDate(idToken)\n            };\n\n          case 5:\n            headers = {\n              Authorization: 'Bearer ' + _this.credentials.id_token\n            };\n            return _context.abrupt(\"return\", {\n              headers\n            });\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }))();\n  }\n\n  getIdTokenExpiryDate(idToken) {\n    const payloadB64 = idToken.split('.')[1];\n\n    if (payloadB64) {\n      const payload = JSON.parse(Buffer.from(payloadB64, 'base64').toString('ascii'));\n      return payload.exp * 1000;\n    }\n  }\n\n}\n\nexports.IdTokenClient = IdTokenClient;","map":{"version":3,"sources":["/Users/jacobcoles/Desktop/LT2216/final_project/final_project/node_modules/google-auth-library/build/src/auth/idtokenclient.js"],"names":["Object","defineProperty","exports","value","IdTokenClient","oauth2client_1","require","OAuth2Client","constructor","options","targetAudience","idTokenProvider","getRequestMetadataAsync","url","credentials","id_token","expiry_date","Date","now","fetchIdToken","idToken","getIdTokenExpiryDate","headers","Authorization","payloadB64","split","payload","JSON","parse","Buffer","from","toString","exp"],"mappings":"AAAA,a,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,aAAR,GAAwB,KAAK,CAA7B;;AACA,MAAMC,cAAc,GAAGC,OAAO,CAAC,gBAAD,CAA9B;;AACA,MAAMF,aAAN,SAA4BC,cAAc,CAACE,YAA3C,CAAwD;AACpD;AACJ;AACA;AACA;AACA;AACA;AACIC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACjB;AACA,SAAKC,cAAL,GAAsBD,OAAO,CAACC,cAA9B;AACA,SAAKC,eAAL,GAAuBF,OAAO,CAACE,eAA/B;AACH;;AACKC,EAAAA,uBAAuB,EAC7B;AACAC,EAAAA,GAF6B,EAExB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACG,CAAC,KAAI,CAACC,WAAL,CAAiBC,QAAlB,IACA,CAAC,KAAI,CAACD,WAAL,CAAiBE,WAAjB,IAAgC,CAAjC,IAAsCC,IAAI,CAACC,GAAL,EAFzC;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAGyB,KAAI,CAACP,eAAL,CAAqBQ,YAArB,CAAkC,KAAI,CAACT,cAAvC,CAHzB;;AAAA;AAGSU,YAAAA,OAHT;AAIG,YAAA,KAAI,CAACN,WAAL,GAAmB;AACfC,cAAAA,QAAQ,EAAEK,OADK;AAEfJ,cAAAA,WAAW,EAAE,KAAI,CAACK,oBAAL,CAA0BD,OAA1B;AAFE,aAAnB;;AAJH;AASKE,YAAAA,OATL,GASe;AACZC,cAAAA,aAAa,EAAE,YAAY,KAAI,CAACT,WAAL,CAAiBC;AADhC,aATf;AAAA,6CAYM;AAAEO,cAAAA;AAAF,aAZN;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaJ;;AACDD,EAAAA,oBAAoB,CAACD,OAAD,EAAU;AAC1B,UAAMI,UAAU,GAAGJ,OAAO,CAACK,KAAR,CAAc,GAAd,EAAmB,CAAnB,CAAnB;;AACA,QAAID,UAAJ,EAAgB;AACZ,YAAME,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWC,MAAM,CAACC,IAAP,CAAYN,UAAZ,EAAwB,QAAxB,EAAkCO,QAAlC,CAA2C,OAA3C,CAAX,CAAhB;AACA,aAAOL,OAAO,CAACM,GAAR,GAAc,IAArB;AACH;AACJ;;AAlCmD;;AAoCxD9B,OAAO,CAACE,aAAR,GAAwBA,aAAxB","sourcesContent":["\"use strict\";\n// Copyright 2020 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.IdTokenClient = void 0;\nconst oauth2client_1 = require(\"./oauth2client\");\nclass IdTokenClient extends oauth2client_1.OAuth2Client {\n    /**\n     * Google ID Token client\n     *\n     * Retrieve access token from the metadata server.\n     * See: https://developers.google.com/compute/docs/authentication\n     */\n    constructor(options) {\n        super();\n        this.targetAudience = options.targetAudience;\n        this.idTokenProvider = options.idTokenProvider;\n    }\n    async getRequestMetadataAsync(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    url) {\n        if (!this.credentials.id_token ||\n            (this.credentials.expiry_date || 0) < Date.now()) {\n            const idToken = await this.idTokenProvider.fetchIdToken(this.targetAudience);\n            this.credentials = {\n                id_token: idToken,\n                expiry_date: this.getIdTokenExpiryDate(idToken),\n            };\n        }\n        const headers = {\n            Authorization: 'Bearer ' + this.credentials.id_token,\n        };\n        return { headers };\n    }\n    getIdTokenExpiryDate(idToken) {\n        const payloadB64 = idToken.split('.')[1];\n        if (payloadB64) {\n            const payload = JSON.parse(Buffer.from(payloadB64, 'base64').toString('ascii'));\n            return payload.exp * 1000;\n        }\n    }\n}\nexports.IdTokenClient = IdTokenClient;\n//# sourceMappingURL=idtokenclient.js.map"]},"metadata":{},"sourceType":"script"}