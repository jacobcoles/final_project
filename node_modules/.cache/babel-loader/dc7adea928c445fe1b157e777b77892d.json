{"ast":null,"code":"import _objectSpread from \"/Users/jacobcoles/Desktop/LT2216/final_project/final_project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { actions, assign } from \"xstate\";\nconst send = actions.send,\n      cancel = actions.cancel;\n\nfunction say(text) {\n  return send(_context => ({\n    type: \"SPEAK\",\n    value: text\n  }));\n}\n\nfunction listen() {\n  return send('LISTEN');\n}\n\nconst grammar = {\n  \"quick math\": {\n    quick_math: null\n  },\n  \"quick maths\": {\n    quick_math: null\n  },\n  \"play quick math\": {\n    quick_math: null\n  },\n  \"play quick maths\": {\n    quick_math: null\n  },\n  \"riddles\": {\n    riddles: null\n  },\n  \"riddle\": {\n    riddles: null\n  },\n  \"tell me a riddle\": {\n    riddles: null\n  },\n  \"play riddles\": {\n    riddles: null\n  },\n  \"memory game\": {\n    chimp_test: null\n  },\n  \"memory test\": {\n    chimp_test: null\n  },\n  \"number test\": {\n    chimp_test: null\n  },\n  \"number memory test\": {\n    chimp_test: null\n  },\n  \"the memory game\": {\n    chimp_test: null\n  },\n  \"the memory test\": {\n    chimp_test: null\n  },\n  \"the number test\": {\n    chimp_test: null\n  },\n  \"the number memory test\": {\n    chimp_test: null\n  },\n  \"number sequence game\": {\n    chimp_test: null\n  },\n  \"the number sequence game\": {\n    chimp_test: null\n  }\n};\nconst math_operator_store = {\n  operate: function operate(a, b, operator) {\n    switch (operator) {\n      case 'plus':\n        return a + b;\n\n      case 'subtract':\n        return a - b;\n\n      case 'times':\n        return a * b;\n      //~ case 'divide':\n      //~ return a/b\n    }\n  },\n  generate_number: function generate_number(operator) {\n    switch (operator) {\n      case 'plus':\n        return Math.floor(Math.random() * 100);\n\n      case 'subtract':\n        return Math.floor(Math.random() * 100);\n\n      case 'times':\n        return Math.floor(Math.random() * 12);\n      //~ case 'divide':\n      //~ return a/b\n    }\n  },\n  parse_asr_numbers: function parse_asr_numbers(input) {\n    const numbers = {\n      0: 'zero',\n      1: 'one',\n      2: 'two',\n      3: 'three',\n      4: 'four',\n      5: 'five',\n      6: 'six',\n      7: 'seven',\n      8: 'eight',\n      9: 'nine'\n    };\n\n    for (var i = 0; i < numbers.length; i++) {\n      input = input.replace(numbers[i], i);\n    }\n\n    input = input.replace('for', 4);\n    input = input.replace('to', 2);\n    input = input.replace('too', 2);\n    return input.split(/[\\s--,.+]/).join('');\n  },\n  0: {\n    operator: \"plus\"\n  },\n  1: {\n    operator: \"subtract\"\n  },\n  2: {\n    operator: \"times\"\n  },\n  3: {\n    operator: \"divide\"\n  }\n};\nconst riddles_store = {\n  0: {\n    riddle: \"What has to be broken before you can use it?\",\n    answers: [\"egg\", \"an egg\"],\n    hint: \"I like them scrambled. \"\n  },\n  1: {\n    riddle: \"What gets wet while drying?\",\n    answers: [\"towel\", \"a towel\", \"towels\"],\n    hint: \"You'll have to take one to the beach if you want to take a swim. \"\n  },\n  2: {\n    riddle: \"What can you give and still hold on to?\",\n    answers: [\"promise\", \"a promise\", \"promises\", \"your word\"],\n    hint: \"Relationships are more secure with these. \"\n  },\n  3: {\n    riddle: \"The more of this there is, the less you see. What is it?\",\n    answers: [\"darkness\", \"the dark\"],\n    hint: \"This descibes the absence rather than the presence of something. \"\n  },\n  4: {\n    riddle: \"This is as light as a feather, but you can't hold it too long. \",\n    answers: [\"your breath\", \"breath\", \"the breath\", \"a breath\"],\n    hint: \"Don't forget to do this or you'll die.\"\n  },\n  5: {\n    riddle: \"Before Mount Everest was discovered, what was the highest mountain on Earth?\",\n    answers: [\"everest\", \"mount everest\"],\n    hint: \"If nobody is there to observe it does that mean it is not true?\"\n  },\n  6: {\n    riddle: \"What runs around the whole yard without moving?\",\n    answers: [\"a fence\", \"fence\", \"fences\"],\n    hint: \"Some things described as running may be static. \"\n  },\n  7: {\n    riddle: \"What can you catch, but never throw?\",\n    answers: [\"a cold\", \"a virus\", \"a sickness\", \"a disease\", \"cold\", \"virus\", \"sickness\", \"disease\", \"colds\", \"viruses\", \"sicknesses\", \"diseases\"],\n    hint: \"Covid 19 has not been a great thing for the world. \"\n  }\n};\n\nfunction promptAndAsk(prompt) {\n  return {\n    initial: 'prompt',\n    states: {\n      prompt: {\n        entry: say(prompt),\n        on: {\n          ENDSPEECH: 'ask'\n        }\n      },\n      ask: {\n        entry: [send('LISTEN'), send('MAXSPEECH', {\n          delay: 4000,\n          id: 'maxspeech_cancel'\n        })]\n      }\n    }\n  };\n}\n\nconst proxyurl = \"https://boiling-depths-26621.herokuapp.com/\";\nconst rasaurl = 'https://herokufinalproj.herokuapp.com/model/parse';\n\nfunction nluRequest() {\n  return {\n    initial: 'http_timer',\n    on: {\n      MAX_HTTP: {\n        target: '#root.dm',\n        actions: say('The RASA server is taking too long to respond. Please wait and try again. ')\n      }\n    },\n    invoke: {\n      id: \"rasaquery\",\n      src: (context, event) => {\n        return fetch(new Request(proxyurl + rasaurl, {\n          method: 'POST',\n          headers: {\n            'Origin': 'http://localhost:3000/'\n          },\n          // only required with proxy\n          body: \"{\\\"text\\\": \\\"\".concat(context.recResult, \"\\\"}\")\n        })).then(data => data.json());\n      },\n      onDone: send(\"NLU_REQ_DONE\"),\n      //(context,event)=>{\n      //send({ type: \"NLU_REQ_DONE\", value: 'unconfident_resp'  })\n      //send(\"NLU_REQ_DONE\")\n      //},\n      //~ {\n      //~ actions: [\n      //~ (context:SDSContext, event:any) => console.log(event.data),\n      //~ (context, event)=>{\n      //~ if((event.data.intent.confidence) < 0.7){\n      //~ var snippet = 'unconfident_resp' \n      //~ }\n      //~ else{\n      //~ var snippet = event.data.intent.name\n      //~ }\n      //~ send({ type: \"NLU_REQ_DONE\", value: ( event.data.intent.name || 'unconfident_resp' ) })\n      //~ }\n      //~ ]\n      //~ },\n      onError: {\n        target: '#root.dm',\n        actions: say(\"Sorry, there was an error. \")\n      }\n    },\n    states: {\n      http_timer: {\n        entry: send('MAX_HTTP', {\n          delay: 12000,\n          id: 'maxspeech_cancel'\n        })\n      },\n      done_req: {\n        entry: assign(function (context, event) {\n          console.log(event.data.intent.name);\n          send({\n            type: \"NLU_REQ_DONE\",\n            value: 'unconfident_resp'\n          });\n        })\n      }\n    }\n  };\n}\n\nconst commands = ['stop', 'help'];\nvar maxspeech_count_local = 0;\nexport const dmMachine = {\n  initial: 'main',\n  id: 'init',\n  context: {\n    maxspeech_count: 0\n  },\n  on: {\n    MAXSPEECH: '.maxspeech',\n    RECOGNISED: [{\n      target: \".stop\",\n      cond: context => context.recResult === 'stop'\n    }, {\n      target: \".help\",\n      cond: context => context.recResult === 'help'\n    }]\n  },\n  states: {\n    main: {\n      initial: 'clicky',\n      states: {\n        hist: {\n          type: 'history',\n          history: 'shallow'\n        },\n        clicky: {\n          on: {\n            CLICK: {\n              target: 'begin',\n              actions: assign(context => {\n                maxspeech_count_local = 0;\n                return {\n                  maxspeech_count: 0\n                };\n              })\n            }\n          }\n        },\n        begin: {\n          initial: \"prompt\",\n          id: \"welcome\",\n          on: {\n            MAX_HTTP: {\n              target: '#init',\n              actions: say('The RASA server is taking too long to respond. Please wait and try again. ')\n            },\n            NLU_REQ_DONE: [{\n              cond: context => context.snippet === \"chimp_test\",\n              target: \"chimp_test\",\n              actions: assign((context, event) => {\n                return {\n                  snippet: event.value\n                };\n              })\n            }, {\n              target: \"quick_math\",\n              cond: (context, event) => event.value === \"quick_math\"\n            }, {\n              target: \"riddles\",\n              cond: context => context.snippet === \"riddles\"\n            }, {\n              target: \".unconfident_resp\" //cond: (context) => context.snippet === \"unconfident_resp\",\n\n            } //~ {\n            //~ target: \"please_repeat\",\n            //~ cond: (context) => !commands.includes(context.recResult),\n            //~ actions: assign(context=>console.log(context.snippet))\n            //~ },\n            ],\n            RECOGNISED: '.nlu_process'\n          },\n          states: {\n            prompt: _objectSpread({}, promptAndAsk(\"hello\")),\n            nlu_process: {\n              initial: 'http_timer',\n              on: {\n                MAX_HTTP: {\n                  target: '#root.dm',\n                  actions: say('')\n                }\n              },\n              invoke: {\n                id: \"rasaquery\",\n                src: (context, event) => {\n                  return fetch(new Request(proxyurl + rasaurl, {\n                    method: 'POST',\n                    headers: {\n                      'Origin': 'http://localhost:3000/'\n                    },\n                    // only required with proxy\n                    body: \"{\\\"text\\\": \\\"\".concat(context.recResult, \"\\\"}\")\n                  })).then(data => data.json());\n                },\n                onDone: assign((context, event) => send({\n                  type: \"NLU_REQ_DONE\",\n                  value: event.data.intent.name || 'unconfident_resp'\n                })),\n                onError: {\n                  target: '#root.dm',\n                  actions: say(\"Sorry, there was an error. \")\n                }\n              },\n              states: {\n                http_timer: {\n                  entry: send('MAX_HTTP', {\n                    delay: 12000,\n                    id: 'maxspeech_cancel'\n                  })\n                }\n              }\n            },\n            unconfident_resp: {\n              entry: say('Sorry, I am not quite sure what you want, resetting...'),\n              on: {\n                ENDSPEECH: '#init'\n              }\n            }\n          }\n        },\n        quick_math: {\n          id: \"quick_math\",\n          initial: \"generate_math_question\",\n          on: {\n            MAXSPEECH: '.too_long',\n            RECOGNISED: [{\n              target: '.right_answer',\n              cond: context => context.recResult === context.solution.toString(),\n              actions: assign(context => {\n                return {\n                  points: (context.points || 0) + 1\n                };\n              })\n            }, {\n              target: \".wrong_answer\",\n              cond: context => !commands.includes(context.recResult)\n            }]\n          },\n          states: {\n            generate_math_question: {\n              entry: say(\"Here is your maths question\"),\n              on: {\n                ENDSPEECH: {\n                  target: \"ask_math_question\",\n                  actions: assign(context => {\n                    var operator_id = Math.floor(Math.random() * 3);\n                    var operator = math_operator_store[operator_id].operator;\n                    return {\n                      number_one: math_operator_store.generate_number(operator),\n                      number_two: math_operator_store.generate_number(operator),\n                      operator_id: operator_id\n                    };\n                  })\n                }\n              }\n            },\n            ask_math_question: {\n              entry: send(context => ({\n                type: \"SPEAK\",\n                value: \"What is \".concat(context.number_one, \" \").concat(math_operator_store[context.operator_id].operator, \" \").concat(context.number_two, \".\")\n              })),\n              on: {\n                ENDSPEECH: {\n                  target: \"ask\",\n                  actions: assign(context => {\n                    return {\n                      solution: math_operator_store.operate(context.number_one, context.number_two, math_operator_store[context.operator_id].operator)\n                    };\n                  })\n                }\n              }\n            },\n            wrong_answer: {\n              entry: say(\"Sorry, that isn't right, try again.\"),\n              on: {\n                ENDSPEECH: \"ask\"\n              }\n            },\n            right_answer: {\n              entry: send(context => ({\n                type: \"SPEAK\",\n                value: \"Nice, that's right. You have \".concat(context.points, \" \").concat(context.points === 1 ? 'point' : 'points', \".\")\n              })),\n              on: {\n                ENDSPEECH: {\n                  target: \"generate_math_question\"\n                }\n              }\n            },\n            too_long: {\n              entry: say('Still there?'),\n              on: {\n                ENDSPEECH: [{\n                  target: '#init',\n                  cond: context => context.maxspeech_counter > 2,\n                  actions: say(\"As you haven't responded; resetting...\")\n                }, {\n                  target: 'ask',\n                  actions: assign(context => {\n                    return {\n                      maxspeech_counter: (context.maxspeech_counter || 0) + 1\n                    };\n                  })\n                }]\n              }\n            },\n            ask: {\n              entry: [send('LISTEN'), send('MAXSPEECH', {\n                delay: 7000,\n                id: 'maxspeech_cancel'\n              })]\n            }\n          }\n        },\n        riddles: {\n          id: \"riddles\",\n          initial: \"prompt\",\n          on: {\n            MAXSPEECH: '.too_long',\n            RECOGNISED: [{\n              cond: context => riddles_store[context.riddle_id].answers.includes(context.recResult),\n              actions: say(\"Well done, that is correct! Resetting...\"),\n              target: '#init'\n            }, {\n              cond: context => context.recResult == 'hint',\n              target: '.hint'\n            }, {\n              target: \".wrong_answer\",\n              cond: context => !commands.includes(context.recResult)\n            }]\n          },\n          states: {\n            prompt: {\n              entry: say(\"Guess the answer to the riddle. Don't be afraid to ask for a hint. Here is your riddle: \"),\n              on: {\n                ENDSPEECH: {\n                  target: \"ask_riddle\",\n                  actions: assign(context => {\n                    return {\n                      riddle_id: Math.floor(Math.random() * 7)\n                    };\n                  })\n                }\n              }\n            },\n            hint: {\n              entry: send(context => ({\n                type: \"SPEAK\",\n                value: \"The hint is:\\n \".concat(riddles_store[context.riddle_id].hint, \" Now tell me...\")\n              })),\n              on: {\n                ENDSPEECH: \"ask\"\n              }\n            },\n            ask_riddle: {\n              entry: send(context => ({\n                type: \"SPEAK\",\n                value: \"\".concat(riddles_store[context.riddle_id].riddle)\n              })),\n              on: {\n                ENDSPEECH: \"ask\"\n              }\n            },\n            too_long: {\n              entry: say('Hello?'),\n              on: {\n                ENDSPEECH: [{\n                  target: '#init',\n                  actions: say(\"As you haven't responded, resetting...\"),\n                  cond: context => context.maxspeech_counter > 1\n                }, {\n                  target: 'ask',\n                  actions: [assign(context => {\n                    return {\n                      maxspeech_counter: (context.maxspeech_counter || 0) + 1\n                    };\n                  })]\n                }]\n              }\n            },\n            wrong_answer: {\n              entry: say(\"Sorry, that isn't right, try again. \"),\n              on: {\n                ENDSPEECH: \"ask\"\n              }\n            },\n            ask: {\n              entry: [send('LISTEN'), send('MAXSPEECH', {\n                delay: 15000,\n                id: 'maxspeech_cancel'\n              })]\n            }\n          }\n        },\n        chimp_test: {\n          id: \"chimp_test\",\n          initial: \"prompt\",\n          on: {\n            RECOGNISED: [{\n              target: '.correct_sequence',\n              actions: assign(context => {\n                context.sequence.push(Math.floor(Math.random() * 9));\n                return {\n                  one_try_given: false\n                };\n              }),\n              cond: context => math_operator_store.parse_asr_numbers(context.recResult) === context.sequence.join('')\n            }, {\n              target: \".wrong_sequence\",\n              cond: context => !commands.includes(context.recResult)\n            }]\n          },\n          states: {\n            prompt: {\n              entry: say(\"This is the chimp test. I will say an ever increasing sequence of numbers which you need to repeat back to me. If you can't recall a sequence you lose. Try to get the highest score!\"),\n              on: {\n                ENDSPEECH: {\n                  target: 'say_sequence',\n                  actions: assign(context => {\n                    return {\n                      sequence: [Math.floor(Math.random() * 9)]\n                    };\n                  })\n                }\n              }\n            },\n            say_sequence: {\n              entry: send(context => ({\n                type: \"SPEAK\",\n                value: \"The sequence is \".concat(context.sequence.join(' '), \". Repeat that back\")\n              })),\n              on: {\n                ENDSPEECH: 'ask'\n              }\n            },\n            correct_sequence: {\n              entry: send(context => ({\n                type: \"SPEAK\",\n                value: \"Good job! You have \".concat(context.sequence.length - 1, \" \").concat(context.sequence.length - 1 === 1 ? 'point' : 'points', \".\")\n              })),\n              on: {\n                ENDSPEECH: \"say_sequence\"\n              }\n            },\n            wrong_sequence: {\n              entry: say('That is incorrect. '),\n              on: {\n                ENDSPEECH: [{\n                  target: 'say_sequence',\n                  cond: context => {\n                    return !(context.one_try_given || false);\n                  },\n                  actions: [assign(context => {\n                    return {\n                      one_try_given: true\n                    };\n                  }), say(\"I will give you one more chance to get that right or you lose.\")]\n                }, {\n                  actions: send(context => ({\n                    type: \"SPEAK\",\n                    value: \"You ended with \".concat(context.sequence.length - 1, \" points\")\n                  })),\n                  target: '#init'\n                }]\n              }\n            },\n            ask: {\n              entry: [send('LISTEN'), send('MAXSPEECH', {\n                delay: context => 4000 + 1000 * context.sequence.length,\n                id: 'maxspeech_cancel'\n              })]\n            }\n          }\n        },\n        please_repeat: {\n          id: \"please_repeat\",\n          initial: \"prompt\",\n          states: {\n            prompt: {\n              entry: say(\"Sorry, I didn't get that. \")\n            }\n          },\n          on: {\n            ENDSPEECH: \"#init\"\n          }\n        }\n      }\n    },\n    maxspeech: {\n      initial: 'apologies',\n      on: {\n        ENDSPEECH: [{\n          target: '#init.main.hist',\n          cond: function cond() {\n            return maxspeech_count_local < 2;\n          },\n          actions: [function () {\n            maxspeech_count_local++;\n          }, assign(context => {\n            context;\n          })]\n        }, {\n          target: '#init',\n          actions: [function () {\n            maxspeech_count_local = 0;\n          }, say(\"and you haven't responded in a while. Resetting.\"), assign(context => {\n            context;\n          })]\n        }]\n      },\n      states: {\n        apologies: {\n          entry: say(\"Sorry, I couldn't hear you. \")\n        }\n      }\n    },\n    stop: {\n      entry: say(\"Ok, program stopped\"),\n      on: {\n        ENDSPEECH: {\n          target: '#init'\n        }\n      }\n    },\n    help: {\n      entry: say(\"I'm supposed to help you but I won't\"),\n      on: {\n        ENDSPEECH: {\n          target: '#init'\n        }\n      }\n    }\n  }\n}; //~ export const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n//~ initial: 'init',\n//~ states: {\n//~ init: {\n//~ on: {\n//~ CLICK: 'welcome'\n//~ }\n//~ },\n//~ welcome: {\n//~ on: {\n//~ RECOGNISED: [\n//~ { target: 'stop', cond: (context) => context.recResult === 'stop' },\n//~ { target: 'repaint' }]\n//~ },\n//~ ...promptAndAsk(\"Tell me the colour\")\n//~ },\n//~ stop: {\n//~ entry: say(\"Ok\"),\n//~ always: 'init'\n//~ },\n//~ repaint: {\n//~ initial: 'prompt',\n//~ states: {\n//~ prompt: {\n//~ entry: sayColour,\n//~ on: { ENDSPEECH: 'repaint' }\n//~ },\n//~ repaint: {\n//~ entry: 'changeColour',\n//~ always: '#root.dm.welcome'\n//~ }\n//~ }\n//~ }\n//~ }\n//~ })","map":{"version":3,"sources":["/Users/jacobcoles/Desktop/LT2216/final_project/final_project/src/final_project.ts"],"names":["actions","assign","send","cancel","say","text","_context","type","value","listen","grammar","quick_math","riddles","chimp_test","math_operator_store","operate","a","b","operator","generate_number","Math","floor","random","parse_asr_numbers","input","numbers","i","length","replace","split","join","riddles_store","riddle","answers","hint","promptAndAsk","prompt","initial","states","entry","on","ENDSPEECH","ask","delay","id","proxyurl","rasaurl","nluRequest","MAX_HTTP","target","invoke","src","context","event","fetch","Request","method","headers","body","recResult","then","data","json","onDone","onError","http_timer","done_req","console","log","intent","name","commands","maxspeech_count_local","dmMachine","maxspeech_count","MAXSPEECH","RECOGNISED","cond","main","hist","history","clicky","CLICK","begin","NLU_REQ_DONE","snippet","nlu_process","unconfident_resp","solution","toString","points","includes","generate_math_question","operator_id","number_one","number_two","ask_math_question","wrong_answer","right_answer","too_long","maxspeech_counter","riddle_id","ask_riddle","sequence","push","one_try_given","say_sequence","correct_sequence","wrong_sequence","please_repeat","maxspeech","apologies","stop","help"],"mappings":"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","sourcesContent":["import { MachineConfig, actions, Action, assign } from \"xstate\";\nconst { send, cancel } = actions;\n\n\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string, bool_val?: boolean, initial_function: string } } = {\n\n\t\"quick math\": { quick_math: null },\n\t\"quick maths\": { quick_math: null },\n\t\"play quick math\": { quick_math: null },\n\t\"play quick maths\": { quick_math: null },\n\t\n\t\"riddles\": { riddles: null },\n\t\"riddle\": { riddles: null },\n\t\"tell me a riddle\": { riddles: null },\n\t\"play riddles\": { riddles: null },\n\t\n\t\"memory game\": { chimp_test: null },\n\t\"memory test\": { chimp_test: null },\n\t\"number test\": { chimp_test: null },\n\t\"number memory test\": { chimp_test: null },\n\t\"the memory game\": { chimp_test: null },\n\t\"the memory test\": { chimp_test: null },\n\t\"the number test\": { chimp_test: null },\n\t\"the number memory test\": { chimp_test: null },\n\t\"number sequence game\": { chimp_test: null },\n\t\"the number sequence game\": { chimp_test: null },\n\t\n}\n\n\nconst math_operator_store = {\n\toperate: function(a,b,operator){\n\t\tswitch(operator){\n\t\t\tcase 'plus': \n\t\t\t\treturn a+b\n\t\t\tcase 'subtract': \n\t\t\t\treturn a-b\n\t\t\tcase 'times': \n\t\t\t\treturn a*b\n\t\t\t//~ case 'divide':\n\t\t\t\t//~ return a/b\n\t\t\t}\n\t\t},\n\tgenerate_number: function(operator){\n\t\tswitch(operator){\n\t\t\tcase 'plus': \n\t\t\t\treturn Math.floor(Math.random() * 100)\n\t\t\tcase 'subtract': \n\t\t\t\treturn Math.floor(Math.random() * 100)\n\t\t\tcase 'times': \n\t\t\t\treturn Math.floor(Math.random() * 12)\n\t\t\t//~ case 'divide':\n\t\t\t\t//~ return a/b\n\t\t}\n\t},\n\tparse_asr_numbers: function(input){\n\t\tconst numbers = {\n\t\t\t0: 'zero',\n\t\t\t1: 'one',\n\t\t\t2: 'two',\n\t\t\t3: 'three',\n\t\t\t4: 'four',\n\t\t\t5: 'five',\n\t\t\t6: 'six',\n\t\t\t7: 'seven',\n\t\t\t8: 'eight',\n\t\t\t9: 'nine',\n\t\t}\n\t\tfor (var i = 0; i < numbers.length; i++) {\n\t\t\tinput = input.replace(numbers[i], i)\n\t\t}\n\t\tinput = input.replace('for', 4)\n\t\tinput = input.replace('to', 2)\n\t\tinput = input.replace('too', 2)\n\t\treturn input.split(/[\\s--,.+]/).join('') \n\t},\n\t0: {\n\t\toperator: \"plus\",\n\t},\n\t1: {\n\t\toperator: \"subtract\",\n\t},\n\t2: {\n\t\toperator: \"times\",\n\t},\n\t3: {\n\t\toperator: \"divide\",\n\t},\n}\n\nconst riddles_store = {\n\t0: {\n\t\triddle: \"What has to be broken before you can use it?\",\n\t\tanswers: [\n\t\t\t\"egg\",\n\t\t\t\"an egg\",\n\t\t],\n\t\thint: \"I like them scrambled. \"\n\t},\n\t1: {\n\t\triddle: \"What gets wet while drying?\",\n\t\tanswers: [\n\t\t\t\"towel\",\n\t\t\t\"a towel\",\n\t\t\t\"towels\",\n\t\t],\n\t\thint: \"You'll have to take one to the beach if you want to take a swim. \"\n\t},\n\t2: {\n\t\triddle: \"What can you give and still hold on to?\",\n\t\tanswers: [\n\t\t\t\"promise\",\n\t\t\t\"a promise\",\n\t\t\t\"promises\",\n\t\t\t\"your word\"\n\t\t],\n\t\thint: \"Relationships are more secure with these. \"\n\t},\n\t3: {\n\t\triddle: \"The more of this there is, the less you see. What is it?\",\n\t\tanswers: [\n\t\t\t\"darkness\",\n\t\t\t\"the dark\",\n\t\t],\n\t\thint: \"This descibes the absence rather than the presence of something. \"\n\t},\n\t4: {\n\t\triddle: \"This is as light as a feather, but you can't hold it too long. \",\n\t\tanswers: [\n\t\t\t\"your breath\",\n\t\t\t\"breath\",\n\t\t\t\"the breath\",\n\t\t\t\"a breath\"\n\t\t],\n\t\thint: \"Don't forget to do this or you'll die.\"\n\t},\n\t5: {\n\t\triddle: \"Before Mount Everest was discovered, what was the highest mountain on Earth?\",\n\t\tanswers: [\n\t\t\t\"everest\",\n\t\t\t\"mount everest\"\n\t\t],\n\t\thint: \"If nobody is there to observe it does that mean it is not true?\"\n\t},\n\t6: {\n\t\triddle: \"What runs around the whole yard without moving?\",\n\t\tanswers: [\n\t\t\t\"a fence\",\n\t\t\t\"fence\",\n\t\t\t\"fences\",\n\t\t],\n\t\thint: \"Some things described as running may be static. \"\n\t},\n\t7: {\n\t\triddle: \"What can you catch, but never throw?\",\n\t\tanswers: [\n\t\t\t\"a cold\",\n\t\t\t\"a virus\",\n\t\t\t\"a sickness\",\n\t\t\t\"a disease\",\n\t\t\t\"cold\",\n\t\t\t\"virus\",\n\t\t\t\"sickness\",\n\t\t\t\"disease\",\n\t\t\t\"colds\",\n\t\t\t\"viruses\",\n\t\t\t\"sicknesses\",\n\t\t\t\"diseases\",\n\t\t],\n\t\thint: \"Covid 19 has not been a great thing for the world. \"\n\t},\n\t\n}\n\nfunction promptAndAsk(prompt: string): MachineConfig<SDSContext, any, SDSEvent> {\n\t\n    return ({\n        initial: 'prompt',\n        states: {\n            prompt: {\n                entry: say(prompt),\n                on: { ENDSPEECH: 'ask' }\n            },\n            ask: {\n                entry: [\n\t\t\t\t\tsend('LISTEN'),\n\t\t\t\t\tsend( 'MAXSPEECH', { delay: 4000, id: 'maxspeech_cancel' } )\n\t\t\t\t]\n            },\n        }\n    })\n}\n\nconst proxyurl = \"https://boiling-depths-26621.herokuapp.com/\"\nconst rasaurl = 'https://herokufinalproj.herokuapp.com/model/parse'\nfunction nluRequest(): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n\t\tinitial: 'http_timer',\n\t\ton: {\n\t\t\tMAX_HTTP: {\n\t\t\t\ttarget: '#root.dm',\n\t\t\t\tactions: say('The RASA server is taking too long to respond. Please wait and try again. ')\n\t\t\t}\n\t\t},\n\t\tinvoke: {\n\t\t\tid: \"rasaquery\",\n\t\t\tsrc: (context, event) => {\n\t\t\t\t\n\t\t\t\treturn fetch(new Request(proxyurl + rasaurl, {\n\t\t        method: 'POST',\n\t\t        headers: { 'Origin': 'http://localhost:3000/' }, // only required with proxy\n\t\t        body: `{\"text\": \"${context.recResult}\"}`\n\t\t\t\t}))\n\t\t        .then(data => data.json());\n\n\t\t\t},\n\t\t\tonDone: send(\"NLU_REQ_DONE\"), //(context,event)=>{\n\t\t\t\t//send({ type: \"NLU_REQ_DONE\", value: 'unconfident_resp'  })\n\t\t\t\t//send(\"NLU_REQ_DONE\")\n\t\t\t//},\n\t\t\t//~ {\n\t\t\t\t//~ actions: [\n\t\t\t\t\t//~ (context:SDSContext, event:any) => console.log(event.data),\n\t\t\t\t\t//~ (context, event)=>{\n\t\t\t\t\t\t//~ if((event.data.intent.confidence) < 0.7){\n\t\t\t\t\t\t\t//~ var snippet = 'unconfident_resp' \n\t\t\t\t\t\t//~ }\n\t\t\t\t\t\t//~ else{\n\t\t\t\t\t\t\t//~ var snippet = event.data.intent.name\n\t\t\t\t\t\t//~ }\n\t\t\t\t\t\t//~ send({ type: \"NLU_REQ_DONE\", value: ( event.data.intent.name || 'unconfident_resp' ) })\n\t\t\t\t\t//~ }\n\t\t\t\t//~ ]\n\t\t\t//~ },\n\t\t\tonError: {\n\t\t\t\t\ttarget: '#root.dm',\n\t\t\t\t\tactions: say(\"Sorry, there was an error. \")\n\t\t\t\t},\n\t\t},\n\t\tstates: {\n\t\t\thttp_timer: {\n\t\t\t\tentry: send( 'MAX_HTTP', { delay: 12000, id: 'maxspeech_cancel' } )\n\t\t\t},\n\t\t\tdone_req: {\n\t\t\t\tentry: assign((function(context,event){console.log(event.data.intent.name);send({ type: \"NLU_REQ_DONE\", value: 'unconfident_resp'  }) }))\n\t\t\t}\n\t\t}\n\t})\n}\n\nconst commands = ['stop', 'help']\nvar maxspeech_count_local = 0\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'main',\n    id: 'init',\n    context: {\n\t\tmaxspeech_count: 0,\n\t},\n    on: {\n\t\tMAXSPEECH: '.maxspeech',\n\t\tRECOGNISED: \n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\ttarget: \".stop\",\n\t\t\t\t\tcond: (context) => context.recResult === 'stop' ,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttarget: \".help\",\n\t\t\t\t\tcond: (context) => context.recResult === 'help' ,\n\t\t\t\t}\n\t\t\t],\n\t},\n    states: {\n        main: {\n\t\t\tinitial: 'clicky',\n\t\t\tstates: {\n\t\t\t\thist: {\n\t\t\t\t\ttype: 'history',\n\t\t\t\t\thistory: 'shallow',\n\t\t\t\t },\n\t\t\t\tclicky: {\n\t\t\t\t\ton: {\n\t\t\t\t\t\tCLICK: {\n\t\t\t\t\t\t\ttarget: 'begin',\n\t\t\t\t\t\t\tactions: assign(context=>{maxspeech_count_local = 0; return { maxspeech_count: 0 } })\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tbegin:{\n\t\t\t\t\tinitial: \"prompt\",\n\t\t\t\t\tid: \"welcome\",\n\t\t\t\t\ton: {\n\t\t\t\t\t\tMAX_HTTP: {\n\t\t\t\t\t\t\ttarget: '#init',\n\t\t\t\t\t\t\tactions: say('The RASA server is taking too long to respond. Please wait and try again. ')\n\t\t\t\t\t\t},\n\t\t\t\t\t\tNLU_REQ_DONE: [\n\t\t\t\t\t\t\t{\n\t\t\t                    cond: (context) => context.snippet === \"chimp_test\",\n\t\t\t                    target: \"chimp_test\",\n\t\t\t                    actions: assign((context, event) => { return { snippet: event.value }}),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttarget: \"quick_math\",\n\t\t\t\t\t\t\t\tcond: (context, event) => event.value === \"quick_math\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttarget: \"riddles\",\n\t\t\t\t\t\t\t\tcond: (context) => context.snippet === \"riddles\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttarget: \".unconfident_resp\",\n\t\t\t\t\t\t\t\t//cond: (context) => context.snippet === \"unconfident_resp\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t//~ {\n\t\t\t\t\t\t\t\t//~ target: \"please_repeat\",\n\t\t\t\t\t\t\t\t//~ cond: (context) => !commands.includes(context.recResult),\n\t\t\t\t\t\t\t\t//~ actions: assign(context=>console.log(context.snippet))\n\t\t\t\t\t\t\t//~ },\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t],\n\t\t\t\t\t\tRECOGNISED: '.nlu_process'\n\t\t\t\t\t},\n\t\t\t\t\tstates: {\n\t\t\t\t\t\tprompt: {\n\t\t\t\t\t\t\t...promptAndAsk(\"hello\") //\"Hellooo. You have a selection of one of the following mini games. You can choose between quick maths, riddles, the number memory test, or spelling. You can also tell me to stop or ask for help at any time. \")\n\t\t\t\t\t\t},\n\t\t\t\t\t\tnlu_process: {\n\t\t\t\t\t\t\tinitial: 'http_timer',\n\t\t\t\t\t\t\ton: {\n\t\t\t\t\t\t\t\tMAX_HTTP: {\n\t\t\t\t\t\t\t\t\ttarget: '#root.dm',\n\t\t\t\t\t\t\t\t\tactions: say('')\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tinvoke: {\n\t\t\t\t\t\t\t\tid: \"rasaquery\",\n\t\t\t\t\t\t\t\tsrc: (context, event) => {\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\treturn fetch(new Request(proxyurl + rasaurl, {\n\t\t\t\t\t\t\t        method: 'POST',\n\t\t\t\t\t\t\t        headers: { 'Origin': 'http://localhost:3000/' }, // only required with proxy\n\t\t\t\t\t\t\t        body: `{\"text\": \"${context.recResult}\"}`\n\t\t\t\t\t\t\t\t\t}))\n\t\t\t\t\t\t\t        .then(data => data.json());\n\t\t\t\t\t\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tonDone: assign((context, event)=>send({ type: \"NLU_REQ_DONE\", value: ( event.data.intent.name || 'unconfident_resp' ) })),\n\t\t\t\t\t\t\t\tonError: {\n\t\t\t\t\t\t\t\t\t\ttarget: '#root.dm',\n\t\t\t\t\t\t\t\t\t\tactions: say(\"Sorry, there was an error. \")\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tstates: {\n\t\t\t\t\t\t\t\thttp_timer: {\n\t\t\t\t\t\t\t\t\tentry: send( 'MAX_HTTP', { delay: 12000, id: 'maxspeech_cancel' } )\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tunconfident_resp: {\n\t\t\t\t\t\t\tentry: say('Sorry, I am not quite sure what you want, resetting...'),\n\t\t\t\t\t\t\ton: { ENDSPEECH: '#init' }\n\t\t\t\t\t\t}\n\t\t            }\n\t\t\t\t},\n\t\t\t\tquick_math: {\n\t\t            id: \"quick_math\",\n\t\t\t\t\tinitial: \"generate_math_question\",\n\t\t\t\t\ton: {\n\t\t\t\t\t\tMAXSPEECH: '.too_long',\n\t\t\t\t\t\tRECOGNISED: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttarget: '.right_answer',\n\t\t\t\t\t\t\t\tcond: (context) => context.recResult === context.solution.toString(),\n\t\t\t\t\t\t\t\tactions: assign((context)=>{ return { points: (context.points || 0)+1 } })\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttarget: \".wrong_answer\",\n\t\t\t\t\t\t\t\tcond: (context) => !commands.includes(context.recResult)\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\tstates: {\n\t\t\t\t\t\tgenerate_math_question: {\n\t\t\t\t\t\t\tentry: say(\"Here is your maths question\"),\n\t\t\t\t\t\t\ton: {\n\t\t\t\t\t\t\t\tENDSPEECH: {\n\t\t\t\t\t\t\t\t\ttarget: \"ask_math_question\",\n\t\t\t\t\t\t\t\t\tactions: assign((context) => {\n\t\t\t\t\t\t\t\t\t\tvar operator_id = Math.floor(Math.random() * 3)\n\t\t\t\t\t\t\t\t\t\tvar operator = math_operator_store[operator_id].operator\n\t\t\t\t\t\t\t\t\t\treturn { \n\t\t\t\t\t\t\t\t\t\t\tnumber_one: math_operator_store.generate_number(operator),\n\t\t\t\t\t\t\t\t\t\t\tnumber_two: math_operator_store.generate_number(operator),\n\t\t\t\t\t\t\t\t\t\t\toperator_id: operator_id,\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\task_math_question: {\n\t\t\t\t\t\t\tentry: send((context) => ({\n\t\t                        type: \"SPEAK\",\n\t\t                        value: `What is ${context.number_one} ${math_operator_store[context.operator_id].operator} ${context.number_two}.`\n\t\t                    })),\n\t\t                    on: { ENDSPEECH: {\n\t\t\t\t\t\t\t\t\ttarget: \"ask\",\n\t\t\t\t\t\t\t\t\tactions: assign(context=> {\n\t\t\t\t\t\t\t\t\t\treturn { solution: math_operator_store.operate(context.number_one, context.number_two, math_operator_store[context.operator_id].operator) }\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\twrong_answer: {\n\t\t\t\t\t\t\tentry: say(\"Sorry, that isn't right, try again.\"),\n\t\t\t\t\t\t\ton: { ENDSPEECH: \"ask\" }\n\t\t\t\t\t\t},\n\t\t\t\t\t\tright_answer: {\n\t\t\t\t\t\t\tentry: send((context) => ({\n\t\t                        type: \"SPEAK\",\n\t\t                        value: `Nice, that's right. You have ${context.points} ${( (context.points === 1)? 'point' : 'points')}.`\n\t\t                    })),\n\t\t\t\t\t\t\ton: { \n\t\t\t\t\t\t\t\tENDSPEECH: {\n\t\t\t\t\t\t\t\t\ttarget: \"generate_math_question\",\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttoo_long:{\n\t\t\t\t\t\t\tentry: say('Still there?'),\n\t\t\t\t\t\t\ton: { \n\t\t\t\t\t\t\t\tENDSPEECH: [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\ttarget: '#init',\n\t\t\t\t\t\t\t\t\t\tcond: (context) => context.maxspeech_counter > 2,\n\t\t\t\t\t\t\t\t\t\tactions: say(\"As you haven't responded; resetting...\")\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\ttarget: 'ask',\n\t\t\t\t\t\t\t\t\t\tactions: assign(context=>{ return { maxspeech_counter: (context.maxspeech_counter || 0)+1 } })\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\task: {\n\t\t\t                entry: [\n\t\t\t\t\t\t\t\tsend('LISTEN'),\n\t\t\t\t\t\t\t\tsend( 'MAXSPEECH', { delay: 7000, id: 'maxspeech_cancel' } )\n\t\t\t\t\t\t\t],\n\t\t\t            },\n\t\t\t        }\n\t\t\t\t},\n\t\t\t\triddles: {\n\t\t            id: \"riddles\",\n\t\t\t\t\tinitial: \"prompt\",\n\t\t\t\t\ton: {\n\t\t\t\t\t\tMAXSPEECH: '.too_long',\n\t\t\t\t\t\tRECOGNISED: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcond: context => riddles_store[context.riddle_id].answers.includes(context.recResult),\n\t\t\t\t\t\t\t\tactions: say(\"Well done, that is correct! Resetting...\"),\n\t\t\t\t\t\t\t\ttarget: '#init'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcond: context => context.recResult == 'hint',\n\t\t\t                    target: '.hint'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{ \n\t\t\t\t\t\t\t\ttarget: \".wrong_answer\" ,\n\t\t\t\t\t\t\t\tcond: (context) => !commands.includes(context.recResult)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\tstates: {\n\t\t\t\t\t\tprompt: {\n\t\t\t\t\t\t\tentry: say(\"Guess the answer to the riddle. Don't be afraid to ask for a hint. Here is your riddle: \"),\n\t\t\t\t\t\t\ton: {\n\t\t\t\t\t\t\t\tENDSPEECH: {\n\t\t\t\t\t\t\t\t\ttarget: \"ask_riddle\",\n\t\t\t\t\t\t\t\t\tactions: assign((context) => {\n\t\t\t\t\t\t\t\t\t\treturn { riddle_id: Math.floor(Math.random() * 7) }\n\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\thint: {\n\t\t\t\t\t\t\tentry: send((context) => ({\n\t\t                        type: \"SPEAK\",\n\t\t                        value: `The hint is:\\n ${riddles_store[context.riddle_id].hint} Now tell me...`\n\t\t                    })),\n\t\t                    on: { ENDSPEECH: \"ask\" }\n\t\t\t\t\t\t},\n\t\t\t\t\t\task_riddle: {\n\t\t\t\t\t\t\tentry: send((context) => ({\n\t\t                        type: \"SPEAK\",\n\t\t                        value: `${riddles_store[context.riddle_id].riddle}`\n\t\t                    })),\n\t\t                    on: { ENDSPEECH: \"ask\" }\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttoo_long:{\n\t\t\t\t\t\t\tentry: say('Hello?'),\n\t\t\t\t\t\t\ton: { \n\t\t\t\t\t\t\t\tENDSPEECH: [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\ttarget: '#init',\n\t\t\t\t\t\t\t\t\t\tactions: say(\"As you haven't responded, resetting...\"),\n\t\t\t\t\t\t\t\t\t\tcond: context=> context.maxspeech_counter >1,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\ttarget: 'ask',\n\t\t\t\t\t\t\t\t\t\tactions: [\n\t\t\t\t\t\t\t\t\t\t\tassign(context=>{ return { maxspeech_counter: (context.maxspeech_counter || 0) +1 } }),\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\twrong_answer: {\n\t\t\t\t\t\t\tentry: say(\"Sorry, that isn't right, try again. \"),\n\t\t\t\t\t\t\ton: { ENDSPEECH: \"ask\" }\n\t\t\t\t\t\t},\n\t\t\t\t\t\task: {\n\t\t\t                entry: [\n\t\t\t\t\t\t\t\tsend('LISTEN'),\n\t\t\t\t\t\t\t\tsend( 'MAXSPEECH', { delay: 15000, id: 'maxspeech_cancel' } )\n\t\t\t\t\t\t\t],\n\t\t\t            },\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tchimp_test: {\n\t\t            id: \"chimp_test\",\n\t\t\t\t\tinitial: \"prompt\",\n\t\t\t\t\ton: {\n\t\t\t\t\t\tRECOGNISED: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttarget: '.correct_sequence',\n\t\t\t\t\t\t\t\tactions: assign((context)=>{\n\t\t\t\t\t\t\t\t\tcontext.sequence.push(Math.floor(Math.random() * 9))\n\t\t\t\t\t\t\t\t\treturn { one_try_given: false }\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\tcond: context => math_operator_store.parse_asr_numbers(context.recResult) === context.sequence.join('')\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{ \n\t\t\t\t\t\t\t\ttarget: \".wrong_sequence\" ,\n\t\t\t\t\t\t\t\tcond: (context) => !commands.includes(context.recResult)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\tstates: {\n\t\t\t\t\t\tprompt: {\n\t\t\t\t\t\t\tentry: say(\"This is the chimp test. I will say an ever increasing sequence of numbers which you need to repeat back to me. If you can't recall a sequence you lose. Try to get the highest score!\"),\n\t\t\t\t\t\t\ton: {\n\t\t\t\t\t\t\t\tENDSPEECH: {\n\t\t\t\t\t\t\t\t\ttarget: 'say_sequence',\n\t\t\t\t\t\t\t\t\tactions: assign( (context)=> {\n\t\t\t\t\t\t\t\t\t\treturn { sequence: [Math.floor(Math.random() * 9),] }\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tsay_sequence: {\n\t\t\t\t\t\t\tentry: send((context) => ({\n\t\t                        type: \"SPEAK\",\n\t\t                        value: `The sequence is ${context.sequence.join(' ')}. Repeat that back`\n\t\t                    })),\n\t\t                    on: { ENDSPEECH: 'ask' }\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcorrect_sequence: {\n\t\t\t\t\t\t\tentry: send((context) => ({\n\t\t                        type: \"SPEAK\",\n\t\t                        value: `Good job! You have ${context.sequence.length-1} ${( ( (context.sequence.length-1) === 1)? 'point' : 'points')}.`\n\t\t                    })),\n\t\t\t\t\t\t\ton: { ENDSPEECH: \"say_sequence\" }\n\t\t\t\t\t\t},\n\t\t\t\t\t\twrong_sequence: {\n\t\t\t\t\t\t\tentry: say('That is incorrect. '),\n\t\t\t\t\t\t\ton: { \n\t\t\t\t\t\t\t\tENDSPEECH: [ \n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\ttarget: 'say_sequence',\n\t\t\t\t\t\t\t\t\t\tcond: context => {return !(context.one_try_given || false)},\n\t\t\t\t\t\t\t\t\t\tactions: [\n\t\t\t\t\t\t\t\t\t\t\tassign((context)=>{return { one_try_given: true } }),\n\t\t\t\t\t\t\t\t\t\t\tsay(\"I will give you one more chance to get that right or you lose.\")\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tactions: send((context) => ({\n\t\t\t\t\t                        type: \"SPEAK\",\n\t\t\t\t\t                        value: `You ended with ${context.sequence.length-1} points`\n\t\t\t\t\t                    })),\n\t\t\t\t\t\t\t\t\t\ttarget: '#init',\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\task: {\n\t\t\t                entry: [\n\t\t\t\t\t\t\t\tsend('LISTEN'),\n\t\t\t\t\t\t\t\tsend( 'MAXSPEECH', { delay: context=>(4000+1000*context.sequence.length), id: 'maxspeech_cancel' } ),\n\t\t\t\t\t\t\t],\n\t\t\t            },\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tplease_repeat: {\n\t\t            id: \"please_repeat\",\n\t\t\t\t\tinitial: \"prompt\",\n\t\t\t\t\tstates: {\n\t\t\t\t\t\tprompt: {\n\t\t\t\t\t\t\tentry: say(\"Sorry, I didn't get that. \")\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\ton: { ENDSPEECH: \"#init\" }\n\t\t\t\t},\n\t\t    },\n\t\t},\n\t\tmaxspeech: {\n\t\t\tinitial: 'apologies',\n\t\t\ton: {\n\t\t\t\tENDSPEECH: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttarget: '#init.main.hist',\n\t\t\t\t\t\tcond: (function() { return maxspeech_count_local < 2 } ),\n\t\t\t\t\t\tactions: [\n\t\t\t\t\t\t\t(function() { maxspeech_count_local ++ } ),\n\t\t\t\t\t\t\tassign(context=>{context})\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttarget: '#init',\n\t\t\t\t\t\tactions: [\n\t\t\t\t\t\t\t(function() { maxspeech_count_local = 0 } ),\n\t\t\t\t\t\t\tsay(\"and you haven't responded in a while. Resetting.\"),\n\t\t\t\t\t\t\tassign(context=>{context})\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t]\n\t\t\t},\n\t\t\tstates: {\n\t\t\t\tapologies: {\n\t\t\t\t\tentry: say(\"Sorry, I couldn't hear you. \")\n\t\t\t\t},\n\t\t\t}\n\t\t},\n\t\tstop: {\n\t\t\tentry: say(\"Ok, program stopped\"),\n\t\t\ton: {\n\t\t\t\tENDSPEECH: {\n\t\t\t\t\ttarget: '#init'\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\thelp: {\n\t\t\tentry: say(\"I'm supposed to help you but I won't\"),\n\t\t\ton: {\n\t\t\t\tENDSPEECH: {\n\t\t\t\t\ttarget: '#init'\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n})\n\n\n\n\n\n//~ export const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    //~ initial: 'init',\n    //~ states: {\n        //~ init: {\n            //~ on: {\n                //~ CLICK: 'welcome'\n            //~ }\n        //~ },\n        //~ welcome: {\n            //~ on: {\n                //~ RECOGNISED: [\n                    //~ { target: 'stop', cond: (context) => context.recResult === 'stop' },\n                    //~ { target: 'repaint' }]\n            //~ },\n            //~ ...promptAndAsk(\"Tell me the colour\")\n        //~ },\n        //~ stop: {\n            //~ entry: say(\"Ok\"),\n            //~ always: 'init'\n        //~ },\n        //~ repaint: {\n            //~ initial: 'prompt',\n            //~ states: {\n                //~ prompt: {\n                    //~ entry: sayColour,\n                    //~ on: { ENDSPEECH: 'repaint' }\n                //~ },\n                //~ repaint: {\n                    //~ entry: 'changeColour',\n                    //~ always: '#root.dm.welcome'\n                //~ }\n            //~ }\n        //~ }\n    //~ }\n//~ })\n"]},"metadata":{},"sourceType":"module"}