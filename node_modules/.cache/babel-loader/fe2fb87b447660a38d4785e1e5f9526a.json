{"ast":null,"code":"\"use strict\"; // Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// ** This file is automatically generated by gapic-generator-typescript. **\n// ** https://github.com/googleapis/gapic-generator-typescript **\n// ** All changes to this file may be overwritten. **\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AdaptationClient = void 0;\n/* global window */\n\nconst gax = require(\"google-gax\");\n\nconst path = require(\"path\");\n/**\n * Client JSON configuration object, loaded from\n * `src/v1p1beta1/adaptation_client_config.json`.\n * This file defines retry strategy and timeouts for all API methods in this library.\n */\n\n\nconst gapicConfig = require(\"./adaptation_client_config.json\");\n\nconst version = require('../../../package.json').version;\n/**\n *  Service that implements Google Cloud Speech Adaptation API.\n * @class\n * @memberof v1p1beta1\n */\n\n\nclass AdaptationClient {\n  /**\n   * Construct an instance of AdaptationClient.\n   *\n   * @param {object} [options] - The configuration object.\n   * The options accepted by the constructor are described in detail\n   * in [this document](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#creating-the-client-instance).\n   * The common options are:\n   * @param {object} [options.credentials] - Credentials object.\n   * @param {string} [options.credentials.client_email]\n   * @param {string} [options.credentials.private_key]\n   * @param {string} [options.email] - Account email address. Required when\n   *     using a .pem or .p12 keyFilename.\n   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or\n   *     .p12 key downloaded from the Google Developers Console. If you provide\n   *     a path to a JSON file, the projectId option below is not necessary.\n   *     NOTE: .pem and .p12 require you to specify options.email as well.\n   * @param {number} [options.port] - The port on which to connect to\n   *     the remote host.\n   * @param {string} [options.projectId] - The project ID from the Google\n   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check\n   *     the environment variable GCLOUD_PROJECT for your project ID. If your\n   *     app is running in an environment which supports\n   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},\n   *     your project ID will be detected automatically.\n   * @param {string} [options.apiEndpoint] - The domain name of the\n   *     API remote host.\n   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.\n   *     Follows the structure of {@link gapicConfig}.\n   * @param {boolean} [options.fallback] - Use HTTP fallback mode.\n   *     In fallback mode, a special browser-compatible transport implementation is used\n   *     instead of gRPC transport. In browser context (if the `window` object is defined)\n   *     the fallback mode is enabled automatically; set `options.fallback` to `false`\n   *     if you need to override this behavior.\n   */\n  constructor(opts) {\n    var _a, _b;\n\n    this._terminated = false;\n    this.descriptors = {\n      page: {},\n      stream: {},\n      longrunning: {},\n      batching: {}\n    }; // Ensure that options include all the required fields.\n\n    const staticMembers = this.constructor;\n    const servicePath = (opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint) || staticMembers.servicePath;\n    const port = (opts === null || opts === void 0 ? void 0 : opts.port) || staticMembers.port;\n    const clientConfig = (_a = opts === null || opts === void 0 ? void 0 : opts.clientConfig) !== null && _a !== void 0 ? _a : {};\n    const fallback = (_b = opts === null || opts === void 0 ? void 0 : opts.fallback) !== null && _b !== void 0 ? _b : typeof window !== 'undefined' && typeof (window === null || window === void 0 ? void 0 : window.fetch) === 'function';\n    opts = Object.assign({\n      servicePath,\n      port,\n      clientConfig,\n      fallback\n    }, opts); // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.\n\n    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {\n      opts['scopes'] = staticMembers.scopes;\n    } // Choose either gRPC or proto-over-HTTP implementation of google-gax.\n\n\n    this._gaxModule = opts.fallback ? gax.fallback : gax; // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.\n\n    this._gaxGrpc = new this._gaxModule.GrpcClient(opts); // Save options to use in initialize() method.\n\n    this._opts = opts; // Save the auth object to the client, for use by other methods.\n\n    this.auth = this._gaxGrpc.auth; // Set the default scopes in auth client if needed.\n\n    if (servicePath === staticMembers.servicePath) {\n      this.auth.defaultScopes = staticMembers.scopes;\n    } // Determine the client header string.\n\n\n    const clientHeader = [\"gax/\".concat(this._gaxModule.version), \"gapic/\".concat(version)];\n\n    if (typeof process !== 'undefined' && 'versions' in process) {\n      clientHeader.push(\"gl-node/\".concat(process.versions.node));\n    } else {\n      clientHeader.push(\"gl-web/\".concat(this._gaxModule.version));\n    }\n\n    if (!opts.fallback) {\n      clientHeader.push(\"grpc/\".concat(this._gaxGrpc.grpcVersion));\n    }\n\n    if (opts.libName && opts.libVersion) {\n      clientHeader.push(\"\".concat(opts.libName, \"/\").concat(opts.libVersion));\n    } // Load the applicable protos.\n    // For Node.js, pass the path to JSON proto file.\n    // For browsers, pass the JSON content.\n\n\n    const nodejsProtoPath = path.join(__dirname, '..', '..', 'protos', 'protos.json');\n    this._protos = this._gaxGrpc.loadProto(opts.fallback ? // eslint-disable-next-line @typescript-eslint/no-var-requires\n    require('../../protos/protos.json') : nodejsProtoPath); // This API contains \"path templates\"; forward-slash-separated\n    // identifiers to uniquely identify resources within the API.\n    // Create useful helper objects for these.\n\n    this.pathTemplates = {\n      customClassPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/customClasses/{custom_class}'),\n      locationPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}'),\n      phraseSetPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/phraseSets/{phrase_set}'),\n      projectPathTemplate: new this._gaxModule.PathTemplate('projects/{project}')\n    }; // Some of the methods on this service return \"paged\" results,\n    // (e.g. 50 results at a time, with tokens to get subsequent\n    // pages). Denote the keys used for pagination and results.\n\n    this.descriptors.page = {\n      listPhraseSet: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'phraseSets'),\n      listCustomClasses: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'customClasses')\n    }; // Put together the default options sent with requests.\n\n    this._defaults = this._gaxGrpc.constructSettings('google.cloud.speech.v1p1beta1.Adaptation', gapicConfig, opts.clientConfig || {}, {\n      'x-goog-api-client': clientHeader.join(' ')\n    }); // Set up a dictionary of \"inner API calls\"; the core implementation\n    // of calling the API is handled in `google-gax`, with this code\n    // merely providing the destination and request information.\n\n    this.innerApiCalls = {};\n  }\n  /**\n   * Initialize the client.\n   * Performs asynchronous operations (such as authentication) and prepares the client.\n   * This function will be called automatically when any class method is called for the\n   * first time, but if you need to initialize it before calling an actual method,\n   * feel free to call initialize() directly.\n   *\n   * You can await on this method if you want to make sure the client is initialized.\n   *\n   * @returns {Promise} A promise that resolves to an authenticated service stub.\n   */\n\n\n  initialize() {\n    // If the client stub promise is already initialized, return immediately.\n    if (this.adaptationStub) {\n      return this.adaptationStub;\n    } // Put together the \"service stub\" for\n    // google.cloud.speech.v1p1beta1.Adaptation.\n\n\n    this.adaptationStub = this._gaxGrpc.createStub(this._opts.fallback ? this._protos.lookupService('google.cloud.speech.v1p1beta1.Adaptation') : // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    this._protos.google.cloud.speech.v1p1beta1.Adaptation, this._opts); // Iterate over each of the methods that the service provides\n    // and create an API call method for each.\n\n    const adaptationStubMethods = ['createPhraseSet', 'getPhraseSet', 'listPhraseSet', 'updatePhraseSet', 'deletePhraseSet', 'createCustomClass', 'getCustomClass', 'listCustomClasses', 'updateCustomClass', 'deleteCustomClass'];\n\n    for (var _i = 0, _adaptationStubMethod = adaptationStubMethods; _i < _adaptationStubMethod.length; _i++) {\n      const methodName = _adaptationStubMethod[_i];\n      const callPromise = this.adaptationStub.then(stub => (...args) => {\n        if (this._terminated) {\n          return Promise.reject('The client has already been closed.');\n        }\n\n        const func = stub[methodName];\n        return func.apply(stub, args);\n      }, err => () => {\n        throw err;\n      });\n      const descriptor = this.descriptors.page[methodName] || undefined;\n\n      const apiCall = this._gaxModule.createApiCall(callPromise, this._defaults[methodName], descriptor);\n\n      this.innerApiCalls[methodName] = apiCall;\n    }\n\n    return this.adaptationStub;\n  }\n  /**\n   * The DNS address for this API service.\n   * @returns {string} The DNS address for this service.\n   */\n\n\n  static get servicePath() {\n    return 'speech.googleapis.com';\n  }\n  /**\n   * The DNS address for this API service - same as servicePath(),\n   * exists for compatibility reasons.\n   * @returns {string} The DNS address for this service.\n   */\n\n\n  static get apiEndpoint() {\n    return 'speech.googleapis.com';\n  }\n  /**\n   * The port for this API service.\n   * @returns {number} The default port for this service.\n   */\n\n\n  static get port() {\n    return 443;\n  }\n  /**\n   * The scopes needed to make gRPC calls for every method defined\n   * in this service.\n   * @returns {string[]} List of default scopes.\n   */\n\n\n  static get scopes() {\n    return ['https://www.googleapis.com/auth/cloud-platform'];\n  }\n  /**\n   * Return the project ID used by this class.\n   * @returns {Promise} A promise that resolves to string containing the project ID.\n   */\n\n\n  getProjectId(callback) {\n    if (callback) {\n      this.auth.getProjectId(callback);\n      return;\n    }\n\n    return this.auth.getProjectId();\n  }\n  /**\n   * Create a set of phrase hints. Each item in the set can be a single word or\n   * a multi-word phrase. The items in the PhraseSet are favored by the\n   * recognition model when you send a call that includes the PhraseSet.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. The parent resource where this phrase set will be created.\n   *   Format:\n   *   {api_version}/projects/{project}/locations/{location}/phraseSets\n   * @param {string} request.phraseSetId\n   *   The ID to use for the phrase set, which will become the final\n   *   component of the phrase set's resource name.\n   *\n   *   This value should be 4-63 characters, and valid characters\n   *   are /{@link 0-9|a-z}-/.\n   * @param {google.cloud.speech.v1p1beta1.PhraseSet} request.phraseSet\n   *   Required. The phrase set to create.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [PhraseSet]{@link google.cloud.speech.v1p1beta1.PhraseSet}.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n   *   for more details and examples.\n   * @example\n   * const [response] = await client.createPhraseSet(request);\n   */\n\n\n  createPhraseSet(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.createPhraseSet(request, options, callback);\n  }\n  /**\n   * Get a phrase set.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.name\n   *   Required. The name of the phrase set to retrieve.\n   *   Format:\n   *   {api_version}/projects/{project}/locations/{location}/phraseSets/{phrase_set}\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [PhraseSet]{@link google.cloud.speech.v1p1beta1.PhraseSet}.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n   *   for more details and examples.\n   * @example\n   * const [response] = await client.getPhraseSet(request);\n   */\n\n\n  getPhraseSet(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      name: request.name || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.getPhraseSet(request, options, callback);\n  }\n  /**\n   * Update a phrase set.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {google.cloud.speech.v1p1beta1.PhraseSet} request.phraseSet\n   *   Required. The phrase set to update.\n   *\n   *   The phrase set's `name` field is used to identify the set to be\n   *   updated. Format:\n   *   {api_version}/projects/{project}/locations/{location}/phraseSets/{phrase_set}\n   * @param {google.protobuf.FieldMask} request.updateMask\n   *   The list of fields to be updated.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [PhraseSet]{@link google.cloud.speech.v1p1beta1.PhraseSet}.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n   *   for more details and examples.\n   * @example\n   * const [response] = await client.updatePhraseSet(request);\n   */\n\n\n  updatePhraseSet(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      'phrase_set.name': request.phraseSet.name || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.updatePhraseSet(request, options, callback);\n  }\n  /**\n   * Delete a phrase set.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.name\n   *   Required. The name of the phrase set to delete.\n   *   Format:\n   *   {api_version}/projects/{project}/locations/{location}/phraseSets/{phrase_set}\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n   *   for more details and examples.\n   * @example\n   * const [response] = await client.deletePhraseSet(request);\n   */\n\n\n  deletePhraseSet(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      name: request.name || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.deletePhraseSet(request, options, callback);\n  }\n  /**\n   * Create a custom class.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. The parent resource where this custom class will be created.\n   *   Format:\n   *   {api_version}/projects/{project}/locations/{location}/customClasses\n   * @param {string} request.customClassId\n   *   The ID to use for the custom class, which will become the final\n   *   component of the custom class' resource name.\n   *\n   *   This value should be 4-63 characters, and valid characters\n   *   are /{@link 0-9|a-z}-/.\n   * @param {google.cloud.speech.v1p1beta1.CustomClass} request.customClass\n   *   Required. The custom class to create.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [CustomClass]{@link google.cloud.speech.v1p1beta1.CustomClass}.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n   *   for more details and examples.\n   * @example\n   * const [response] = await client.createCustomClass(request);\n   */\n\n\n  createCustomClass(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.createCustomClass(request, options, callback);\n  }\n  /**\n   * Get a custom class.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.name\n   *   Required. The name of the custom class to retrieve.\n   *   Format:\n   *   {api_version}/projects/{project}/locations/{location}/customClasses/{custom_class}\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [CustomClass]{@link google.cloud.speech.v1p1beta1.CustomClass}.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n   *   for more details and examples.\n   * @example\n   * const [response] = await client.getCustomClass(request);\n   */\n\n\n  getCustomClass(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      name: request.name || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.getCustomClass(request, options, callback);\n  }\n  /**\n   * Update a custom class.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {google.cloud.speech.v1p1beta1.CustomClass} request.customClass\n   *   Required. The custom class to update.\n   *\n   *   The custom class's `name` field is used to identify the custom class to be\n   *   updated. Format:\n   *   {api_version}/projects/{project}/locations/{location}/customClasses/{custom_class}\n   * @param {google.protobuf.FieldMask} request.updateMask\n   *   The list of fields to be updated.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [CustomClass]{@link google.cloud.speech.v1p1beta1.CustomClass}.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n   *   for more details and examples.\n   * @example\n   * const [response] = await client.updateCustomClass(request);\n   */\n\n\n  updateCustomClass(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      'custom_class.name': request.customClass.name || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.updateCustomClass(request, options, callback);\n  }\n  /**\n   * Delete a custom class.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.name\n   *   Required. The name of the custom class to delete.\n   *   Format:\n   *   {api_version}/projects/{project}/locations/{location}/customClasses/{custom_class}\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n   *   for more details and examples.\n   * @example\n   * const [response] = await client.deleteCustomClass(request);\n   */\n\n\n  deleteCustomClass(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      name: request.name || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.deleteCustomClass(request, options, callback);\n  }\n  /**\n   * List phrase sets.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. The parent, which owns this collection of phrase set.\n   *   Format:\n   *   projects/{project}/locations/{location}\n   * @param {number} request.pageSize\n   *   The maximum number of phrase sets to return. The service may return\n   *   fewer than this value. If unspecified, at most 50 phrase sets will be\n   *   returned. The maximum value is 1000; values above 1000 will be coerced to\n   *   1000.\n   * @param {string} request.pageToken\n   *   A page token, received from a previous `ListPhraseSet` call.\n   *   Provide this to retrieve the subsequent page.\n   *\n   *   When paginating, all other parameters provided to `ListPhraseSet` must\n   *   match the call that provided the page token.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is Array of [PhraseSet]{@link google.cloud.speech.v1p1beta1.PhraseSet}.\n   *   The client library will perform auto-pagination by default: it will call the API as many\n   *   times as needed and will merge results from all the pages into this array.\n   *   Note that it can affect your quota.\n   *   We recommend using `listPhraseSetAsync()`\n   *   method described below for async iteration which you can stop as needed.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n   *   for more details and examples.\n   */\n\n\n  listPhraseSet(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.listPhraseSet(request, options, callback);\n  }\n  /**\n   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. The parent, which owns this collection of phrase set.\n   *   Format:\n   *   projects/{project}/locations/{location}\n   * @param {number} request.pageSize\n   *   The maximum number of phrase sets to return. The service may return\n   *   fewer than this value. If unspecified, at most 50 phrase sets will be\n   *   returned. The maximum value is 1000; values above 1000 will be coerced to\n   *   1000.\n   * @param {string} request.pageToken\n   *   A page token, received from a previous `ListPhraseSet` call.\n   *   Provide this to retrieve the subsequent page.\n   *\n   *   When paginating, all other parameters provided to `ListPhraseSet` must\n   *   match the call that provided the page token.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Stream}\n   *   An object stream which emits an object representing [PhraseSet]{@link google.cloud.speech.v1p1beta1.PhraseSet} on 'data' event.\n   *   The client library will perform auto-pagination by default: it will call the API as many\n   *   times as needed. Note that it can affect your quota.\n   *   We recommend using `listPhraseSetAsync()`\n   *   method described below for async iteration which you can stop as needed.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n   *   for more details and examples.\n   */\n\n\n  listPhraseSetStream(request, options) {\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    const callSettings = new gax.CallSettings(options);\n    this.initialize();\n    return this.descriptors.page.listPhraseSet.createStream(this.innerApiCalls.listPhraseSet, request, callSettings);\n  }\n  /**\n   * Equivalent to `listPhraseSet`, but returns an iterable object.\n   *\n   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. The parent, which owns this collection of phrase set.\n   *   Format:\n   *   projects/{project}/locations/{location}\n   * @param {number} request.pageSize\n   *   The maximum number of phrase sets to return. The service may return\n   *   fewer than this value. If unspecified, at most 50 phrase sets will be\n   *   returned. The maximum value is 1000; values above 1000 will be coerced to\n   *   1000.\n   * @param {string} request.pageToken\n   *   A page token, received from a previous `ListPhraseSet` call.\n   *   Provide this to retrieve the subsequent page.\n   *\n   *   When paginating, all other parameters provided to `ListPhraseSet` must\n   *   match the call that provided the page token.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Object}\n   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).\n   *   When you iterate the returned iterable, each element will be an object representing\n   *   [PhraseSet]{@link google.cloud.speech.v1p1beta1.PhraseSet}. The API will be called under the hood as needed, once per the page,\n   *   so you can stop the iteration when you don't need more results.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n   *   for more details and examples.\n   * @example\n   * const iterable = client.listPhraseSetAsync(request);\n   * for await (const response of iterable) {\n   *   // process response\n   * }\n   */\n\n\n  listPhraseSetAsync(request, options) {\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    options = options || {};\n    const callSettings = new gax.CallSettings(options);\n    this.initialize();\n    return this.descriptors.page.listPhraseSet.asyncIterate(this.innerApiCalls['listPhraseSet'], request, callSettings);\n  }\n  /**\n   * List custom classes.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. The parent, which owns this collection of custom classes.\n   *   Format:\n   *   {api_version}/projects/{project}/locations/{location}/customClasses\n   * @param {number} request.pageSize\n   *   The maximum number of custom classes to return. The service may return\n   *   fewer than this value. If unspecified, at most 50 custom classes will be\n   *   returned. The maximum value is 1000; values above 1000 will be coerced to\n   *   1000.\n   * @param {string} request.pageToken\n   *   A page token, received from a previous `ListCustomClass` call.\n   *   Provide this to retrieve the subsequent page.\n   *\n   *   When paginating, all other parameters provided to `ListCustomClass` must\n   *   match the call that provided the page token.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is Array of [CustomClass]{@link google.cloud.speech.v1p1beta1.CustomClass}.\n   *   The client library will perform auto-pagination by default: it will call the API as many\n   *   times as needed and will merge results from all the pages into this array.\n   *   Note that it can affect your quota.\n   *   We recommend using `listCustomClassesAsync()`\n   *   method described below for async iteration which you can stop as needed.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n   *   for more details and examples.\n   */\n\n\n  listCustomClasses(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.listCustomClasses(request, options, callback);\n  }\n  /**\n   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. The parent, which owns this collection of custom classes.\n   *   Format:\n   *   {api_version}/projects/{project}/locations/{location}/customClasses\n   * @param {number} request.pageSize\n   *   The maximum number of custom classes to return. The service may return\n   *   fewer than this value. If unspecified, at most 50 custom classes will be\n   *   returned. The maximum value is 1000; values above 1000 will be coerced to\n   *   1000.\n   * @param {string} request.pageToken\n   *   A page token, received from a previous `ListCustomClass` call.\n   *   Provide this to retrieve the subsequent page.\n   *\n   *   When paginating, all other parameters provided to `ListCustomClass` must\n   *   match the call that provided the page token.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Stream}\n   *   An object stream which emits an object representing [CustomClass]{@link google.cloud.speech.v1p1beta1.CustomClass} on 'data' event.\n   *   The client library will perform auto-pagination by default: it will call the API as many\n   *   times as needed. Note that it can affect your quota.\n   *   We recommend using `listCustomClassesAsync()`\n   *   method described below for async iteration which you can stop as needed.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n   *   for more details and examples.\n   */\n\n\n  listCustomClassesStream(request, options) {\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    const callSettings = new gax.CallSettings(options);\n    this.initialize();\n    return this.descriptors.page.listCustomClasses.createStream(this.innerApiCalls.listCustomClasses, request, callSettings);\n  }\n  /**\n   * Equivalent to `listCustomClasses`, but returns an iterable object.\n   *\n   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. The parent, which owns this collection of custom classes.\n   *   Format:\n   *   {api_version}/projects/{project}/locations/{location}/customClasses\n   * @param {number} request.pageSize\n   *   The maximum number of custom classes to return. The service may return\n   *   fewer than this value. If unspecified, at most 50 custom classes will be\n   *   returned. The maximum value is 1000; values above 1000 will be coerced to\n   *   1000.\n   * @param {string} request.pageToken\n   *   A page token, received from a previous `ListCustomClass` call.\n   *   Provide this to retrieve the subsequent page.\n   *\n   *   When paginating, all other parameters provided to `ListCustomClass` must\n   *   match the call that provided the page token.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Object}\n   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).\n   *   When you iterate the returned iterable, each element will be an object representing\n   *   [CustomClass]{@link google.cloud.speech.v1p1beta1.CustomClass}. The API will be called under the hood as needed, once per the page,\n   *   so you can stop the iteration when you don't need more results.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n   *   for more details and examples.\n   * @example\n   * const iterable = client.listCustomClassesAsync(request);\n   * for await (const response of iterable) {\n   *   // process response\n   * }\n   */\n\n\n  listCustomClassesAsync(request, options) {\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    options = options || {};\n    const callSettings = new gax.CallSettings(options);\n    this.initialize();\n    return this.descriptors.page.listCustomClasses.asyncIterate(this.innerApiCalls['listCustomClasses'], request, callSettings);\n  } // --------------------\n  // -- Path templates --\n  // --------------------\n\n  /**\n   * Return a fully-qualified customClass resource name string.\n   *\n   * @param {string} project\n   * @param {string} location\n   * @param {string} custom_class\n   * @returns {string} Resource name string.\n   */\n\n\n  customClassPath(project, location, customClass) {\n    return this.pathTemplates.customClassPathTemplate.render({\n      project: project,\n      location: location,\n      custom_class: customClass\n    });\n  }\n  /**\n   * Parse the project from CustomClass resource.\n   *\n   * @param {string} customClassName\n   *   A fully-qualified path representing CustomClass resource.\n   * @returns {string} A string representing the project.\n   */\n\n\n  matchProjectFromCustomClassName(customClassName) {\n    return this.pathTemplates.customClassPathTemplate.match(customClassName).project;\n  }\n  /**\n   * Parse the location from CustomClass resource.\n   *\n   * @param {string} customClassName\n   *   A fully-qualified path representing CustomClass resource.\n   * @returns {string} A string representing the location.\n   */\n\n\n  matchLocationFromCustomClassName(customClassName) {\n    return this.pathTemplates.customClassPathTemplate.match(customClassName).location;\n  }\n  /**\n   * Parse the custom_class from CustomClass resource.\n   *\n   * @param {string} customClassName\n   *   A fully-qualified path representing CustomClass resource.\n   * @returns {string} A string representing the custom_class.\n   */\n\n\n  matchCustomClassFromCustomClassName(customClassName) {\n    return this.pathTemplates.customClassPathTemplate.match(customClassName).custom_class;\n  }\n  /**\n   * Return a fully-qualified location resource name string.\n   *\n   * @param {string} project\n   * @param {string} location\n   * @returns {string} Resource name string.\n   */\n\n\n  locationPath(project, location) {\n    return this.pathTemplates.locationPathTemplate.render({\n      project: project,\n      location: location\n    });\n  }\n  /**\n   * Parse the project from Location resource.\n   *\n   * @param {string} locationName\n   *   A fully-qualified path representing Location resource.\n   * @returns {string} A string representing the project.\n   */\n\n\n  matchProjectFromLocationName(locationName) {\n    return this.pathTemplates.locationPathTemplate.match(locationName).project;\n  }\n  /**\n   * Parse the location from Location resource.\n   *\n   * @param {string} locationName\n   *   A fully-qualified path representing Location resource.\n   * @returns {string} A string representing the location.\n   */\n\n\n  matchLocationFromLocationName(locationName) {\n    return this.pathTemplates.locationPathTemplate.match(locationName).location;\n  }\n  /**\n   * Return a fully-qualified phraseSet resource name string.\n   *\n   * @param {string} project\n   * @param {string} location\n   * @param {string} phrase_set\n   * @returns {string} Resource name string.\n   */\n\n\n  phraseSetPath(project, location, phraseSet) {\n    return this.pathTemplates.phraseSetPathTemplate.render({\n      project: project,\n      location: location,\n      phrase_set: phraseSet\n    });\n  }\n  /**\n   * Parse the project from PhraseSet resource.\n   *\n   * @param {string} phraseSetName\n   *   A fully-qualified path representing PhraseSet resource.\n   * @returns {string} A string representing the project.\n   */\n\n\n  matchProjectFromPhraseSetName(phraseSetName) {\n    return this.pathTemplates.phraseSetPathTemplate.match(phraseSetName).project;\n  }\n  /**\n   * Parse the location from PhraseSet resource.\n   *\n   * @param {string} phraseSetName\n   *   A fully-qualified path representing PhraseSet resource.\n   * @returns {string} A string representing the location.\n   */\n\n\n  matchLocationFromPhraseSetName(phraseSetName) {\n    return this.pathTemplates.phraseSetPathTemplate.match(phraseSetName).location;\n  }\n  /**\n   * Parse the phrase_set from PhraseSet resource.\n   *\n   * @param {string} phraseSetName\n   *   A fully-qualified path representing PhraseSet resource.\n   * @returns {string} A string representing the phrase_set.\n   */\n\n\n  matchPhraseSetFromPhraseSetName(phraseSetName) {\n    return this.pathTemplates.phraseSetPathTemplate.match(phraseSetName).phrase_set;\n  }\n  /**\n   * Return a fully-qualified project resource name string.\n   *\n   * @param {string} project\n   * @returns {string} Resource name string.\n   */\n\n\n  projectPath(project) {\n    return this.pathTemplates.projectPathTemplate.render({\n      project: project\n    });\n  }\n  /**\n   * Parse the project from Project resource.\n   *\n   * @param {string} projectName\n   *   A fully-qualified path representing Project resource.\n   * @returns {string} A string representing the project.\n   */\n\n\n  matchProjectFromProjectName(projectName) {\n    return this.pathTemplates.projectPathTemplate.match(projectName).project;\n  }\n  /**\n   * Terminate the gRPC channel and close the client.\n   *\n   * The client will no longer be usable and all future behavior is undefined.\n   * @returns {Promise} A promise that resolves when the client is closed.\n   */\n\n\n  close() {\n    this.initialize();\n\n    if (!this._terminated) {\n      return this.adaptationStub.then(stub => {\n        this._terminated = true;\n        stub.close();\n      });\n    }\n\n    return Promise.resolve();\n  }\n\n}\n\nexports.AdaptationClient = AdaptationClient;","map":{"version":3,"sources":["../../../src/v1p1beta1/adaptation_client.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// ** This file is automatically generated by gapic-generator-typescript. **\n// ** https://github.com/googleapis/gapic-generator-typescript **\n// ** All changes to this file may be overwritten. **\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AdaptationClient = void 0;\n/* global window */\nconst gax = require(\"google-gax\");\nconst path = require(\"path\");\n/**\n * Client JSON configuration object, loaded from\n * `src/v1p1beta1/adaptation_client_config.json`.\n * This file defines retry strategy and timeouts for all API methods in this library.\n */\nconst gapicConfig = require(\"./adaptation_client_config.json\");\nconst version = require('../../../package.json').version;\n/**\n *  Service that implements Google Cloud Speech Adaptation API.\n * @class\n * @memberof v1p1beta1\n */\nclass AdaptationClient {\n    /**\n     * Construct an instance of AdaptationClient.\n     *\n     * @param {object} [options] - The configuration object.\n     * The options accepted by the constructor are described in detail\n     * in [this document](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#creating-the-client-instance).\n     * The common options are:\n     * @param {object} [options.credentials] - Credentials object.\n     * @param {string} [options.credentials.client_email]\n     * @param {string} [options.credentials.private_key]\n     * @param {string} [options.email] - Account email address. Required when\n     *     using a .pem or .p12 keyFilename.\n     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or\n     *     .p12 key downloaded from the Google Developers Console. If you provide\n     *     a path to a JSON file, the projectId option below is not necessary.\n     *     NOTE: .pem and .p12 require you to specify options.email as well.\n     * @param {number} [options.port] - The port on which to connect to\n     *     the remote host.\n     * @param {string} [options.projectId] - The project ID from the Google\n     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check\n     *     the environment variable GCLOUD_PROJECT for your project ID. If your\n     *     app is running in an environment which supports\n     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},\n     *     your project ID will be detected automatically.\n     * @param {string} [options.apiEndpoint] - The domain name of the\n     *     API remote host.\n     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.\n     *     Follows the structure of {@link gapicConfig}.\n     * @param {boolean} [options.fallback] - Use HTTP fallback mode.\n     *     In fallback mode, a special browser-compatible transport implementation is used\n     *     instead of gRPC transport. In browser context (if the `window` object is defined)\n     *     the fallback mode is enabled automatically; set `options.fallback` to `false`\n     *     if you need to override this behavior.\n     */\n    constructor(opts) {\n        var _a, _b;\n        this._terminated = false;\n        this.descriptors = {\n            page: {},\n            stream: {},\n            longrunning: {},\n            batching: {},\n        };\n        // Ensure that options include all the required fields.\n        const staticMembers = this.constructor;\n        const servicePath = (opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint) || staticMembers.servicePath;\n        const port = (opts === null || opts === void 0 ? void 0 : opts.port) || staticMembers.port;\n        const clientConfig = (_a = opts === null || opts === void 0 ? void 0 : opts.clientConfig) !== null && _a !== void 0 ? _a : {};\n        const fallback = (_b = opts === null || opts === void 0 ? void 0 : opts.fallback) !== null && _b !== void 0 ? _b : (typeof window !== 'undefined' && typeof (window === null || window === void 0 ? void 0 : window.fetch) === 'function');\n        opts = Object.assign({ servicePath, port, clientConfig, fallback }, opts);\n        // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.\n        if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {\n            opts['scopes'] = staticMembers.scopes;\n        }\n        // Choose either gRPC or proto-over-HTTP implementation of google-gax.\n        this._gaxModule = opts.fallback ? gax.fallback : gax;\n        // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.\n        this._gaxGrpc = new this._gaxModule.GrpcClient(opts);\n        // Save options to use in initialize() method.\n        this._opts = opts;\n        // Save the auth object to the client, for use by other methods.\n        this.auth = this._gaxGrpc.auth;\n        // Set the default scopes in auth client if needed.\n        if (servicePath === staticMembers.servicePath) {\n            this.auth.defaultScopes = staticMembers.scopes;\n        }\n        // Determine the client header string.\n        const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];\n        if (typeof process !== 'undefined' && 'versions' in process) {\n            clientHeader.push(`gl-node/${process.versions.node}`);\n        }\n        else {\n            clientHeader.push(`gl-web/${this._gaxModule.version}`);\n        }\n        if (!opts.fallback) {\n            clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);\n        }\n        if (opts.libName && opts.libVersion) {\n            clientHeader.push(`${opts.libName}/${opts.libVersion}`);\n        }\n        // Load the applicable protos.\n        // For Node.js, pass the path to JSON proto file.\n        // For browsers, pass the JSON content.\n        const nodejsProtoPath = path.join(__dirname, '..', '..', 'protos', 'protos.json');\n        this._protos = this._gaxGrpc.loadProto(opts.fallback\n            ? // eslint-disable-next-line @typescript-eslint/no-var-requires\n                require('../../protos/protos.json')\n            : nodejsProtoPath);\n        // This API contains \"path templates\"; forward-slash-separated\n        // identifiers to uniquely identify resources within the API.\n        // Create useful helper objects for these.\n        this.pathTemplates = {\n            customClassPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/customClasses/{custom_class}'),\n            locationPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}'),\n            phraseSetPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/phraseSets/{phrase_set}'),\n            projectPathTemplate: new this._gaxModule.PathTemplate('projects/{project}'),\n        };\n        // Some of the methods on this service return \"paged\" results,\n        // (e.g. 50 results at a time, with tokens to get subsequent\n        // pages). Denote the keys used for pagination and results.\n        this.descriptors.page = {\n            listPhraseSet: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'phraseSets'),\n            listCustomClasses: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'customClasses'),\n        };\n        // Put together the default options sent with requests.\n        this._defaults = this._gaxGrpc.constructSettings('google.cloud.speech.v1p1beta1.Adaptation', gapicConfig, opts.clientConfig || {}, { 'x-goog-api-client': clientHeader.join(' ') });\n        // Set up a dictionary of \"inner API calls\"; the core implementation\n        // of calling the API is handled in `google-gax`, with this code\n        // merely providing the destination and request information.\n        this.innerApiCalls = {};\n    }\n    /**\n     * Initialize the client.\n     * Performs asynchronous operations (such as authentication) and prepares the client.\n     * This function will be called automatically when any class method is called for the\n     * first time, but if you need to initialize it before calling an actual method,\n     * feel free to call initialize() directly.\n     *\n     * You can await on this method if you want to make sure the client is initialized.\n     *\n     * @returns {Promise} A promise that resolves to an authenticated service stub.\n     */\n    initialize() {\n        // If the client stub promise is already initialized, return immediately.\n        if (this.adaptationStub) {\n            return this.adaptationStub;\n        }\n        // Put together the \"service stub\" for\n        // google.cloud.speech.v1p1beta1.Adaptation.\n        this.adaptationStub = this._gaxGrpc.createStub(this._opts.fallback\n            ? this._protos.lookupService('google.cloud.speech.v1p1beta1.Adaptation')\n            : // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                this._protos.google.cloud.speech.v1p1beta1.Adaptation, this._opts);\n        // Iterate over each of the methods that the service provides\n        // and create an API call method for each.\n        const adaptationStubMethods = [\n            'createPhraseSet',\n            'getPhraseSet',\n            'listPhraseSet',\n            'updatePhraseSet',\n            'deletePhraseSet',\n            'createCustomClass',\n            'getCustomClass',\n            'listCustomClasses',\n            'updateCustomClass',\n            'deleteCustomClass',\n        ];\n        for (const methodName of adaptationStubMethods) {\n            const callPromise = this.adaptationStub.then(stub => (...args) => {\n                if (this._terminated) {\n                    return Promise.reject('The client has already been closed.');\n                }\n                const func = stub[methodName];\n                return func.apply(stub, args);\n            }, (err) => () => {\n                throw err;\n            });\n            const descriptor = this.descriptors.page[methodName] || undefined;\n            const apiCall = this._gaxModule.createApiCall(callPromise, this._defaults[methodName], descriptor);\n            this.innerApiCalls[methodName] = apiCall;\n        }\n        return this.adaptationStub;\n    }\n    /**\n     * The DNS address for this API service.\n     * @returns {string} The DNS address for this service.\n     */\n    static get servicePath() {\n        return 'speech.googleapis.com';\n    }\n    /**\n     * The DNS address for this API service - same as servicePath(),\n     * exists for compatibility reasons.\n     * @returns {string} The DNS address for this service.\n     */\n    static get apiEndpoint() {\n        return 'speech.googleapis.com';\n    }\n    /**\n     * The port for this API service.\n     * @returns {number} The default port for this service.\n     */\n    static get port() {\n        return 443;\n    }\n    /**\n     * The scopes needed to make gRPC calls for every method defined\n     * in this service.\n     * @returns {string[]} List of default scopes.\n     */\n    static get scopes() {\n        return ['https://www.googleapis.com/auth/cloud-platform'];\n    }\n    /**\n     * Return the project ID used by this class.\n     * @returns {Promise} A promise that resolves to string containing the project ID.\n     */\n    getProjectId(callback) {\n        if (callback) {\n            this.auth.getProjectId(callback);\n            return;\n        }\n        return this.auth.getProjectId();\n    }\n    /**\n     * Create a set of phrase hints. Each item in the set can be a single word or\n     * a multi-word phrase. The items in the PhraseSet are favored by the\n     * recognition model when you send a call that includes the PhraseSet.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The parent resource where this phrase set will be created.\n     *   Format:\n     *   {api_version}/projects/{project}/locations/{location}/phraseSets\n     * @param {string} request.phraseSetId\n     *   The ID to use for the phrase set, which will become the final\n     *   component of the phrase set's resource name.\n     *\n     *   This value should be 4-63 characters, and valid characters\n     *   are /{@link 0-9|a-z}-/.\n     * @param {google.cloud.speech.v1p1beta1.PhraseSet} request.phraseSet\n     *   Required. The phrase set to create.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [PhraseSet]{@link google.cloud.speech.v1p1beta1.PhraseSet}.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n     *   for more details and examples.\n     * @example\n     * const [response] = await client.createPhraseSet(request);\n     */\n    createPhraseSet(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            parent: request.parent || '',\n        });\n        this.initialize();\n        return this.innerApiCalls.createPhraseSet(request, options, callback);\n    }\n    /**\n     * Get a phrase set.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.name\n     *   Required. The name of the phrase set to retrieve.\n     *   Format:\n     *   {api_version}/projects/{project}/locations/{location}/phraseSets/{phrase_set}\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [PhraseSet]{@link google.cloud.speech.v1p1beta1.PhraseSet}.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n     *   for more details and examples.\n     * @example\n     * const [response] = await client.getPhraseSet(request);\n     */\n    getPhraseSet(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            name: request.name || '',\n        });\n        this.initialize();\n        return this.innerApiCalls.getPhraseSet(request, options, callback);\n    }\n    /**\n     * Update a phrase set.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {google.cloud.speech.v1p1beta1.PhraseSet} request.phraseSet\n     *   Required. The phrase set to update.\n     *\n     *   The phrase set's `name` field is used to identify the set to be\n     *   updated. Format:\n     *   {api_version}/projects/{project}/locations/{location}/phraseSets/{phrase_set}\n     * @param {google.protobuf.FieldMask} request.updateMask\n     *   The list of fields to be updated.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [PhraseSet]{@link google.cloud.speech.v1p1beta1.PhraseSet}.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n     *   for more details and examples.\n     * @example\n     * const [response] = await client.updatePhraseSet(request);\n     */\n    updatePhraseSet(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            'phrase_set.name': request.phraseSet.name || '',\n        });\n        this.initialize();\n        return this.innerApiCalls.updatePhraseSet(request, options, callback);\n    }\n    /**\n     * Delete a phrase set.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.name\n     *   Required. The name of the phrase set to delete.\n     *   Format:\n     *   {api_version}/projects/{project}/locations/{location}/phraseSets/{phrase_set}\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n     *   for more details and examples.\n     * @example\n     * const [response] = await client.deletePhraseSet(request);\n     */\n    deletePhraseSet(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            name: request.name || '',\n        });\n        this.initialize();\n        return this.innerApiCalls.deletePhraseSet(request, options, callback);\n    }\n    /**\n     * Create a custom class.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The parent resource where this custom class will be created.\n     *   Format:\n     *   {api_version}/projects/{project}/locations/{location}/customClasses\n     * @param {string} request.customClassId\n     *   The ID to use for the custom class, which will become the final\n     *   component of the custom class' resource name.\n     *\n     *   This value should be 4-63 characters, and valid characters\n     *   are /{@link 0-9|a-z}-/.\n     * @param {google.cloud.speech.v1p1beta1.CustomClass} request.customClass\n     *   Required. The custom class to create.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [CustomClass]{@link google.cloud.speech.v1p1beta1.CustomClass}.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n     *   for more details and examples.\n     * @example\n     * const [response] = await client.createCustomClass(request);\n     */\n    createCustomClass(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            parent: request.parent || '',\n        });\n        this.initialize();\n        return this.innerApiCalls.createCustomClass(request, options, callback);\n    }\n    /**\n     * Get a custom class.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.name\n     *   Required. The name of the custom class to retrieve.\n     *   Format:\n     *   {api_version}/projects/{project}/locations/{location}/customClasses/{custom_class}\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [CustomClass]{@link google.cloud.speech.v1p1beta1.CustomClass}.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n     *   for more details and examples.\n     * @example\n     * const [response] = await client.getCustomClass(request);\n     */\n    getCustomClass(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            name: request.name || '',\n        });\n        this.initialize();\n        return this.innerApiCalls.getCustomClass(request, options, callback);\n    }\n    /**\n     * Update a custom class.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {google.cloud.speech.v1p1beta1.CustomClass} request.customClass\n     *   Required. The custom class to update.\n     *\n     *   The custom class's `name` field is used to identify the custom class to be\n     *   updated. Format:\n     *   {api_version}/projects/{project}/locations/{location}/customClasses/{custom_class}\n     * @param {google.protobuf.FieldMask} request.updateMask\n     *   The list of fields to be updated.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [CustomClass]{@link google.cloud.speech.v1p1beta1.CustomClass}.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n     *   for more details and examples.\n     * @example\n     * const [response] = await client.updateCustomClass(request);\n     */\n    updateCustomClass(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            'custom_class.name': request.customClass.name || '',\n        });\n        this.initialize();\n        return this.innerApiCalls.updateCustomClass(request, options, callback);\n    }\n    /**\n     * Delete a custom class.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.name\n     *   Required. The name of the custom class to delete.\n     *   Format:\n     *   {api_version}/projects/{project}/locations/{location}/customClasses/{custom_class}\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n     *   for more details and examples.\n     * @example\n     * const [response] = await client.deleteCustomClass(request);\n     */\n    deleteCustomClass(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            name: request.name || '',\n        });\n        this.initialize();\n        return this.innerApiCalls.deleteCustomClass(request, options, callback);\n    }\n    /**\n     * List phrase sets.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The parent, which owns this collection of phrase set.\n     *   Format:\n     *   projects/{project}/locations/{location}\n     * @param {number} request.pageSize\n     *   The maximum number of phrase sets to return. The service may return\n     *   fewer than this value. If unspecified, at most 50 phrase sets will be\n     *   returned. The maximum value is 1000; values above 1000 will be coerced to\n     *   1000.\n     * @param {string} request.pageToken\n     *   A page token, received from a previous `ListPhraseSet` call.\n     *   Provide this to retrieve the subsequent page.\n     *\n     *   When paginating, all other parameters provided to `ListPhraseSet` must\n     *   match the call that provided the page token.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is Array of [PhraseSet]{@link google.cloud.speech.v1p1beta1.PhraseSet}.\n     *   The client library will perform auto-pagination by default: it will call the API as many\n     *   times as needed and will merge results from all the pages into this array.\n     *   Note that it can affect your quota.\n     *   We recommend using `listPhraseSetAsync()`\n     *   method described below for async iteration which you can stop as needed.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n     *   for more details and examples.\n     */\n    listPhraseSet(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            parent: request.parent || '',\n        });\n        this.initialize();\n        return this.innerApiCalls.listPhraseSet(request, options, callback);\n    }\n    /**\n     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The parent, which owns this collection of phrase set.\n     *   Format:\n     *   projects/{project}/locations/{location}\n     * @param {number} request.pageSize\n     *   The maximum number of phrase sets to return. The service may return\n     *   fewer than this value. If unspecified, at most 50 phrase sets will be\n     *   returned. The maximum value is 1000; values above 1000 will be coerced to\n     *   1000.\n     * @param {string} request.pageToken\n     *   A page token, received from a previous `ListPhraseSet` call.\n     *   Provide this to retrieve the subsequent page.\n     *\n     *   When paginating, all other parameters provided to `ListPhraseSet` must\n     *   match the call that provided the page token.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which emits an object representing [PhraseSet]{@link google.cloud.speech.v1p1beta1.PhraseSet} on 'data' event.\n     *   The client library will perform auto-pagination by default: it will call the API as many\n     *   times as needed. Note that it can affect your quota.\n     *   We recommend using `listPhraseSetAsync()`\n     *   method described below for async iteration which you can stop as needed.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n     *   for more details and examples.\n     */\n    listPhraseSetStream(request, options) {\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            parent: request.parent || '',\n        });\n        const callSettings = new gax.CallSettings(options);\n        this.initialize();\n        return this.descriptors.page.listPhraseSet.createStream(this.innerApiCalls.listPhraseSet, request, callSettings);\n    }\n    /**\n     * Equivalent to `listPhraseSet`, but returns an iterable object.\n     *\n     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The parent, which owns this collection of phrase set.\n     *   Format:\n     *   projects/{project}/locations/{location}\n     * @param {number} request.pageSize\n     *   The maximum number of phrase sets to return. The service may return\n     *   fewer than this value. If unspecified, at most 50 phrase sets will be\n     *   returned. The maximum value is 1000; values above 1000 will be coerced to\n     *   1000.\n     * @param {string} request.pageToken\n     *   A page token, received from a previous `ListPhraseSet` call.\n     *   Provide this to retrieve the subsequent page.\n     *\n     *   When paginating, all other parameters provided to `ListPhraseSet` must\n     *   match the call that provided the page token.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Object}\n     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).\n     *   When you iterate the returned iterable, each element will be an object representing\n     *   [PhraseSet]{@link google.cloud.speech.v1p1beta1.PhraseSet}. The API will be called under the hood as needed, once per the page,\n     *   so you can stop the iteration when you don't need more results.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n     *   for more details and examples.\n     * @example\n     * const iterable = client.listPhraseSetAsync(request);\n     * for await (const response of iterable) {\n     *   // process response\n     * }\n     */\n    listPhraseSetAsync(request, options) {\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            parent: request.parent || '',\n        });\n        options = options || {};\n        const callSettings = new gax.CallSettings(options);\n        this.initialize();\n        return this.descriptors.page.listPhraseSet.asyncIterate(this.innerApiCalls['listPhraseSet'], request, callSettings);\n    }\n    /**\n     * List custom classes.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The parent, which owns this collection of custom classes.\n     *   Format:\n     *   {api_version}/projects/{project}/locations/{location}/customClasses\n     * @param {number} request.pageSize\n     *   The maximum number of custom classes to return. The service may return\n     *   fewer than this value. If unspecified, at most 50 custom classes will be\n     *   returned. The maximum value is 1000; values above 1000 will be coerced to\n     *   1000.\n     * @param {string} request.pageToken\n     *   A page token, received from a previous `ListCustomClass` call.\n     *   Provide this to retrieve the subsequent page.\n     *\n     *   When paginating, all other parameters provided to `ListCustomClass` must\n     *   match the call that provided the page token.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is Array of [CustomClass]{@link google.cloud.speech.v1p1beta1.CustomClass}.\n     *   The client library will perform auto-pagination by default: it will call the API as many\n     *   times as needed and will merge results from all the pages into this array.\n     *   Note that it can affect your quota.\n     *   We recommend using `listCustomClassesAsync()`\n     *   method described below for async iteration which you can stop as needed.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n     *   for more details and examples.\n     */\n    listCustomClasses(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            parent: request.parent || '',\n        });\n        this.initialize();\n        return this.innerApiCalls.listCustomClasses(request, options, callback);\n    }\n    /**\n     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The parent, which owns this collection of custom classes.\n     *   Format:\n     *   {api_version}/projects/{project}/locations/{location}/customClasses\n     * @param {number} request.pageSize\n     *   The maximum number of custom classes to return. The service may return\n     *   fewer than this value. If unspecified, at most 50 custom classes will be\n     *   returned. The maximum value is 1000; values above 1000 will be coerced to\n     *   1000.\n     * @param {string} request.pageToken\n     *   A page token, received from a previous `ListCustomClass` call.\n     *   Provide this to retrieve the subsequent page.\n     *\n     *   When paginating, all other parameters provided to `ListCustomClass` must\n     *   match the call that provided the page token.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which emits an object representing [CustomClass]{@link google.cloud.speech.v1p1beta1.CustomClass} on 'data' event.\n     *   The client library will perform auto-pagination by default: it will call the API as many\n     *   times as needed. Note that it can affect your quota.\n     *   We recommend using `listCustomClassesAsync()`\n     *   method described below for async iteration which you can stop as needed.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n     *   for more details and examples.\n     */\n    listCustomClassesStream(request, options) {\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            parent: request.parent || '',\n        });\n        const callSettings = new gax.CallSettings(options);\n        this.initialize();\n        return this.descriptors.page.listCustomClasses.createStream(this.innerApiCalls.listCustomClasses, request, callSettings);\n    }\n    /**\n     * Equivalent to `listCustomClasses`, but returns an iterable object.\n     *\n     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The parent, which owns this collection of custom classes.\n     *   Format:\n     *   {api_version}/projects/{project}/locations/{location}/customClasses\n     * @param {number} request.pageSize\n     *   The maximum number of custom classes to return. The service may return\n     *   fewer than this value. If unspecified, at most 50 custom classes will be\n     *   returned. The maximum value is 1000; values above 1000 will be coerced to\n     *   1000.\n     * @param {string} request.pageToken\n     *   A page token, received from a previous `ListCustomClass` call.\n     *   Provide this to retrieve the subsequent page.\n     *\n     *   When paginating, all other parameters provided to `ListCustomClass` must\n     *   match the call that provided the page token.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Object}\n     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).\n     *   When you iterate the returned iterable, each element will be an object representing\n     *   [CustomClass]{@link google.cloud.speech.v1p1beta1.CustomClass}. The API will be called under the hood as needed, once per the page,\n     *   so you can stop the iteration when you don't need more results.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n     *   for more details and examples.\n     * @example\n     * const iterable = client.listCustomClassesAsync(request);\n     * for await (const response of iterable) {\n     *   // process response\n     * }\n     */\n    listCustomClassesAsync(request, options) {\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n            parent: request.parent || '',\n        });\n        options = options || {};\n        const callSettings = new gax.CallSettings(options);\n        this.initialize();\n        return this.descriptors.page.listCustomClasses.asyncIterate(this.innerApiCalls['listCustomClasses'], request, callSettings);\n    }\n    // --------------------\n    // -- Path templates --\n    // --------------------\n    /**\n     * Return a fully-qualified customClass resource name string.\n     *\n     * @param {string} project\n     * @param {string} location\n     * @param {string} custom_class\n     * @returns {string} Resource name string.\n     */\n    customClassPath(project, location, customClass) {\n        return this.pathTemplates.customClassPathTemplate.render({\n            project: project,\n            location: location,\n            custom_class: customClass,\n        });\n    }\n    /**\n     * Parse the project from CustomClass resource.\n     *\n     * @param {string} customClassName\n     *   A fully-qualified path representing CustomClass resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromCustomClassName(customClassName) {\n        return this.pathTemplates.customClassPathTemplate.match(customClassName)\n            .project;\n    }\n    /**\n     * Parse the location from CustomClass resource.\n     *\n     * @param {string} customClassName\n     *   A fully-qualified path representing CustomClass resource.\n     * @returns {string} A string representing the location.\n     */\n    matchLocationFromCustomClassName(customClassName) {\n        return this.pathTemplates.customClassPathTemplate.match(customClassName)\n            .location;\n    }\n    /**\n     * Parse the custom_class from CustomClass resource.\n     *\n     * @param {string} customClassName\n     *   A fully-qualified path representing CustomClass resource.\n     * @returns {string} A string representing the custom_class.\n     */\n    matchCustomClassFromCustomClassName(customClassName) {\n        return this.pathTemplates.customClassPathTemplate.match(customClassName)\n            .custom_class;\n    }\n    /**\n     * Return a fully-qualified location resource name string.\n     *\n     * @param {string} project\n     * @param {string} location\n     * @returns {string} Resource name string.\n     */\n    locationPath(project, location) {\n        return this.pathTemplates.locationPathTemplate.render({\n            project: project,\n            location: location,\n        });\n    }\n    /**\n     * Parse the project from Location resource.\n     *\n     * @param {string} locationName\n     *   A fully-qualified path representing Location resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromLocationName(locationName) {\n        return this.pathTemplates.locationPathTemplate.match(locationName).project;\n    }\n    /**\n     * Parse the location from Location resource.\n     *\n     * @param {string} locationName\n     *   A fully-qualified path representing Location resource.\n     * @returns {string} A string representing the location.\n     */\n    matchLocationFromLocationName(locationName) {\n        return this.pathTemplates.locationPathTemplate.match(locationName).location;\n    }\n    /**\n     * Return a fully-qualified phraseSet resource name string.\n     *\n     * @param {string} project\n     * @param {string} location\n     * @param {string} phrase_set\n     * @returns {string} Resource name string.\n     */\n    phraseSetPath(project, location, phraseSet) {\n        return this.pathTemplates.phraseSetPathTemplate.render({\n            project: project,\n            location: location,\n            phrase_set: phraseSet,\n        });\n    }\n    /**\n     * Parse the project from PhraseSet resource.\n     *\n     * @param {string} phraseSetName\n     *   A fully-qualified path representing PhraseSet resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromPhraseSetName(phraseSetName) {\n        return this.pathTemplates.phraseSetPathTemplate.match(phraseSetName)\n            .project;\n    }\n    /**\n     * Parse the location from PhraseSet resource.\n     *\n     * @param {string} phraseSetName\n     *   A fully-qualified path representing PhraseSet resource.\n     * @returns {string} A string representing the location.\n     */\n    matchLocationFromPhraseSetName(phraseSetName) {\n        return this.pathTemplates.phraseSetPathTemplate.match(phraseSetName)\n            .location;\n    }\n    /**\n     * Parse the phrase_set from PhraseSet resource.\n     *\n     * @param {string} phraseSetName\n     *   A fully-qualified path representing PhraseSet resource.\n     * @returns {string} A string representing the phrase_set.\n     */\n    matchPhraseSetFromPhraseSetName(phraseSetName) {\n        return this.pathTemplates.phraseSetPathTemplate.match(phraseSetName)\n            .phrase_set;\n    }\n    /**\n     * Return a fully-qualified project resource name string.\n     *\n     * @param {string} project\n     * @returns {string} Resource name string.\n     */\n    projectPath(project) {\n        return this.pathTemplates.projectPathTemplate.render({\n            project: project,\n        });\n    }\n    /**\n     * Parse the project from Project resource.\n     *\n     * @param {string} projectName\n     *   A fully-qualified path representing Project resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromProjectName(projectName) {\n        return this.pathTemplates.projectPathTemplate.match(projectName).project;\n    }\n    /**\n     * Terminate the gRPC channel and close the client.\n     *\n     * The client will no longer be usable and all future behavior is undefined.\n     * @returns {Promise} A promise that resolves when the client is closed.\n     */\n    close() {\n        this.initialize();\n        if (!this._terminated) {\n            return this.adaptationStub.then(stub => {\n                this._terminated = true;\n                stub.close();\n            });\n        }\n        return Promise.resolve();\n    }\n}\nexports.AdaptationClient = AdaptationClient;\n//# sourceMappingURL=adaptation_client.js.map"]},"metadata":{},"sourceType":"script"}