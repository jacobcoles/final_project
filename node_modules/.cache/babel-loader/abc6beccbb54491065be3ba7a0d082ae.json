{"ast":null,"code":"\"use strict\"; // Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/* global window */\n\nvar _regeneratorRuntime = require(\"/Users/jacobcoles/Desktop/LT2216/final_project/final_project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/jacobcoles/Desktop/LT2216/final_project/final_project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BrowserCrypto = void 0; // This file implements crypto functions we need using in-browser\n// SubtleCrypto interface `window.crypto.subtle`.\n\nconst base64js = require(\"base64-js\"); // Not all browsers support `TextEncoder`. The following `require` will\n// provide a fast UTF8-only replacement for those browsers that don't support\n// text encoding natively.\n// eslint-disable-next-line node/no-unsupported-features/node-builtins\n\n\nif (typeof process === 'undefined' && typeof TextEncoder === 'undefined') {\n  require('fast-text-encoding');\n}\n\nconst crypto_1 = require(\"../crypto\");\n\nclass BrowserCrypto {\n  constructor() {\n    if (typeof window === 'undefined' || window.crypto === undefined || window.crypto.subtle === undefined) {\n      throw new Error(\"SubtleCrypto not found. Make sure it's an https:// website.\");\n    }\n  }\n\n  sha256DigestBase64(str) {\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var inputBuffer, outputBuffer;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            // SubtleCrypto digest() method is async, so we must make\n            // this method async as well.\n            // To calculate SHA256 digest using SubtleCrypto, we first\n            // need to convert an input string to an ArrayBuffer:\n            // eslint-disable-next-line node/no-unsupported-features/node-builtins\n            inputBuffer = new TextEncoder().encode(str); // Result is ArrayBuffer as well.\n\n            _context.next = 3;\n            return window.crypto.subtle.digest('SHA-256', inputBuffer);\n\n          case 3:\n            outputBuffer = _context.sent;\n            return _context.abrupt(\"return\", base64js.fromByteArray(new Uint8Array(outputBuffer)));\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }))();\n  }\n\n  randomBytesBase64(count) {\n    const array = new Uint8Array(count);\n    window.crypto.getRandomValues(array);\n    return base64js.fromByteArray(array);\n  }\n\n  static padBase64(base64) {\n    // base64js requires padding, so let's add some '='\n    while (base64.length % 4 !== 0) {\n      base64 += '=';\n    }\n\n    return base64;\n  }\n\n  verify(pubkey, data, signature) {\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var algo, dataArray, signatureArray, cryptoKey, result;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            algo = {\n              name: 'RSASSA-PKCS1-v1_5',\n              hash: {\n                name: 'SHA-256'\n              }\n            }; // eslint-disable-next-line node/no-unsupported-features/node-builtins\n\n            dataArray = new TextEncoder().encode(data);\n            signatureArray = base64js.toByteArray(BrowserCrypto.padBase64(signature));\n            _context2.next = 5;\n            return window.crypto.subtle.importKey('jwk', pubkey, algo, true, ['verify']);\n\n          case 5:\n            cryptoKey = _context2.sent;\n            _context2.next = 8;\n            return window.crypto.subtle.verify(algo, cryptoKey, signatureArray, dataArray);\n\n          case 8:\n            result = _context2.sent;\n            return _context2.abrupt(\"return\", result);\n\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2);\n    }))();\n  }\n\n  sign(privateKey, data) {\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var algo, dataArray, cryptoKey, result;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) switch (_context3.prev = _context3.next) {\n          case 0:\n            algo = {\n              name: 'RSASSA-PKCS1-v1_5',\n              hash: {\n                name: 'SHA-256'\n              }\n            }; // eslint-disable-next-line node/no-unsupported-features/node-builtins\n\n            dataArray = new TextEncoder().encode(data);\n            _context3.next = 4;\n            return window.crypto.subtle.importKey('jwk', privateKey, algo, true, ['sign']);\n\n          case 4:\n            cryptoKey = _context3.sent;\n            _context3.next = 7;\n            return window.crypto.subtle.sign(algo, cryptoKey, dataArray);\n\n          case 7:\n            result = _context3.sent;\n            return _context3.abrupt(\"return\", base64js.fromByteArray(new Uint8Array(result)));\n\n          case 9:\n          case \"end\":\n            return _context3.stop();\n        }\n      }, _callee3);\n    }))();\n  }\n\n  decodeBase64StringUtf8(base64) {\n    const uint8array = base64js.toByteArray(BrowserCrypto.padBase64(base64)); // eslint-disable-next-line node/no-unsupported-features/node-builtins\n\n    const result = new TextDecoder().decode(uint8array);\n    return result;\n  }\n\n  encodeBase64StringUtf8(text) {\n    // eslint-disable-next-line node/no-unsupported-features/node-builtins\n    const uint8array = new TextEncoder().encode(text);\n    const result = base64js.fromByteArray(uint8array);\n    return result;\n  }\n  /**\n   * Computes the SHA-256 hash of the provided string.\n   * @param str The plain text string to hash.\n   * @return A promise that resolves with the SHA-256 hash of the provided\n   *   string in hexadecimal encoding.\n   */\n\n\n  sha256DigestHex(str) {\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n      var inputBuffer, outputBuffer;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) switch (_context4.prev = _context4.next) {\n          case 0:\n            // SubtleCrypto digest() method is async, so we must make\n            // this method async as well.\n            // To calculate SHA256 digest using SubtleCrypto, we first\n            // need to convert an input string to an ArrayBuffer:\n            // eslint-disable-next-line node/no-unsupported-features/node-builtins\n            inputBuffer = new TextEncoder().encode(str); // Result is ArrayBuffer as well.\n\n            _context4.next = 3;\n            return window.crypto.subtle.digest('SHA-256', inputBuffer);\n\n          case 3:\n            outputBuffer = _context4.sent;\n            return _context4.abrupt(\"return\", crypto_1.fromArrayBufferToHex(outputBuffer));\n\n          case 5:\n          case \"end\":\n            return _context4.stop();\n        }\n      }, _callee4);\n    }))();\n  }\n  /**\n   * Computes the HMAC hash of a message using the provided crypto key and the\n   * SHA-256 algorithm.\n   * @param key The secret crypto key in utf-8 or ArrayBuffer format.\n   * @param msg The plain text message.\n   * @return A promise that resolves with the HMAC-SHA256 hash in ArrayBuffer\n   *   format.\n   */\n\n\n  signWithHmacSha256(key, msg) {\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n      var rawKey, enc, cryptoKey;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) switch (_context5.prev = _context5.next) {\n          case 0:\n            // Convert key, if provided in ArrayBuffer format, to string.\n            rawKey = typeof key === 'string' ? key : String.fromCharCode(...new Uint16Array(key)); // eslint-disable-next-line node/no-unsupported-features/node-builtins\n\n            enc = new TextEncoder();\n            _context5.next = 4;\n            return window.crypto.subtle.importKey('raw', enc.encode(rawKey), {\n              name: 'HMAC',\n              hash: {\n                name: 'SHA-256'\n              }\n            }, false, ['sign']);\n\n          case 4:\n            cryptoKey = _context5.sent;\n            return _context5.abrupt(\"return\", window.crypto.subtle.sign('HMAC', cryptoKey, enc.encode(msg)));\n\n          case 6:\n          case \"end\":\n            return _context5.stop();\n        }\n      }, _callee5);\n    }))();\n  }\n\n}\n\nexports.BrowserCrypto = BrowserCrypto;","map":{"version":3,"sources":["/Users/jacobcoles/Desktop/LT2216/final_project/final_project/node_modules/google-auth-library/build/src/crypto/browser/crypto.js"],"names":["Object","defineProperty","exports","value","BrowserCrypto","base64js","require","process","TextEncoder","crypto_1","constructor","window","crypto","undefined","subtle","Error","sha256DigestBase64","str","inputBuffer","encode","digest","outputBuffer","fromByteArray","Uint8Array","randomBytesBase64","count","array","getRandomValues","padBase64","base64","length","verify","pubkey","data","signature","algo","name","hash","dataArray","signatureArray","toByteArray","importKey","cryptoKey","result","sign","privateKey","decodeBase64StringUtf8","uint8array","TextDecoder","decode","encodeBase64StringUtf8","text","sha256DigestHex","fromArrayBufferToHex","signWithHmacSha256","key","msg","rawKey","String","fromCharCode","Uint16Array","enc"],"mappings":"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","sourcesContent":["\"use strict\";\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/* global window */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BrowserCrypto = void 0;\n// This file implements crypto functions we need using in-browser\n// SubtleCrypto interface `window.crypto.subtle`.\nconst base64js = require(\"base64-js\");\n// Not all browsers support `TextEncoder`. The following `require` will\n// provide a fast UTF8-only replacement for those browsers that don't support\n// text encoding natively.\n// eslint-disable-next-line node/no-unsupported-features/node-builtins\nif (typeof process === 'undefined' && typeof TextEncoder === 'undefined') {\n    require('fast-text-encoding');\n}\nconst crypto_1 = require(\"../crypto\");\nclass BrowserCrypto {\n    constructor() {\n        if (typeof window === 'undefined' ||\n            window.crypto === undefined ||\n            window.crypto.subtle === undefined) {\n            throw new Error(\"SubtleCrypto not found. Make sure it's an https:// website.\");\n        }\n    }\n    async sha256DigestBase64(str) {\n        // SubtleCrypto digest() method is async, so we must make\n        // this method async as well.\n        // To calculate SHA256 digest using SubtleCrypto, we first\n        // need to convert an input string to an ArrayBuffer:\n        // eslint-disable-next-line node/no-unsupported-features/node-builtins\n        const inputBuffer = new TextEncoder().encode(str);\n        // Result is ArrayBuffer as well.\n        const outputBuffer = await window.crypto.subtle.digest('SHA-256', inputBuffer);\n        return base64js.fromByteArray(new Uint8Array(outputBuffer));\n    }\n    randomBytesBase64(count) {\n        const array = new Uint8Array(count);\n        window.crypto.getRandomValues(array);\n        return base64js.fromByteArray(array);\n    }\n    static padBase64(base64) {\n        // base64js requires padding, so let's add some '='\n        while (base64.length % 4 !== 0) {\n            base64 += '=';\n        }\n        return base64;\n    }\n    async verify(pubkey, data, signature) {\n        const algo = {\n            name: 'RSASSA-PKCS1-v1_5',\n            hash: { name: 'SHA-256' },\n        };\n        // eslint-disable-next-line node/no-unsupported-features/node-builtins\n        const dataArray = new TextEncoder().encode(data);\n        const signatureArray = base64js.toByteArray(BrowserCrypto.padBase64(signature));\n        const cryptoKey = await window.crypto.subtle.importKey('jwk', pubkey, algo, true, ['verify']);\n        // SubtleCrypto's verify method is async so we must make\n        // this method async as well.\n        const result = await window.crypto.subtle.verify(algo, cryptoKey, signatureArray, dataArray);\n        return result;\n    }\n    async sign(privateKey, data) {\n        const algo = {\n            name: 'RSASSA-PKCS1-v1_5',\n            hash: { name: 'SHA-256' },\n        };\n        // eslint-disable-next-line node/no-unsupported-features/node-builtins\n        const dataArray = new TextEncoder().encode(data);\n        const cryptoKey = await window.crypto.subtle.importKey('jwk', privateKey, algo, true, ['sign']);\n        // SubtleCrypto's sign method is async so we must make\n        // this method async as well.\n        const result = await window.crypto.subtle.sign(algo, cryptoKey, dataArray);\n        return base64js.fromByteArray(new Uint8Array(result));\n    }\n    decodeBase64StringUtf8(base64) {\n        const uint8array = base64js.toByteArray(BrowserCrypto.padBase64(base64));\n        // eslint-disable-next-line node/no-unsupported-features/node-builtins\n        const result = new TextDecoder().decode(uint8array);\n        return result;\n    }\n    encodeBase64StringUtf8(text) {\n        // eslint-disable-next-line node/no-unsupported-features/node-builtins\n        const uint8array = new TextEncoder().encode(text);\n        const result = base64js.fromByteArray(uint8array);\n        return result;\n    }\n    /**\n     * Computes the SHA-256 hash of the provided string.\n     * @param str The plain text string to hash.\n     * @return A promise that resolves with the SHA-256 hash of the provided\n     *   string in hexadecimal encoding.\n     */\n    async sha256DigestHex(str) {\n        // SubtleCrypto digest() method is async, so we must make\n        // this method async as well.\n        // To calculate SHA256 digest using SubtleCrypto, we first\n        // need to convert an input string to an ArrayBuffer:\n        // eslint-disable-next-line node/no-unsupported-features/node-builtins\n        const inputBuffer = new TextEncoder().encode(str);\n        // Result is ArrayBuffer as well.\n        const outputBuffer = await window.crypto.subtle.digest('SHA-256', inputBuffer);\n        return crypto_1.fromArrayBufferToHex(outputBuffer);\n    }\n    /**\n     * Computes the HMAC hash of a message using the provided crypto key and the\n     * SHA-256 algorithm.\n     * @param key The secret crypto key in utf-8 or ArrayBuffer format.\n     * @param msg The plain text message.\n     * @return A promise that resolves with the HMAC-SHA256 hash in ArrayBuffer\n     *   format.\n     */\n    async signWithHmacSha256(key, msg) {\n        // Convert key, if provided in ArrayBuffer format, to string.\n        const rawKey = typeof key === 'string'\n            ? key\n            : String.fromCharCode(...new Uint16Array(key));\n        // eslint-disable-next-line node/no-unsupported-features/node-builtins\n        const enc = new TextEncoder();\n        const cryptoKey = await window.crypto.subtle.importKey('raw', enc.encode(rawKey), {\n            name: 'HMAC',\n            hash: {\n                name: 'SHA-256',\n            },\n        }, false, ['sign']);\n        return window.crypto.subtle.sign('HMAC', cryptoKey, enc.encode(msg));\n    }\n}\nexports.BrowserCrypto = BrowserCrypto;\n//# sourceMappingURL=crypto.js.map"]},"metadata":{},"sourceType":"script"}